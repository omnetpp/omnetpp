2024-04-24  Rudolf Hornig

	* Recent Doxygen versions support Markdown input, so start migrating comments
	towards Markdown syntax. Replaced <pre>, <tt> and \code with backtick notation,
	etc.

2025-05-05  Andras Varga

	* Fix enum-related warnings for c++23 (using enum constants in expressions
	is now frowned upon).

2025-04-18  Andras Varga

	* Added WATCH_EXPR() and WATCH_LAMBDA(), to allow watching the values of expressions.

2025-04-18  Andras Varga

	* cTopology: added an overload of extractFromNetwork() that takes std::function,
	i.e. can be used with lambda functions.

2025-03-21  Andras Varga

	* Added str() to RNG classes (cLCG32, cMersenneTwister) to make seed/state
	visible at runtime.

2025-02-28  Attila Torok

	* cComponentType: added getDocumentation().

2025-02-21  Levente Meszaros

	* Added getTerminationExceptionTypeInfoPointer() global function.

	The debugger needs to check if the exception that is being thrown is a
	termination exception or not, because the user mostly doesn't want to
	break into the debugger when the simulation terminates. Unfortunately,
	the std::type_info structure can't easily be used in the breakpoint
	conditional expression.

2025-01-14  Attila Torok

	* cAbstractTextFigure:Add getTextExtent() and getFontAscent().

	These are small wrappers around the same internal method as getBounds(),
	so they can be considered covered by the same visual test in
	test/anim/canvas (the `text` and `label` submodules).

2025-01-17  Andras Varga

	* cEnum: Added resolveName() and getNameForValue() template functions
	for convenience, with the template parameter being the enum type.

2024-10-08  ------ omnetpp-6.1.0 released ------

2024-09-10  Andras Varga

	* cEnvir: added getOutputStream()

2024-06-18  Andras Varga

	* SimTime: SimTime(cPar& d) constructor signature changed to
	SimTime(const cPar& d). This fixes a compile error when assigning
	simtime_t from cPar from a const function.

2024-06-10  Andras Varga

	* cComponent: Deprecate getAncestorPar()

2024-05-28  Andras Varga

	* SimTime: added constructors from integers, for completeness; adjust
	comments

2024-03-25  Andras Varga

	* SimTime: added new constructors; eliminate pitfall associated with
	int64_t+unit constructor

	Motivation: The constructor

	     SimTime(int64_t value, SimTimeUnit unit)

	had no double overload, so calls like

	     SimTime(3.5, SIMTIME_MS)

	were silently compiled to calls to the above ctor, resulting in incorrect
	values (3ms instead of 3.5ms).

	Adding the overload for `double` solves this problem; adding the
	overloads for other integer types was necessary to prevent ambiguity
	errors.

2024-05-06  Andras Varga

	* Implement @enum for string parameters in cStringParImpl

2024-05-02  Andras Varga

	* cConfigurationEx: Added isAbstractConfig() pure virtual method.

2024-04-18  Andras Varga

	* cHasher: Fix: Prevent -nan (and all other alternative representations of
	NaN) from causing fingerprint differences.

2024-04-07  Andras Varga

	* cEnum: Changes to support enum classes and enum base types (C++11 features).

	- All methods now expect/return intval_t aka int64_t instead of int, to prevent data loss

	- bulkInsert() was deprecated, and the constructor with a similar vararg interface
	  was deleted (they assumed int-sized args, and will crash for other sizes);
	  they are replaced by std::initializer_list-based internal-use functions.

	* Register_Enum macros:

	- Register_Enum(): implementation changed; the first arg (enum type name)
	  must now be valid (previously it was not used)

	- Added Register_Enum_WithVar() and Register_Enum_Custom() macros

	- Register_Enum2() declared obsolete

2024-03-20  Levente Meszaros

	* ContextType enum: Added new value CTX_SCHEDULER. The context being set to
	CTX_SCHEDULER indicates that the code is being run in the context of the
	simulation's the event scheduler.

2024-03-19  Andras Varga

	* cPar: Added getOwnerComponent() convenience function.

	* cPar: Added a resetEvalContext=true argument to parse().

2024-03-09  Andras Varga

	* cOutVector adapted to changes; API extended and slightly changed;
	tests updated

	Issue: setUnit() etc caused compilation error, as
	cEnvir::setVectorAttribute() is gone. Collecting attrs doesn't work, as
	we cannot add attributes after registration.

	Solution: delay registration until data is written; but allow forcing it
	with registerVector().

	API changes: added extra ctor, setAttribute(), and registerVector()

2024-03-07  Andras Varga

	* cEnvir: interface change: Remove setVectorAttribute(), add attributes map
	arg to registerOutputVector() instead. Necessitated by the feature to
	include empty vectors too in the output vector file.

2024-02-08  Andras Varga

	* cPacket: doxygen comments refined

2024-01-18  Andras Varga

	* cFingerprintCalculator: interface change: addVectorResult() split to
	registerVectorResult() and a (changed) addVectorResult(). Necessitated by
	the feature to include empty vectors too in the output vector file.

2024-01-10  Andras Varga

	* cResultFilter: Added removeDelegate(); keep the order of delegates.

2023-01-16  Andras Varga

	* cXMLElement: made it subclass from cOwnedObject instead of cObject.
	Reason: to allow them to be assigned to module parameters of the type
	'object'.

2023-01-16  Andras Varga

	* cObjectParImpl: use inherited&refined deleteOld() instead of
	deleteExpression()

	cParImpl::deleteOld() implies deleting the expression, plus more like
	clearing the srcLoc info.

	Move deleteObject() call out of doSetObject(), and into deleteOld()

2023-09-28  Andras Varga

	* cBoolParImpl,etc: factored out duplicated deleteOld() functions to base
	class

2023-01-10  Andras Varga

	* cPar: Remember the file/line location where it was assigned from.

	New cPar methods:
	- getSourceLocation()
	- getBaseDirectory()

	Latter is just a new getter for an existing private field.

2022-04-18  Andras Varga

	* Remove apparently unused RELEASE_OPPSIM_MAGIC_NUMBER define

2022-10-05  Andras Varga

	* cEnum: getNameValueMap() to return const ref

2022-06-22  Attila Torok

	* cDisplayString: Improve docstring, mention expressions and escaping

2022-05-16  Attila Torok

	* Use C++ headers instead of C ones, e.g. <cstdlib> instead of <stdlib.h>

2022-05-19  Attila Torok

	* Build: Generate config.h instead of passing macros on the command line

2022-05-09  Andras Varga

	* cKSplit: Added 'const' qualifiers to CritFunc and DivFunc function signatures

2022-05-10  Andras Varga

	* CodeFragments: store src code too, for debug purposes

2024-02-01  ------ omnetpp-6.0.3 released ------

2024-01-09  Rudolf Hornig

	* cModule::isSimple() speedup, by eliminating the usage of time consuming
	dynamic_cast().

2023-10-06  ------ omnetpp-6.0.2 released ------

2023-05-02  Levente Meszaros

	* Changed ConstantFilter to return the constant value from
	getInitialDoubleValue().

	Previously some statistics didn't record an initial value because
	constant values in expressions prevented the initial fire() calls to
	propagate down the chain.

2022-11-24  Andras Varga

	* SimTime: improved overflow checking in operator=() methods

2022-09-14  Andras Varga

	* cFingerprint::checkFingerprint(): fix comment of checkFingerprint()

2022-11-07  Andras Varga

	* cModule: improve comment of getGateNames()

2022-10-26  Andras Varga

	* cGate: better commenting of connectTo()/disconnect()

2023-08-22  Andras Varga

	* cEventHeap: added checkHeap(). Not called anywhere, but available in case
	FES debugging is needed.

2023-04-06  Andras Varga

	* simkerneldefs.h: added ASSERT_DTOR(), a throw-less version of the ASSERT
	macros to be used in destructors (C++ doesn't allow throwing from destructors)

2022-09-01  ------ omnetpp-6.0.1 released ------

2022-08-26  Andras Varga

	* cComponentType: internal methods to support proper namespace resolution
	for C++ types in @signal declarations

2022-08-17  Andras Varga

	* Feature: cProperty: added getValueOriginFile() and getValueOriginType();
	new arguments added to the setValue() method.

2022-06-22  Andras Varga

	* Fix formatting glitches in Doxygen comments

2022-04-11  ------ omnetpp-6.0 released ------

2022-04-08  Andras Varga

	* Doxygen: Massive reorganization of groups to create a better
	structure for browsing.

	  - Exploded the rather arbitrary SimCore and SimSupport groups into
	    the more intuitive Fundamentals, ModelComponents,  SimProgr,
	    SimCore groups

	  - Result filters/recorders moved out to their own group
	    ResultFiltersRecorders

	  - Created the Expressions group

	  - Put stringutil.h functions in their own group (StringFunctions)

	  - Utilities renamed to Miscellaneous, and made to hold all classes
	    that don't fit into other groups

	  - Fix: concrete filter/recorder classes did not appear in the
	    documentation

	  - Fix: simtimemath.h functions didn't appear in the documentation

	  - Fix: make CFGVAR_xxx constants appear in the documentation

2022-04-07  Attila Torok

	* Fix Doxygen grouping of functions and macros. Apparently @{ @} blocks
	in regular comments no longer work at the top level.

2022-04-07  Andras Varga

	* Adjust intrand() signature to underlying RNGs: use int32_t instead of long long.

2022-04-07  Andras Varga

	* SimTime: throw exception on conversion from NaN.

2022-04-05  Andras Varga

	* Reworked the initialization of the global cSoftOwner instance globalOwningContext

2021-12-03  Andras Varga

	* Move displayName field from cModule to cComponent. Reason:
	it is quite useful for channels too, maybe more than for modules,
	because the default channel names or full paths are not very helpful.
	("Which network node does ...rte3.ethg$o[3].channel go to?")

2021-11-17  Andras Varga

	* cResultListener: added emitInitialValue() and callEmitInitialValue()
	to allow recording of initial value (e.g. for the count and sum filters.)

2021-11-07  Andras Varga

	* cConfiguration: remove unused public method getMatchingPerObjectConfigKeys()
	to facilitate correct implementation.

2021-11-05  Andras Varga

	* any_ptr: let two nullptrs of different types be equal.

2021-11-04  Andras Varga

	* cPar: added isMutable(); see src/sim/ChangeLog for details.

2021-11-05  Andras Varga

	* Internal classes, global variables, etc moved into the omnetpp::internal
	namespace.

2021-11-04  Andras Varga

	* Introduced cValueContainer as common base class for cValueHolder,
	cValueArray, cValueMap.

2021-11-03  Andras Varga

	* getModuleByPath() / findModuleByPath() moved to cComponent, so that
	they can be called on cChannels too.

2021-11-01  Andras Varga

	* Added cOwnedDynamicExpression class which is both cOwnedObject and
	cDynamicExpression (multiple inheritance). To make this possible, the
	cObject base class was removed from cExpression.

2021-10-26  Andras Varga

	* Added cValueHolder class. It instantiated as wrapper object around cValue
	when a non-object value (double, string, etc) is assigned to a NED parameter
	of the type "object".

	* cDynamicExpression: added setResolver()/getResolver(); added back
   ResolverBase as alias for IResolver.

   * cValue: added isNullptr()

2021-10-11  Andras Varga

	* Added MergeFilter, a cResultFilter that allows multiple inputs.

2021-10-08  Andras Varga

	* cResultFilter, cResultRecorder: group init() args into a Context struct,
	so that adding something won't necessitate interface change. The old init()
	methods have been preserved as deprecated (and invoked from the new init())
	in case an existing filter/recorder overrides them. Note that potential
	external calls to the old init() method won't work any more (they will
	have no effect), and need to be changed to the new version.

2021-10-06  Andras Varga

	* Introduce txid_t for transmission IDs, and msgid_t for message IDs. The
	"long" type was for both purposes, which was not good because width of long
	is platform-dependent (32 bits on Windows). Both txid_t and msgid_t are now
	int64_t.

2021-10-05  Andras Varga

	* cRNG methods: use uint32_t instead of (unsigned) long.
	Note: width of long is platform-specific, namely it is 32 bits on Windows.

2021-10-05  Andras Varga

	* cMessage: totalMsgCount/liveMsgCount changed to uint64_t

2021-06-09  Attila Torok

	* Added cEnvir::pausePoint().

2021-09-13  Andras Varga

	* Fix bug introduced in 6.0pre12: "undisposed object" message didn't
	contain the full path of parent module, only its name.

2021-09-06  Attila Torok

	* cModule: fix bug introduced in 6.0pre12: Shift flag bits to resolve
	conflict with cSimpleModule flags

2021-08-27  Andras Varga

	* cMatchExpression: fix: delete default copy/move ctor as they were
	not suitable, and prevented e.g. pushing to an std::vector<cMatchExpression>.

2021-07-29  Andras Varga

	* cProperty: added getNumKeys() method; updateWith() made public

2021-07-22  Andras Varga

	* cValue: added cValue(const opp_string&) constructor; str() refined

	* any_ptr: added typeName(), refined str()

	* opp_string: added move constructor

2021-07-20  Andras Varga

	* cClassDescriptor: Added getFieldValue()/setFieldValue() methods
	to allow accessing fields in a typed way, using cValue. Previously
	existing methods getFieldValueAsString()/setFieldValueAsString()
	only allowed string-based access.

2021-07-16  Andras Varga

	* cValue changed to hold any_ptr instead of cObject. Changes:
	   - type OBJECT renamed to POINTER
	   - cValue(any_ptr ptr) constructor added
	   - set(cObject *obj) changed to set(any_ptr)
	   - operator=(cObject*) changed to operator=(any_ptr)
	   - set(const cPar& par), operator=(const cPar&) removed
	   - pointerValue() added
	   - containsObject(), containsXML() added
	   - cObject *objectValue() may only be called if containsObject() returns true
	   - cXMLElement *xmlValue() may only be called if containsXML() returns true

2021-07-17  Andras Varga

	* cPar: added cValue-based generic access: getValue(), setValue()

2021-06-23  Andras Varga

	* cClassDescriptor: methods changed to use any_ptr instead of void*
	for passing the object. Pointers need to be put into and extracted from
	any_ptr using the new toAnyPtr() / fromAnyPtr() functions. They have
	specialized versions for each type (via templates and overloading).

	For new types, the message compiler generates toAnyPtr()/fromAnyPtr()
	in the header file. For the simulation library classes, these methods
	come from "sim_std_m.h" (generated from sim_std.msg); "sim_std_m.h"
	is now part of <omnetpp.h>.

2021-06-23  Andras Varga

	* Added any_ptr, a type-safe void* equivalent

2021-07-01  Zoltan Bojthe

	* cValueArray: added asIntVectorInUnit(), asDoubleVectorInUnit() functions

2021-06-07  Attila Torok:

	* cWatch_cObject and cWatch_cObjectPtr internal changes

2021-06-23  Andras Varga

	* cModule: added addSubmodule() method which flows more naturally than
	cModuleType::create(). Signature:

	cModule *addSubmodule(cModuleType *type, const char *name, int index=-1);

2021-06-23  Andras Varga

	* cModuleType::createScheduleInit(): added index argument to allow creating
	vector elements

2021-06-23  Andras Varga

	* cModuleType: merge two create() overloads using arg default value (no
	visible API change)

2021-06-23  Andras Varga

	* cModule: add separate addGateVector() method instead misusing addGate()
	for creating gate vectors, also for consistency with addSubmoduleVector():

	- addGate(const char *gatename, cGate::Type type, bool isvector=false):
	  removed "isvector" argument
	- added addGateVector(const char *gatename, cGate::Type type, int size);

2021-06-18  Andras Varga

	* cStringPool removed (see below for replacements).

	Use the following instead:

	- opp_pooledstring  (backed by a hashtable-based reference-counting stringpool)
	- opp_staticpooledstring   (backed by a hashtable-based insert-only stringpool)
	- opp_staticpooledstring::get(const char *)  (returns a string from the backing stringpool)

2021-06-20  Andras Varga

	* cStaticFlag: methods moved out-of-line

2021-06-17  Andras Varga

	* Replace uses of cStringPool with opp_pooledstring or opp_staticpooledstring.
	Affected classes: cModule, cNamedObject, cXMLElement, cValue, cParImpl,
	cProperty, cFigure, cResultListener, etc.

2021-06-12  Andras Varga

	* Added opp_pooledstring, opp_staticpooledstring

2021-06-13  Andras Varga

	* Store origin (file:line) in cPar parameters (more precisely, in
	cDynamicExpression), so we can report it on evaluation errors.

	Most visible change: cPar::parse() gained an extra FileLine argument.
	Also, cDynamicExpression now has get/setSourceLocation()

2021-06-15  Andras Varga

	* cRuntimeError: Added ctor for helping chaining exceptions

2021-06-15  Andras Varga

	* cException modernized

2021-06-09  Andras Varga

	* Added FileLine class

2021-06-18  Andras Varga

	* cModule: simplify storing fullPath

2021-06-17  Andras Varga

	* More methods made const in cPatternMatcher, cMatchExpression, cTopology

2021-06-11  Andras Varga

	* cValueArray, cValueMap: dup() to make an "even deeper" copy (clone
	ALL objects). This is necessary for the following NED to work:

	    object a = {};
	   object b = dup([a]);

2021-06-10  Andras Varga

	* cNedFunction: added search by name AND accepted number of args

	New functions:
	- bool acceptsArgCount(int argCount)
	- static cNedFunction *find(const char *name, int argCount)
	- static cNedFunction *get(const char *name, int argCount)

2021-06-08  Andras Varga

	* Allow 'object' as NED function arg type and return type

	Disallow objects shared among parameters, because we don't know their
	lifetimes.

	Example:
	  object a = [1,2,3];
	  object b = a;

	then set 'a' to nullptr --> accessing 'b' would crash!

2021-06-09  Andras Varga

	* cValue: operator==() added

2021-06-09  Andras Varga

	* cComponentType: delete shared cParImpl instances at the end of the
	simulation. Previously they were only deleted on program exit.

2021-06-04  Andras Varga

	* cPreModuleAddNotification changed

2021-05-26  Andras Varga

	* Added paramName to cExpression::Context.

2021-05-30  Andras Varga

	* cComponent/cModule/cChannel: flags shifted down to fill hole

2021-05-30  Andras Varga

	* cComponent/cModule: keep lastCompletedInitStage; fix initialization
	w/ dynamic module creation.

	Initialization works again if submodules are created/deleted during
	iteration. SubmoduleIterator is restarted if creation/deletion is
	detected during iteration; modules already initialized in the previous
	round are recognized and skipped with the help of lastCompletedInitStage.

2021-05-28  Andras Varga

	* SubmoduleIterator: keep NED order of modules; detect modifications
	during iteration.

	Solution: We use two cursors: one on scalars plus one on vectors, and
	always take the one created earlier (smaller module ID); exploiting the
	fact that scalars are stored in creation order, and vectors are created
	(and filled) by NED as they occur in NED files.

	This breaks models where submodules are created/deleted during
	initialization: exception will be thrown (submodule list changed during
	iteration). This is fixed in a later commit.

2021-05-28  Zoltan Bojthe

	* cContextSwitcher: added getCallerContext()

2021-05-27  Andras Varga

	* cModule: added setIndex() and setNameAndIndex().

2021-05-21  Andras Varga

	* cModule,cGate: getIndex(), getVectorSize(), gateSize() etc to throw
	for non-vector submodules/gates.

2021-05-25  Andras Varga

	* cModule: added hasSubmodule(), getSubmoduleNames(), hasGateVector(),
	hasGates()

	Reason:
	- hasSubmodule() because hasGate() also exists
	- getSubmoduleNames() because getGateNames() also exists
	- hasGateVector() because hasSubmoduleVector() also exists
	- hasGates() because hasSubmodules() also exists
	- ALSO: getGateNames(): return type changed from std::string<const char*>
	 to std::vector<std::string>, for consistency with getSubmoduleNames()

2021-05-19  Andras Varga

	* cModule: keep track of submodule vectors; store submodules in
	pointer arrays.	New methods: hasSubmoduleVector(), getSubmoduleVectorSize(),
	addSubmoduleVector(), deleteSubmoduleVector(), setSubmoduleVectorSize(),
	getSubmoduleVectorNames()

	API changes:
	- cPreModuleAddNotification: vectorSize field removed (it could be provided,
	  but no reason: listener can also query it)
	- cModule *create(): vectorSize parameter removed
	- cChannelIterator, SubmoduleIterator:remove operator--, init(m) ->
	reset()

	* cModule: use explicit parentModule member instead of casting its owner

2021-05-25  Andras Varga

	* cComponent: added getNedTypeAndFullName() and getNedTypeAndFullPath().
	They are especially useful in constructing error messages in NED functions.

2021-05-21  Andras Varga

	* cPostModuleDeleteNotification: Changed interpretation of index field:
	If the deleted module was not part of a module vector, index is now set
	to -1 instead of 0.

	* cXMLElement change: resolve $MODULE_INDEX, $PARENTMODULE_NAME and similar
	variables to empty string if they are not applicable.

2021-05-12  Andras Varga

	* Added stringutil.h to make string functions available for models.
	Most functions delegate to common/stringutil. Some of the functions
	from simutil.h were moved over to the new header.

	List of the functions:

	- bool opp_isempty(const char *s)  {return !s || !s[0];}
	- bool opp_isblank(const char *txt);
	- const char *opp_nulltoempty(const char *s)  {return s ? s : "";}
	- const char *opp_emptytodefault(const char *s, const char *defaultString)  {return opp_isempty(s) ? defaultString : s;}
	- int opp_strlen(const char *s)
	- char *opp_strdup(const char *s)
	- char *opp_strcpy(char *s1, const char *s2)
	- int opp_strcmp(const char *s1, const char *s2)
	- std::string opp_trim(const std::string& text);
	- char *opp_strprettytrunc(char *dest, const char *src, unsigned maxlen);
	- std::string opp_stringf(const char *fmt, ...);
	- std::string opp_vstringf(const char *fmt, va_list& args);
	- std::string opp_replacesubstring(const std::string& text, const std::string& substring, const std::string& replacement, bool replaceAll);
	- std::vector<std::string> opp_split(const std::string& text, const std::string& separator);
	- std::vector<std::string> opp_splitandtrim(const std::string& text);
	- std::vector<std::string> opp_splitandtrim(const std::string& text, const std::string& separator);
	- bool opp_stringbeginswith(const char *s, const char *prefix);
	- bool opp_stringendswith(const char *s, const char *ending);
	- std::string opp_substringbefore(const std::string& str, const std::string& substr);
	- std::string opp_substringafter(const std::string& str, const std::string& substr);
	- std::string opp_substringbeforelast(const std::string& str, const std::string& substr);
	- std::string opp_substringafterlast(const std::string& str, const std::string& substr);
	- std::string opp_removestart(const std::string& str, const std::string& prefix);
	- std::string opp_removeend(const std::string& str, const std::string& end);
	- std::string opp_strlower(const char *s);
	- std::string opp_strupper(const char *s);
	- const char *opp_strnistr(const char *haystack, const char *needle, int n, bool caseSensitive);
	- int opp_strdictcmp(const char *s1, const char *s2);
	- std::string opp_join(const char *separator, const char *s1, const char *s2);
	- std::string opp_join(const char *separator, const std::string& s1, const std::string& s2);
	- std::string opp_join(const char **strings, const char *separator, bool skipEmpty=false, char quoteChar=0);
	- std::string opp_join(const char **strings, int n, const char *separator, bool skipEmpty=false, char quoteChar=0);
	- std::string opp_join(const std::vector<std::string>& strings, const char *separator, bool skipEmpty=false, char quoteChar=0);
	- char *opp_itoa(char *buf, int d);
	- char *opp_ltoa(char *buf, long d);
	- char *opp_i64toa(char *buf, int64_t d);
	- char *opp_dtoa(char *buf, const char *format, double d);
	- long opp_strtol(const char *s, char **endptr);
	- long opp_atol(const char *s);
	- unsigned long opp_strtoul(const char *s, char **endptr);
	- unsigned long opp_atoul(const char *s);
	- long long opp_strtoll(const char *s, char **endptr);
	- long long opp_atoll(const char *s);
	- unsigned long long opp_strtoull(const char *s, char **endptr);
	- unsigned long long opp_atoull(const char *s);
	- double opp_strtod(const char *s, char **endptr);
	- double opp_atof(const char *s);

2021-05-11  Andras Varga

	* cStringTokenizer rewritten to be a wrapper around common::StringTokenizer.
	It now supports features like optional skipping of empty tokens,
	optional trimming of tokens, optional honoring of quotes, optional
	honoring of parens/brackets/brackets (i.e. the input string is not broken
	into tokens in the middle of a parenthesized expression).

2021-05-13  Andras Varga

	* Cosmetics on '// namespace' comments

2021-05-04  Andras Varga

	* cDynamicExpression: parseNedExpr(): eliminate unused legacy inInifile argument

2021-05-04  Andras Varga

	* cNedFunction: modernizing: use proper enum for arg types instead of chars

2021-05-07  Andras Varga

	* Modernizing: contextType changed from int to enum (ContextType)

2021-04-29  Andras Varga

	* cEnvir: Added implementations for lifecycle-related method implementations;
	added getLifecycleListeners(). Methods were independently implemented in
	EnvirBase, cNullEnvir, StaticEnv.

2021-04-23  Attila Torok

	* Enter_Method(), Enter_Method_Silent()]: Turned into variadic macros

2021-04-15  Attila Torok

	* cException, etc: Add format(printf) attribute to printf-like methods,
	using an updated _OPP_GNU_ATTRIBUTE

2021-04-15  Andras Varga

	* checked_int_cast(double): Resolve compile-time warning by choosing a
	different implementation

2021-04-14  Andras Varga

	* Fix recently introduced bug in cStringPool

2021-04-09  Andras Varga

	* cStringPool: use std::unordered_map instead of std::map, for better performance.

2021-04-08  Andras Varga

	* cModule: use stringpooling for full name.	This results in conserving
	memory if similarly-named submodule vectors occur among several modules,
	in exchange for a (small) extra cost during network setup. E.g consider
	that names like "app[0]" or "eth[0]" occur in many hosts in an INET
	simulation; now such strings are stored in one copy only.

2021-04-07  Andras Varga

	* cModule: namePool renamed to gateNamePool

2021-04-08  Andras Varga

	* OMNETPP_BUILDNUM bumped to 1513

2021-04-08  Andras Varga

	* cVisitor: use retval=false in visit(cObject *obj) instead of
	EndTraversalException to stop iterating.

	- visit(cObject *obj) changed from void to bool
	- EndTraversalException removed
	- existing visitor classes and forEachChild() methods updated accordingly

2021-02-05  Levente Meszaros

	* cIEventlogManager: changes to support the new .elog file format.

	- stopRecording() renamed to resume(), stopRecording() to suspend()
	- added endRun(), which currently cannot be done from simulation
	  lifecycle listener (it doesn't send enough details)

2021-03-27  Andras Varga

	* cModule: added display name support (setDisplayName()/getDisplayName())

2021-03-23  Andras Varga

	* cObjectParImpl: Resolve "undisposed object" when checkType() throws.

2021-03-23  Andras Varga

	* cPar objectValue() documentation refined.

2021-03-23  Andras Varga

	* cValueArray()/cValueMap: Fix copy ctor. The name field was not copied.

2021-03-22  Andras Varga

	* OMNETPP_BUILDNUM bumped to 1512.

2021-02-05  Levente Mészáros

	* Added ftruncate() defines for all platforms in platmisc.

2021-02-12  Andras Varga

	* cPar: notify (call handleParameterChange()) during initialize() as
	well. handleParameter(nullptr) at the end of the initialization
	was removed.

	CAUTION: In model code, handleParameterChange() needs to be implemented
	carefully, being aware that the module may not have completed initialization
	yet. Also: if an existing model relied on handleParameter(nullptr) being
	called, it needs to be changed.

2021-02-19  Andras Varga

	* cValue: prevent doubleValue() to be called on a value with unit --
	too error-prone. Illustration:

	cValue(10s)->doubleValue() --> 10
	cValue(10us)->doubleValue() --> 10
	cValue(10h)->doubleValue() --> 10

	Solution: doubleValue() to throw exception when called on a value with
	unit. In the value has a unit, call either doubleValueInUnit(), or
	doubleValueRaw()+getUnit().

	Same for intValue().

2021-03-04  Andras Varga

	* cSoftOwner: remove get/setPerformFinalGC(). It was meant for internal
	use, and pretty much unused by model code.

2021-03-04  Andras Varga

	* cValue: Added clarification about object ownership.

2021-03-03  Andras Varga

	* Cast-related error messages: E_BADASSIGN, merged E_ECANTCAST into E_BADCAST.

2021-01-29  Andras Varga

	* cHasher: fix add(const std::string&) to be consistent with add(const
	char *)

2020-12-02  Rudolf Hornig

	* Added some missing 	- macros for proper exporting/visibility of symbols.

2020-12-15  Andras Varga

	* cSimulation::loadNedSourceFolder(): Accept exclusions in the form of
	packages instead of folders.

2020-12-09  Andras Varga

	* cObject: Added getClassAndFullPath() and getClassAndFullName() methods

2020-12-09  Andras Varga

	* cComponent: Introduced callPreDelete() for invoking preDelete(). Reason:
	  - consistent with initialize(), finish(), refreshDisplay()
	  - allows for introducing multi-stage preDelete() if the need ever arises
	  - also added switching the context to the module for the duration of
	    the preDelete() call

2020-12-02  Andras Varga

	* Renames related to the automatic ownership mechanism:
	  - cDefaultOwner -> cSoftOwner
	  - defaultOwner -> owningContext
	  - cOwnedObject methods: setDefaultOwner() -> setOwningContext(),
	    getDefaultOwner() -> getOwningContext()
	  - defaultList (global variable) -> globalOwningContext
	  - cSoftOwner methods: defaultListSize() -> getNumOwnedObjects(),
	    defaultListGet() -> getOwnedObject()
	  - cSoftOwner::defaultListContains() removed (no known usages)

2020-11-26  Attila Torok

	* Canvas: Added text alignment support. Added cFigure::Alignment enum,
	and getAlignment()/setAlignment() to cAbstractTextFigure.

2020-11-29  Andras Varga

	* platdefs.h: Remove unnecessary STATIC_ASSERT() macro. Reason:
	static_assert(expr,msg) is C++11, only static_assert(expr) is C++17.
	We should just use the 1st variant.

2020-11-25  Andras Varga

	* cFigure::RGBA: added toAlpha() and a constructor taking Color.

2020-11-25  Andras Varga

	* cFigure inner classes: added missing copy constructors.

2020-11-13  Attila Torok

	* Modernizing: Use in-class member initializers wherever possible;
	use "=default" syntax for copy constructors where appropriate.
	Tool: clang-tidy plus manual editing where needed.

2020-11-12  Andras Varga

	* cHasher: Added operator<< for feeding values into the hasher.
	Advantages: calls can be chained (hasher << a << b << c);
	uniform syntax can be used for types that have an add() member
	in cHasher and for those that don't.

2020-11-11  Andras Varga

	* cFigure: Merged hashGeometry() and hashGeometryRec(), and renamed
	it hashTo().

2020-11-11  Andras Varga

	* cHasher: optimized merge32(), based on input from #846.

2020-10-10  Andras Varga

	* Removed support for USE_OMNETPP4x_FINGERPRINTS.

2020-09-10  Andras Varga

	* cComponent: added preDelete()

	It can help simplify network or module deletion in a complex simulation
	that involves model change listeners. Assume that a model change listener
	in a module contains code that involves accessing other modules
	(e.g. calling methods in them). Normally, when those other modules don't
	exist, the code would throw an exception to indicate the error.

	However, when the same listener is invoked due to module deletion, those
	collaborator modules may no longer exist (just having been deleted). This
	can result in a crash; but even when the nonexistence (disappearance) of
	those modules is properly detected, the code is not supposed to throw an
	exception -- which is different from its normal behavior. Writing code
	that handles such situations can be tricky.

	The preDelete() method can help here: if it is overridden to unsubscribe
	from the model change listener, the above complications can be avoided
	altogether.

2020-10-17  Andras Varga

	* Added opp_component_ptr<T>, which is a smart pointer to a cComponent.
	When the respective component is deleted, the pointer becomes nullptr.

2020-10-15  Andras Varga

	* Added back forceTransmissionFinishTime() as deprecated, for backward
	compatibility

2020-10-12  Andras Varga

	* send() should NOT use the transmissionId already on the packet, ever,
	to prevent accidental reuse. It must now be explicitly specified in
	SendOptions for the original packet and for updates, too.

2020-10-11  Andras Varga

	* Transmission updates API: origPacketId renamed to transmissionId

2020-09-27  Andras Varga

	* cDatarateChannel: Implemented mode=MULTI. Allows multiple concurrent
	transmissions, with consistency checking, isBusy(),
	getTransmissionFinishTime(), and channelBusy signal support.

2020-09-18  Andras Varga

	* cDatarateChannel: Allow multiple concurrent transmissions, without
	any checks/bookkeeping. Set mode=UNCHECKED for that.

2020-09-09  Andras Varga

	* cIOutputScalarManager: Recording methods changed to return a bool,
	indicating whether the value was actually recorded. This was done
	for consistency with cIOutputVectorManager's record method.

2020-08-12  Andras Varga

	* IdentityFilter: do not convert signal values to numeric

2020-08-28  Levente Mészáros

	* cObject: Added printOn() method, and changed stream output (<<)
	operators to delegate to that. The new operator<< is template-based
	which makes it applicable to all subclasses of cObject, and both
	references and pointers. The old operator<< for cOwnedObject was
	removed. Output can be customized per-class by overriding printOn();
	the default version prints "(className)fullName" followed by the
	string returned by str().

2020-08-27  Andras Varga

	* cIListener destructor to unsubscribe from all places, instead of insisting
	on being already unsubscribed.

2020-08-13  Andras Varga

	* cMessage: Allow isMessage() etc to be called from subclasses (changed
	from private to protected).

2020-08-10  Andras Varga

	* Added DemuxFilter, a result filter that demultiplexes its input to
	several outputs. The selector (a.ka. demux label) is the name string
	of the details object emitted with the value, details->getFullName().

	Needed changes:
	- cResultListener: clone() method added
	- Register_ResultRecorder() implementation changed to allow creating
	  filters/recorders with createOne(); this is needed by clone()
	- cResultFilter: init() to store component and attrsProperty, because clone()
	  needs them
	- cResultListener: receiveSignal() methods need to be public so that
	  DemuxFilter can call them.
	- cResultRecorder: added setDemuxLabel(), needed as part of result names

2020-07-21  Andras Varga

	* cSimpleModule: Added rescheduleAt() and rescheduleAfter().

	Note 1: cancelEvent() is quite tolerant (it doesn't complain if event is
	NOT scheduled), and since rescheduleAt()/rescheduleAfter() are primarily
	utility methods, they inherit this behavior.

	Note 2: It is possible to implement rescheduling methods more efficiently
	than cancelEvent+scheduleAt. This is not yet done in this patch.

2020-07-20  Andras Varga

	* cSimpleModule: added scheduleAfter().

2020-07-20  Andras Varga

	* Process ordinary events via cMessage::execute(), and cMessage::execute()
	delegates everything to a newly created cSimpleModule::doMessageEvent() method.
	Also, cMessage::execute() made protected, to make it accessible from
	subclasses.

2020-06-23  Andras Varga

	* send()/sendDirect: introduced SendOptions and tx updates; cChannel
	API and cDatarateChannel changes

	Note: Substantial changes in this patch are concentrated in cSimpleModule
	and cDatarateChannel, with necessary extra fields added to cPacket. The
	rest are to follow signature changes in cEnvir and cChannel API methods,
	and to record the extra fields in eventlog files.

	Updating a transmission (aka tx updates):

	Initial send() is interpreted as: "packet transmission begins now, packet
	content and duration are, as things are now, going to be this".

	Following that, an "update" (or any number of updates) can be sent. It is
	a packet with the updated ("actual") content, and with a
	"remaining transmission duration" attached. Updates may only be sent
	while transmission is still ongoing (t < txEndTime; note it is strictly
	less, not less-or-equal!)

	As an example, aborting a transmission is done by sending a packet with a
	truncated content and a remaining duration of zero.

	The transmission it modifies (in case there are parallel transmissions on
	the channel) is identified by the packet ID of the original transmission.
	Channels should understand updates and handle them accordingly. (Change
	to cDatarateChannel is part of this patch.)

	Receivers that receive the packet at the end of the reception (default)
	will only receive the final update, the original packet and intermediate
	updates are absorbed by the simulation kernel.

	Receivers that receive the packet at the start of the reception (see
	cGate::setDeliverImmediately(), ex setDeliverOnReceptionStart()) should
	be prepared to receive all of the original packet and the updates, and
	handle them appropriately. Tx updates can be recognized from
	cPacket::isUpdate() returning true. cPacket::getRemainingDuration()
	returns the remaining transmission duration, and cPacket::getDuration()
	the total transmission duration.

	As a safeguard against unprepared modules accidentally processing tx
	updates as normal full-blown packets, the module is only given tx updates
	if it explicitly declares that it is able to handle them properly. The
	latter is done by the module calling setTxUpdateSupport(true) e.g. in
	initialize().

	Non-transmission channels don't handle updates any different from other
	messages and packets.

	SendOptions was introduced as a means to handle combinatorial explosion
	of send() variants.

	More changes:
	- send() and sendDirect() now accept a SendOptions; sendDelayed() and
	  the sendDirect() variant with delay and duration now convert their
	  extra args to a SendOptions, and delegate to the "standard"
	  send()/sendDirect() versions.

	- cDatarateChannel: allow overriding the duration computed from the
	  channel datarate from the send() call.

	- cDatarateChannel: non-packet messages pass through without
	  interfering with packets.

	- cDatarateChannel: disabled channels to let transmission updates
	  through, so that it is possible for the transmitter module to abort the
	  ongoing packet transmission.

	- Note: tx updates (without duration/remainingDuration) are allowed
	  on paths without transmission channels.

	- signature change in methods that participate in the send()/sendDirect()
	  protocol: SendOptions was added to the arg list. This affects:
	  cGate::deliver(), cModule::arrived(), cChannel::processMessage()

	- in cChannel::processMessage(), result_t was renamed cChannel::Result,
	  and it is now a proper return value (not an output parameter);

	- remainingDuration was added to cChannel::Result.

	- cDatarateChannel's datarate is now optional: set it to 0 or nan
	  to leave it unspecified.  This change was necessary to support
	  transmitting frames with per-frame data rate selection.

	- Removed forceTransmissionFinishTime() from cChannel (and esp.
	  cDatarateChannel). It was a hack. Now you can use SendOptions::updateTx()
	  instead.

	- Rename: setDeliverOnReceptionStart() -> setDeliverImmediately()

	- Added cSimpleModule::supportsTxUpdates() flag

	- cPacket now carries a remainingDuration field

	- cPacket: eliminated FL_ISRECEPTIONSTART; isReceptionStart() now uses
	  remainingDuration as input; added a similar isReceptionEnd() method.

	- cPacket::str() overhaul to reflect new fields and uses

	- in the APIs, sendDelay and propagationDelay (which were sort of
	  combined into a single value) are now distinct, and handled
	  separately.

	- eventlog format changes: BeginSendEntry: added sendDelay and
	  origPacketId; SendHopEntry, SendDirectEntry: added remainingDuration

	- cSimpleModule: factored out a throwNotOwnerOfMessage() method to
	  eliminate a large chunk of nearly identical code in send() and
	  sendDirect().

	- cEnvir callbacks also changed: beginSend() takes SendOptions;
	  messageSendHop() and messageSendDirect() take cChannel::Result
	  instead of separate args.

	Note: cChannel::Result became a toplevel class (ChannelResult) due to the
	need to break circular dependency: "cenvir.h" cannot include
	"cchannel.h" (circularity) and C++ does not allow inner classes to be
	forward-declared (why??).

2020-07-17  Andras Varga

	* cModule, cSimulation: getModuleByPath() made stricter (do not tolerate
	if module doesn't exist); added findModuleByPath().

	getModuleByPath() now won't return a nullptr (not even for empty strings),
	but throw an exception instead if no module was found.
	This change was made to make it consistent with other parts of the
	sim. kernel: "find" methods return nullptr if not found, and their
	"get" counterparts throw error for the same. Benefit: nullptr check
	can be omitted in the code after "get" calls.

2020-07-14  Andras Varga

	* cComponent: store per-component cSimulation pointers, instead of
	relying on getActiveSimulation().

2020-04-28  Andras Varga

	* cModule: allow modules to be deleted (incl self-deletion) and
	created at will during initialization.

2020-06-23  Andras Varga

	* cChannel: added isDisabled(); cEvent: added isPacket()

2020-06-08  Andras Varga

	* cParsimCommunications: init() method signature change (now it takes
	numPartitions).

2020-06-10  Andras Varga

	* cConfiguration: Added getConfigValue()/getPerObjectConfigValue()
	overloads that take cConfigOption*.

2020-06-10  Andras Varga

	* simkerneldefs.h: remove obsolete PI define [reported by Christoph
	Sommer]. Use M_PI instead.

2020-05-26  Andras Varga

	* simkerneldefs.h: added missing "namespace omnetpp" around eventnumber_t,
	intval_t, uintval_t

2020-05-21  Andras Varga

	* platdefs.h: added STATIC_ASSERT(). Compiles to no-op if compiler doesn't
	support it.

2020-04-20  Rudolf Hornig

	* platdefs.h: Require at least C++14 for OMNeT++.

2020-03-31  Attila Torok

	* Modernization, related to C++14 now being required:

	- platdefs.h: Remove some antiquated compiler compatibility checks/macros.
	  The compilers these are supposed to be for (or rather, "against"), likely
	  won't even pass ./configure because of the required C++14 standard.

	- Replace uses of _OPPDEPRECATED with [[deprecated]]. Except on enum
	  values where it's not supported by C++14 so we have use a new
	  OPP_DEPRECATED_ENUMERATOR() macro.

2020-03-17  Andras Varga

	* cConfiguration: Added CFGVAR_DATETIMEF that holds the name of the
	new "${datetimef}" variable (see envir/ChangeLog).

2020-03-15  Andras Varga

	* cConfiguration: Removed getParameterKeyValuePairs(). Instead,
	getKeyValuePairs() made smarter with an extra flags parameter
	to be able to handle the various use cases.

2020-03-05  Andras Varga

	* cConfiguration: added CFGVAR_ITERATIONVARSD that holds the name of the
	new "${iterationvarsd}" variable (see envir/ChangeLog).

2019-11-19  Andras Varga

	* Added cParImpl::setExpectedType() internal method.

2019-11-20  Andras Varga

	* cParImpl: Deleted useless pack/unpack methods.

2019-11-18  Andras Varga

	* cValue: Added internal method for use by class descriptor.

2019-11-14  Andras Varga

	* cValueMap: Added internal method for use by class descriptor.

2019-10-31  Andras Varga

	* cObject class documentation rewritten; getDescriptor() made public API

2019-10-28  Andras Varga

	* Added cValueArray and cValueObject classes, to be used with JSON-style
	parameter values.

2019-10-24  Andras Varga

	* cPar: add OBJECT as parameter type. New constant: cPar::Type::OBJECT.
	New methods: setObjectValue(), objectValue(), operator=(cObject*),
	operator cObject*.

2019-11-04  Andras Varga

	* cClassDescriptor: Use exception instead of returning false for
	indicating error. The return type of the following method changed
	from void to bool: setFieldValueAsString(), setFieldArraySize(),
	setFieldStructValuePointer().

2019-11-02  Andras Varga

	* cDefaultList renamed to cDefaultOwner.

2019-11-02  Andras Varga

	* takeAllObjectsFrom() moved from cDefaultList to cObject.

2019-10-30  Andras Varga

	* isSoftOwner() moved from cOwnedObject to cObject.

2019-10-26  Andras Varga

	* cClassDescriptor: Added support for setting pointer members and array
	sizes via class descriptors. New methods: setFieldArraySize(),
	setFieldStructValuePointer().

	* sim_std.msg: Added @resizable(false) where needed.

2019-10-29  Andras Varga

	* cPolyline, cPolygon: Added setNumPoints(), primarily for sim_std.msg.

2019-10-23  Andras Varga

	* cNedValue renamed to cValue (compatibility typedef added).
	Reason: it is used as generic value by cExpression, i.e. isn't specific
	to NED.

2019-10-21  Andras Varga

	* Allow xmldoc() (and possibly other functions taking filename as input)
	interpret the file name as relative to the dir the expression comes from.

	That is, when xmldoc() occurs in an included ini file, the file name is
	now interpreted as relative to the directory containing the included ini
	file (as opposed to being relative to the main ini file or the working
	directory.)

	If xmldoc() occurs in a NED file, the file name is relative to the
	directory where that NED file was loaded from.

	In addition to updating the implementation of xmldoc(), it had to be
	ensured that the function gets access to the directory where the ini
	entry or NED expression occurred (baseDirectory). This directory was
	added to the evaluation context (cExpression::Context).

	cNedFunction (and thus, Define_NED_Function()) was updated to accept an
	alternative function signature which accepts cExpression::Context instead
	of cComponent* as context argument.

	Details:
	- cComponentType: added getSourceFileDirectory()
	- cExpression::Context: added baseDirectory
	- added NedFunctionExt, which takes cExpression::Context *context instead of Component *context
	- cNedFunction to accept NedFunctionExt as alternative to NedFunction
	- cPar::parse(): added optional baseDirectory argument
	- Define_NED_Function() accepts NedFunctionExt too

2019-10-22  Andras Varga

	* cNamedObject: rename internal stringpool to more specific name

2019-08-01  Attila Torok

	* ccanvas.h: Initialize class members 	- using an
	assignment instead of in the constructor.

2019-08-31  Andras Varga

	* cFigure::Point: Added getAngle().

2019-08-05  Andras Varga

	* Added back cNedValue::XML as deprecated name.

2019-08-01  Andras Varga

	* Change listeners to use intval_t and uintval_t instead of long and
	unsigned long. This change was necessary because long is only 32-bit
	wide on Windows. This affects methods of cListener and subclasses like
	cResultFilter/cResultRecorder.

	Related changes:
	- SIMSIGNAL_[U]LONG -> SIMSIGNAL_[U]INT
	- cITimestampedValue changed accordingly (e.g. longValue()->intValue())
	- removed WITH_OMNETPP4x_LISTENER_SUPPORT

2019-08-01  Andras Varga

	* Added uintval_t.

2019-08-01  Andras Varga

	* intpar_t renamed to intval_t. Affects cPar, cNedValue, cExpression, etc.

2019-07-29  Andras Varga

	* cHistogram methods getBinEdges(), getBinValues() added to base class
	cAbstractHistogram.

2019-07-26  Andras Varga

	* Added cPostModuleBuildNotification.

	Reason: cPostModuleAddNotification was not sufficient, because it is
	fired from the cModuleType::create() method where the module was still
	very incomplete, and there are few meaningful ways to interact with it.

2019-07-26  Andras Varga

	* Added cPostComponentInitializeNotification

2019-07-17  Andras Varga

	* Added cFingerprint::addVisuals(), and two new fingerprint ingredients:
	- y: display strings of all modules, added on refreshDisplay() calls
	- f: essential properties (geometry) of all figures on all module
	  canvases, added on refreshDisplay() calls

	See cmdenv-fake-gui config option for context.

2019-07-13  Andras Varga

	* Added cFigure::hashGeometry().

2019-07-18  Andras Varga

	* Added cEnvir::recordComponentType().

2018-07-09  Andras Varga

	* Added cEnvir::recordParameter().

2019-07-17  Andras Varga

	* cContextSwitcher and related classes/macros moved to their own header
	file ccontextswitcher.h

2019-07-17  Andras Varga

	* cContextSwitcher, cContextTypeSwitcher: micro-optimization.
	Inlining significantly speeds up debug builds, esp. with Cmdenv's
	FakeGUI.

2019-07-16  Andras Varga

	* Optimized cModule::ChannelIterator by letting cModule maintain a linked
	list of channels (cChannel), so that ChannelIterator doesn't have to search
	through the whole compound module to find them.

	ChannelIterator is used e.g. in initialize() and refreshDisplay(). This
	change significantly speeds up Cmdenv's FakeGUI mode.

	* cModule::ChannelIterator: added postfix ++ and -- operators.

2019-07-15  Andras Varga

	* cMultiFingerprintCalculator: Use C++11-style "for" loops.

2019-07-11  Andras Varga

	* Added cSimulation::callRefreshDisplay().

2019-07-08  Andras Varga

	* cDynamicExpression: added support for variables, members, methods
	and extra functions. New inner classes: IResolver, ResolverBase,
	SymbolTable; added parse() overloads that take an IResolver or
	a symbol table.

2019-07-09  Andras Varga

	* cNedValue: replace 'XML' type with 'OBJECT'.

2019-07-02  Attila Torok

	* Added cEnvir::getConnectionLine().

2019-03-11  Andras Varga

	* Ported cDynamicExpression to the new Expression class. Removed its inner
	classes Elem, Functor, and enum OpType; removed setExpression(); added
	a NED-specific parse() method [renamed to parseNedExpr() in a later commit].

2019-04-05  Andras Varga

	* cResultFilter: Added hasDelegate().

2019-04-05  Andras Varga

	* cComponent: Disallow emitting nullptr in the const char * overload
	of emit(). The reason is that nullptr cannot be represented in
	std::string, which causes problems e.g. in result filters/recorders.

2019-04-11  Andras Varga

	* cExpression, cDynamicExpression, cParImpl: Remove
	containsConstSubexpressions() and evaluateConstSubexpressions() methods.
	They were supposed to be used in the "constant subexpressions" NED feature
	which was never implemented.

2019-03-21  Andras Varga

	* cSimulation: Added exclusionPath parameter to loadNedSourceFolder().

2019-03-20  Andras Varga

	* Remove remaining mentions of Tkenv from Doxygen comments.

2019-03-20  Andras Varga

	* cModuleType/cChannelType: protected methods changed to be internal:
	createModuleObject(), addParametersAndGatesTo(), setupGateVectors(),
	buildInside(), instantiateModuleClass().

2019-02-22  Andras Varga

	* Support for embedding NED files: Added embeddedNedFiles global variable.

2017-04-24  Andras Varga

	* cMatchExpression: Updated documentation to reflect that it now accepts
	the 'field=~pattern' syntax too, as alternative to 'field(pattern)'.

2019-02-07  Andras Varga

	* cQueue: Revert removal of deprecated methods empty() and length().
	These methods are used quite a lot in older models, and leaving them in
	somewhat eases getting them compiled with new OMNeT++ versions.

2019-01-27  Andras Varga

	* cSimpleModule: Removed deprecated legacy constructor.

2018-06-29  Andras Varga

	* Removed cAbstractHistogram (ex-cDensityEstBase) deprecated methods
	isTransformed(), transform(), getNumCells(), getBasepoint(), getCellValue(),
	getCellPDF(), getUnderflowCell(), getOverflowCell(), getCellInfo().
	Replacements: binsAlreadySetUp(), setUpBins(), getNumBins(), getBinEdge(),
	getBinValue(), getBinPDF(), getNumUnderflows(), getNumUnderflows(),
	getBinInfo().

	* Removed cFigure/cCanvas deprecated methods: addFigureAbove(),
	addFigureBelow(). Replacements: insertBelow(), insertAbove().

	* Removed cStatistic deprecated methods getWeights(),collect2(), random(),
	clearResult(). Replacements: getSumWeights(), collectWeighted(), draw(),
	clear().

	* Removed cPar/cNedValue deprecated method longValue(), use intValue() instead.

	* Removed cObject deprecated method info(), detailedInfo(), use str() instead.

	* Removed cModule deprecated method size(), use getVectorSize() instead.

	* Removed cQueue deprecated methods length(), empty() [they will be added back]

	* Removed deprecated operator() of iterator classes in cArray, cModule,
	cQueue. Use operator* instead.

	* Remove cHistogram deprecated methods setRangeAuto(), setRangeAutoLower(),
	setRangeAutoUpper(), setNumCells(), setCellSize(). Replacements:
	setNumPrecollectedValues()+setRangeExtensionFactor()+setRange(),
	setNumBins(), setBinSize().

	* Removed deprecated cDensityEstBase class. Replacement: cAbstractHistogram.

	* Removed deprecated cWeightedStdDev class. Use cStddev in weighted mode instead.

	* Removed deprecated timeval_*() functions: timeval_usec(), to_timeval(),
	timeval_add(), timeval_addto(), etc. Use opp_get_monotonic_clock_usecs() or
	opp_get_monotonic_clock_nsecs() instead, and perform arithmetic in int64_t.

	* Removed obsolete histogram classes: cVarHistogram, cLegacyHistogram,
	cLongHistogram, cDoubleHistogram. Use cHistogram with the appropriate
	histogram strategy instead.

2020-01-06  ------ omnetpp-5.6 released ------

2019-11-21  Attila Torok

	* Modernize the implementation of noncopyable

2019-12-03  Attila Torok

	* Added cLabelFigure::angle.

2019-12-21  Andras Varga

	* SimTime: fix typo in comment of inUnit() (bug #787)

2019-12-14  Andras Varga

	* SimTime: added the fromRaw() method.

2019-12-10  Andras Varga

	* cGate: added the isGateHalf() and getOtherHalf() methods.

2019-09-09  Attila Torok

	* cEnvir: beginSend() documentation updated: at least one messageSendDirect()
	or messageSendHop() is required before endSend().

2018-06-11  Andras Varga

	* deleteModule() method moved from cSimpleModule to cModule.

	* deleteModule() functionality extended: it is now allowed for a
	running module to delete itself, also as part of a module tree.

	* Clarify in method comments that directly deleting a module or channel
	object (via the "delete" operator) is not allowed.

2019-05-15  ------ omnetpp-5.5 released ------

2019-04-25  Andras Varga

	* cXMLElement: optimize for memory usage to allow loading large XML files.

2019-03-20  Andras Varga

	* Fix: @statistic signal checking used the wrong isSimple() method

2019-03-13  Andras Varga

	* Added new result recorders/filters: totalCount, errorNan, nanCount
	* Fixed RemoveRepeatsFilter (repeated NaNs were not filtered out)

2019-02-27  Andras Varga

	* Added user-accessible descriptions for result filter/recorder types.
	New registration macros were introduced to allow specifying documentation:
	Register_ResultFilter2(), Register_ResultRecorder2()

	* Fix: prevent initial NaNs coming from filters expressions like
	count(foo)+count(bar). Solution: count(),sum(),etc. and are now able to
	provide the initial value via getInitialDoubleValue()

2019-03-12  Andras Varga

	* cQueue: added possibility to use comparator object (not just function)
	* cQueue: move CompareFunc inside cQueue

2019-02-07  Andras Varga

	* Added TimeFilter, a result filter that replaces the value with its
	timestamp.

	* Added preciseDiv(int64_t, SimTime)

	* Added intuniformexcl() as NED function, global function, as cComponent
	method, as object (cIntUniformExcl)

2019-01-27  Andras Varga

	* cModule: added containsModule()
	* cSimpleModule: remove deprecated legacy constructor

2019-01-22  Attila Torok

	* Add infinity counting to cAbstractHistogram and subclasses.
	* fix: cKSplit, cPSquare: added missing clear() implementation

2019-01-16  Attila Torok

	* Remove old and unused (internal) plotline function from cPrecollDensityEst.
	* Added cAbstractHistogram::dup() override. Just so the return type is correct.

2018-12-03  Andras Varga

	include: envirext.h: use noncopyable

2018-06-28  Andras Varga

	resultfilters.h and resultrecorders.h made public

2018-09-19  Attila Torok

	#define NOGDI as well before #include <windows.h> to further reduce bloat
	Original reason: Name conflict with PC_NONE, see 7b3042a

2018-06-25  ------ omnetpp-5.4.1 released ------

2018-06-18  Rudolf Hornig

	* Replaced <stdint.h> with <cstdint>, as we now require C++11

2018-06-11  ------ omnetpp-5.4 released ------

2018-06-08  Attila Torok

	* cEnvir: attachDebugger() replaced by ensureDebugger(), with slightly
	different semantics; removed attachDebuggerOnErrors flag.

2018-06-07  Andras Varga

	* SimTime: added ustr()

2018-06-05  Andras Varga

	* cNedValue: convertToDouble() made public

2018-05-31  Andras Varga

	* cDynamicExpression::Elem: added lots of getter methods

2018-05-28  Andras Varga

	* cExpression: boolValue() etc methods made const

2018-05-17  Andras Varga

	* cDynamicExpression: allow extra information to be passed for
	evaluation: cComponent* arg replaced with Context*. Compatibility
	methods exist.

2018-05-18  Andras Varga

	* Renamed namespace NedSupport to all-lowercase

2018-04-11  ------ omnetpp-5.3 released ------

2018-03-01  Attila Torok

	* c[Global]RegistrationList: Add begin() and end() methods for easier
	iteration.

2018-01-29  Andras Varga

	* cMessagePrinter: API was extended with tags and column names

2018-03-07  Andras Varga

	* cCanvas: added getAnimationSpeed(); better documentation for
	setAnimationSpeed() and holdSimulationFor()

2018-03-05  Andras Varga

	* cStatistic: fix return type of getCount() (long -> int64_t)

2018-03-01  Andras Varga

	* cHistogram: Do not keep numOverflows/numUnderflows for weighted statistics

2018-02-09  Rudolf Hornig

	* cNedValue: added convenience method with int signature

2018-01-31  Andras Varga

	* Make statistic recorders "findable" from Qtenv:

	- make cResultListener subclass from public cObject
	- cComponent: forEachChild() to recurse into listeners that are cObjects
	- StatisticsRecorder: forEachChild() to recurse into stored cStatistic
	- StatisticsRecorder: take ownership of cStatistic (it can, since it is
	  now cObject)
	- cResultRecorder: override getName() and getFullPath()

2018-01-29  Andras Varga

	* cKSplit: Support weighted case. Note: the split threshold is now
	scaled with the average weight.

2018-01-27  Andras Varga

	* draw() method implementation moved from cHistogram to cAbstractHistogram,
	so that cPSquare and cKSplit can use it too.

2018-01-26  Andras Varga

	* Renamed cDensityEstBase to cAbstractHistogram. (Compatibility typedef added.)

2018-01-25  Andras Varga

	* cPSquare: fix: force strictly increasing bin edges

2018-01-21  Andras Varga

	* cObject: default parsimPack/parsimUnpack implementations to throw
	E_CANTPACK exception

2018-01-24  Andras Varga

	* Renamed several methods in cStatistic and subclasses:

	- cHistogram::HistogramMode -> cHistogram::Mode
	- getWeights() -> getSumWeights()
	- collect2() ->	collectWeighted()
	- transform() -> setUpBins()
	- isTransformed() -> binsAlreadySetUp()
	- clearResult() -> clear()
	- getNumCells() -> getNumBins()
	- getBasepoint(k) -> getBinEdge(k)
	- getCellValue(k) -> getBinValue(k)
	- getCellInfo(k) -> getBinInfo(k)
	- getCellPDF(k) -> getBinPDF(k)
	- getUnderflowCell() -> getNumUnderflows()
	- getOverflowCell() -> getNumOverflows()

	Old names are still available as deprecated methods.

2018-01-22  Andras Varga, Attila Torok

	* Added new cHistogram, and cHistogramStrategy classes.

	Motivation: There were too many histogram classes that really only
	differred in the way histogram bins are stored and set up initially:
	cHistogram, cLongHistogram, cDoubleHistogram, cVarHistogram.

	It is better to use composition instead of inheritance, and express bin
	layouting as a histogram setup strategy into separate (polymorphic)
	class.

	To simplify code, merge all histogram classes (cHistogramBase,
	cHistogram, cVarHistogram, cLongHistogram, cDoubleHistogram) into one,
	cHistogram, which explicitly stores the bin breaks as a double array.

	The only difference between them is the setup policy, which can be
	factored out to separate class. cVarhistogram can now be just another
	setup policy. The precollectedValues array also becomes internal matter
	of respective setup polici(es).

2018-01-18  Andras Varga

	* Refactoring: precollection factored out of cDensityEstBase into a
	separate cPrecollectionBasedDensityEst base class.

2018-01-15  Andras Varga

	* Existing cHistogram class renamed to cLegacyHistogram, to make room
	for new implementation while retaining old class for users who rely
	on its exact behavior.

2017-07-19  Andras Varga

	* Removed transient detection and result accuracy detection classes

2017-02-10  Andras Varga

	* cMessage: remove experimental "tags" API

2018-01-09  Andras Varga

	* cDynamicExpression: added support to perform computations in integers:

	- Integers are represented as intpar_t.
	- Integers with units are now possible. When adding integer quantities
	  with different units, care is taken so that the result can be
	  represented in integer without precision loss. E.g. 1km-1m results
	  in 999m (and not 0.999km or 0km).
	- Arithmetic operations (+,-,*,%,^): if both arguments are integers,
	  computation is performed using integer arithmetic and result is integer;
	  if one is integer and the other is double, the integer one is promoted
	  to double.
	- Division: always performed in double and the result is also double.
	- Shift operators (<<,>>): requires integer arguments. Arbitrary integers
	  are accepted as 2nd argument; negative values cause shifting in the
	  opposite direction.
	- Exponentiation (^): if both arguments are integers, it performs
	  precise computation using integer multiplications, and negative
	  exponent causes an error.
	- Integer overflows are reported as errors.
	- There is no implicit conversion from double to integer, as it incurs
	  precision loss. Use the int() operator to cast.
	- Conversion from integer to double is implicit, as long as the double
	  can represent the integer precisely (practically for <= 52-bit
	  integers). If the implicit conversion would cause precision loss,
	  it is reported as an error. Use the double() operator to ignore the
	  precision loss.

	* NED functions (Register_NED_Function()): Added support for integers
	with measurement unit: use "intquantity" as type in the function
	signature.

2017-12-14  Andras Varga

	* cNedValue: added INT type

2018-01-04  Andras Varga

	* cPar/cParImpl: INT-related refinements

2017-12-15  Attila Torok

	* cEnvir: Add getZoomLevel(). Access to the zoom level in the GUI
	sometimes allows better visualization.

2017-01-16  Andras Varga

	* cRealTimeScheduler: use opp_get_monotonic_clock_usecs() and int64_t
	instead of gettimeofday() and timeval.

2017-11-26  Andras Varga

	* Renamed cNEDValue, cNEDFunction, NEDFunction, cNEDMathFunction
	to cNedValue, cNedFunction, NedFunction, cNedMathFunction (NED->Ned).
	Old names can still be used via compatibility typedefs.

2017-10-19  Zoltan Bojthe

	* cMessage: setControlInfo() made virtual

2017-12-14  Andras Varga

	* cNEDValue: similar changes as to cPar: use intpar_t instead of long;
	renamed longValue() to intValue() and setLongValue() to setIntValue();
	renamed enum values (DBL->DOUBLE, STR->STRING); added overflow check to
	integer cast operators; added conversions for the long long and unsigned
	long long types as well.

2017-12-12  Andras Varga

	* cPar: renamed longValue() to intValue(), setLongValue() to setIntValue(),
	cLongParImpl to cIntParImpl, and LONG (enum value in cPar) to INT.
	Similarly named methods in cExpression, cParImpl were renamed too. The old
	names can still be used but cause deprecation warnings.

	Motivation: To be consistent with NED that calls such parameter type "int".
	There is no reason to keep the name "long" any longer (sic), because the
	underlying C++ data type is no longer "long" but "intpar_t".

	* cPar: Integer cast operators (operator int(), operator unsigned int(),
	operator short(), etc.) now check for overflow. That is, if the value
	doesn't fit into the target integer type, a runtime error will be raised.
	Until now, such data losses were ignored.

	BEST PRACTICE: For the above reason, cast operators should now be
	preferred over .intValue()/.longValue():

	  int numBytes = par("numBytes").longValue(); // UNSAFE: implicit cast, see below
	  int numBytes = par("numBytes"); // SAFE: operator int() raises error when value overflows

	In the first example when .longValue() is used, the compiler emits an
	unchecked cast from intpar_t to int, so overflows go undetected. In the
	second case, the compiler will generate a call to cPar's operator int()
	which performs overflow check.

2017-12-12  Andras Varga

	* cPar: use intpar_t (currently an alias of int64_t) instead of long int
	to represent integers. The main motivation is that long is only 32 bits
	on some platforms (namely on Windows). cExpression, cDynamicExpression,
	and the cParImpl classes are affected too.

	* cPar: added conversion operators to/from the "long long" and
	"long long int" types so that 64-bit value can be accessed on Windows
	as well. (Note: intpar_t could not be added because it would conflict
	with "long" on most platforms.)

2017-12-13  Attila Torok

	* clog.h: eliminate tautological-compare warnings by Clang at every use.

2017-12-08  ------ omnetpp-5.2.1 released ------

2017-11-10  Andras Varga

	* cDynamicExpression: fixed leak in Elem::operator=() functions

2017-09-18  ------ omnetpp-5.2 released ------

2017-08-08  Andras Varga

	* cResultFilter: added an init() method to allow filters access the content
	of the @statistic property they occur in.

2017-07-15  Andras Varga

	* Histogram classes: added support for weighted statistics to histogram
	classes (cHistogramBase and subclasses: cHistogram, cVarHistogram,
	cLongHistogram, cDoubleHistogram).

	Details:
	- The data type of bin values were changed from int to double; they now
	  store sum of weights instead of observation counts. The unweighted case
	  is treated simply as a special case of weighted where all weights are 1.0.

	- New cDensityEstBase methods: getUnderflowSumWeights(), getOverflowSumWeights().
	  They return sum of weights for observations that are outside the histogram
	  range. Note: the slightly misnamed getUnderflowCell()/getOverflowCell()
	  methods that return overflow/underflow counts are still available.

2017-07-12  Andras Varga

	* cStddev: added support for weighted statistics. To make a weighted
	cStddev, pass weighted=true in the constructor. The weighted-ness of
	an cStddev instance cannot be changed afterwards. getMean() and
	getStddev() now return the weighted mean / stddev if the object is
	weighted.

	cWeightedStddev has been deprecated, as it is no longer needed. For now,
	it has been turned into a trivial subclass of cStddev that just
	initializes it with weighted=true.

	Incompatible change: sum and sum of squares of the values are no longer
	available when collectecting weighted statistics (getSum() and getSqrSum()
	throw an exception).

2017-07-15  Andras Varga

	* opp_string: op== was missing

2017-04-06  Andras Varga

	* Modernizing: use C++11's range-based for loops where applicable, using
	clang-tidy's modernize-loop-convert.

	* Modernizing: replace INT64_PRINTF_FORMAT and LL with C++11's PRId64.
	Note: PRId64 includes the "d" that was not part of INT64_PRINTF_FORMAT
	alias LL.

2017-07-13  Rudolf Hornig

	* Workaround for compiler bug: removed empty ctor from EndTraversalException,
	as it (strangely) caused such exceptions not to be caught properly when
	compiling with -O1 and greater optimization level with clang 4 on Windows.

2017-06-08  Attila Torok

	* cOsgCanvas: Changes necessary for allowing the OSG Viewer to be factored
	out from Qtenv into as separate support library, loaded on demand at runtime.
	The simulation kernel kernel (and cOsgCanvas) now does NOT depend on the
	OSG libraries: does not include OSG header files at all, and does not
	reference any symbols in the OSG libraries.

	Incompatible change: One must use the new cOsgCanvas::EarthViewpoint class
	instead of osgEarth::Viewpoint in models.

	Details:
	- cOsgCanvas now treats osg::Node* as opaque pointers. No attempt is made
	  to dereference it.
	- cOsgCanvas now performs osg::Node reference counting via cEnvir's new
	  refOsgNode()/unrefOsgNode() methods instead of Node's methods.
	- No WITH_OSG or WITH_OSGEARTH conditionals anywhere in omnetpp or qtenv.
	  The only difference with WITH_OSG is whether or not the support library
	  gets built. Consequences: the cOsgCanvas is always available;
	  cModule::getOsgCanvas() never throws "OSG not available" exception.

2017-05-10  Attila Torok

	* Figure classes: zIndex is now additive; added cFigure::getEffectiveZIndex().
	The effective zIndex is the sum of the zIndex values of the figure and
	all its ancestors up to the root figure. This provides more flexibility,
	as the figure tree is no longer constrained by stacking order.

2017-05-10  Attila Torok

	* Figure classes: Enabled and implemented cPanelFigure

2017-04-27  Attila Torok

	* Figure classes: fixes
	- added destructor to cPathFigure (leaked memory)
	- cFigure::Pixmap: functions weren't meant to be virtual
	- cFigure: tooltip was not initialized by ctor.

2017-05-08  ------ omnetpp-5.1.1 released ------

2017-03-31  ------ omnetpp-5.1 released ------

2017-03-04  Andras Varga

	* ASSERT() macros: error message edited for clarity

2017-03-08  Andras Varga

	* opp_string: added str() method

2017-03-14  Attila Torok

	* Remove a few unnecessary semicolons in macros.

2017-02-06  ------ omnetpp-5.1pre3 released ------

2017-02-01  Andras Varga

	* Fix #362: return type of send() and snapshot() methods changed to
	'void'

2017-02-01  Andras Varga

	* Fix #633, right-shift on negative numbers is undefined behavior in C/C++

	Simply use *2 instead of <<1. "Given that this is mostly calculated at
	compile time there is no runtime difference and even the runtime
	calculation would probably converted to a shift by the compiler."
	Also reverted earlier bogus commit that introduced nonsense FSM_EnterExit()
	macro.

2017-01-23  Andras Varga

	* Fix #984 error "#include <platdep/sockets.h> must precede
	<omnetpp.h> (and <platdep/timeutil.h> if present)" not possible in
	msg-files

	Solution: don't define timeval ourself, just pull in <winsock2.h>.

2017-01-16  Andras Varga

	* Added opp_get_monotonic_clock_usecs(). This should be used for
	measuring wall-clock intervals instead of gettimeofday() which is
	not monitonic.

2017-01-12  Andras Varga

	* Canvas: more doxygen comments

2017-01-02  Andras Varga

	* cFigure: official API for custom figures: parse(), getAllowedPropertyKeys()

2017-01-03  Andras Varga

	* Register_Figure() change: first arg now must be quoted

2017-01-02  Andras Varga

	* Canvas: added insertBelow() / insertAbove()

	* Canvas: insertChild() was redundant (nearly same as addFigure()), removed

2017-01-06  Attila Torok

	* Fix cChannel::forEachChild bug (wrong superclass).

2016-12-22  Andras Varga

	* OppErrorCode renamed to ErrorCode; fix related C++ undefined behaviour

2016-12-23  ------ omnetpp-5.1pre2 released ------

2016-12-06  Andras Varga

	* cIOutputVectorManager: clarify lifecycle in doxy comments

2016-11-18  Andras Varga, Attila Torok

	* cEnvir: added appendToImagePath(), loadImage(), getSubmoduleBounds()

2016-11-14  Andras Varga

	* cModule: added getBuiltinAnimationsAllowed(bool enabled) method

2016-11-14  Andras Varga

	* Figures: added Register_Figure(NAME, CLASSNAME) macro

2016-11-11  Andras Varga

	* cModule: getModuleByPath(): "<root>" now means the toplevel module.
	There was no syntax accessing the toplevel module, apart from spelling
	out its module name.

2016-11-05  Andras Varga

	* cDisplayString: clarify quoting/escaping in parse() method's comment

2016-10-27  Andras Varga

	* cEnvir: getImageSize()/getTextExtent(): use doubles for size

	Motivation:
	- handling of small font sizes (displayed zoomed)
	- SVG and other vector images don't necessarily have integer dimensions

2016-10-23  Andras Varga

	* cConfiguration: getter methods made const

2016-10-22  Andras Varga

	* cConfigOption: added public static find() and get() lookup methods

2016-10-19  Andras Varga

	* cEnvir interface changes:
	- askYesNo() no longer has a printf-style arg list
	- askyesno() (lower-case, protected version) removed
	- putsmsg() removed
	- alert() added as replacement for putsmsg()

2016-10-03  Andras Varga

	* cPacket: fix: getByteLength() to rely on getBitLength() instead
	of directly accessing private data member

2016-10-03  Andras Varga

	* cIEventlogManager: added getFileName() for consistency with other
	output file recorder classes

2016-08-08  Andras Varga

	* Initial API for custom animation:
	- cCanvas: setAnimationSpeed(), holdSimulationFor()
	- cEnvir: getAnimationTime(), getAnimationSpeed(),
	  getRemainingAnimationHoldTime()

2016-09-25  Andras Varga

	* cConfigurationEx: unrollConfig() signature change to allow it return
	more information: return type changed from std::vector<std::string> to
	std::vector<RunInfo>; also removed 'bool detailed' arg.

2016-09-22  Andras Varga

	* cConfigurationEx: added getKeyValuePairs()

2016-09-25  Andras Varga

	* cconfiguration.h: removed CFGVAR_ITERATIONVARS2, added CFGVAR_ITERATIONVARSF

2016-09-07  Zoltan Bojthe

	* SimTime: added SIMTIME_AS (= -18) to SimTimeUnit enum

2016-09-06  Andras Varga

	* Canvas: added parseBounds() overload for backward compatibility

2016-09-01  Andras Varga

	* Canvas: added setPosition(position, anchor) to arc, rectangle,
	oval, ring, and pieslice figures

2016-09-05  Rudolf Hornig

	* cOsgCanvas: understand WITH_OSGEARTH

2016-08-31  Andras Varga

	* Canvas: added support for self-refreshing figures. Figures
	must override a cFigure::refreshDisplay().

2016-08-26  Andras Varga

	* Canvas: documented figure methods for Doxygen

2016-08-26  Andras Varga

	* Canvas: API changes, mostly necessitated by the introduction of
	setZIndex() (as stacking order is no longer fully determined by
	the order of child figures).
	  - behavior change on raiseAbove()/lowerBelow()/raiseToTop()/lowerToBottom().
	    They need to deal with Z-index too.
	  - deprecated addFigureAbove() and addFigureBelow()
	  - added insertAfter()/insertBefore(), isAbove()/isBelow()
	  - added some const annotations
	  - some path item classes renamed (HorizLineTo/VertLineTo to
	    HorizontalLineTo/VerticalLineto)

2016-08-23  Andras Varga

	* cXMLElement now subclasses from cObject

2016-08-23  Andras Varga

	* cISimulationLifecycleListener: destructor removes the listener
	from cEnvir. (Has no effect is it was already deregistered.)

2016-08-23  Andras Varga

	* cComponentType: added getNedSource() method.

2016-08-23  Andras Varga

	* cPacket: getDisplayString() changed to fall back to the encapsulated
	packet's display string

2016-08-23  Andras Varga

	* cXMLElement: added str() and getXML() methods. debugDump() was removed
	(use EV << element->getXML() instead).

2016-08-23  Andras Varga

	* cObject and subclasses: detailedInfo() method removed.

	The few detailedInfo() method with useful functionality were:
	- cXMLElement's detailedInfo() returned quasi-XML
	- cChannelType etc returned NED source via detailedInfo()

	The following methods are added in their place: cXMLElement::getXML(),
	cComponentType::getNedSource().

2016-08-23  Andras Varga

	* cObject and subclasses: renamed info() to str().

	Reason: consistency, as many existing classes use str() (figure utility
	classes like rectangle, point, color; expression classes; etc.)

	Note: some existing str()'s such as cPar and cDynamicExpression have to
	produce formal (i.e. parseable) output

2016-08-10  Andras Varga

	* cSimulation: fix doxygen comment of takeNextEvent()

2016-08-05  Andras Varga

	* cAbstractTextFigure: added setHalo()

2016-08-05  Andras Varga

	* cFigure: added setZIndex(). In @figure, "zIndex" replaces "childZ"
	which was only used at parse time but not stored in figures afterwards.

2016-08-22  Andras Varga

	* Selection of coroutine library (USE_WIN32_FIBERS/USE_POSIX_COROUTINES/
	USE_PORTABLE_COROUTINES) moved to platdefs.h, and now can be overridden
	from the compiler command line (-D).

2016-08-10  Andras Varga

	* cFigure: added setTooltip() and setAssociatedObject()

	A canvas item's actual tooltip in Qtenv etc. will be determined as follows:
	   1. Use cFigure::getTooltip() if not empty, else:
	   2. Use tooltip of figure's associatedObject (e.g. associated module's
	      "tt" display string tag) if not empty, else:
	   3. Use associatedObject's default tooltip (name, class, info string)

2016-08-01  Andras Varga

	* cProperty: getValue(key,index) now has a default value for the key
	argument too.

	* cProperty: added updateWith() internal public method

	* cCanvas: parseFigure() abd createFigure() made public internal

2016-08-05  Andras Varga

	* cEvent: fix: insertOrder needs to be eventnumber_t to prevent
	overflow

2016-08-05  Andras Varga

	* cEvent: added shouldPrecede() public, and compareBySchedulingOrder()
	internal method.

2016-08-04  Andras Varga

	* cEventHeap: added setUseCb() internal method as a way to allow
	disabling the cb (FIFO for storing events scheduled for the current
	simulation time with priority 0)

2016-08-04  Andras Varga

	* cEventHeap: fix: events scheduled for current simulation time w/
	negative priority were handled incorrectly

2016-07-21  Andras Varga

	* cEnvir: added getImageSize() and getTextExtent() methods

	* cAbstractImage/cAbstractText: added getBounds() method

	* cImageFigure: added getImageNaturalWidth() / getImageNaturalHeight()

2016-07-25  Andras Varga

	* cEnvir: messageSendHop(): add "discard" parameter.

2016-07-25  Andras Varga

	* cResultListener, cResultFilter, cResultRecorder: visibility change
	(public -> protected) of inherited processing methods.

2016-07-25  Andras Varga

	* cResultListener: added getClassName() and str() methods.

	Rationale: it was not added to cIListener, because multiple inheritance
	with cObject (e.g. module classes that are also listeners) would cause
	compile errors in existing code due to method ambiguity.

2016-07-25  Andras Varga

	* cStaticFlag: isSet() method renamed to isMainRunning().

2016-07-22  Andras Varga

	* cComponent: internal struct SignalData renamed to SignalListenerList.

2016-07-22  Andras Varga

	* cComponent: mayHaveListeners() now has a constant cost but may return
	false positive, due to change implementation strategy. See sim/ChangeLog
	for details.

2016-07-19  Andras Varga

	* cComponent: added internal methods to allow inspecting listener
	lists

2016-07-12  Andras Varga

	* cClassDescriptor: added getFieldDynamicTypeString() that returns
	the dynamic type of an object.

2016-04-19  Andras Varga

	* cEnvir: removed messageSent_OBSOLETE(), a relic from OMNeT++ 3.x.

2016-04-19  Andras Varga

	* cModule: arrived() made public. Overriding arrived() makes it
	possible to do custom processing at the destination module of
	a send() call immediately, still within the send() call.

2016-07-13  Andras Varga

	* Renames: cResultRecorderDescriptor -> cResultRecorderType,
	cResultFilterDescriptor -> cResultFilterType

	Now that cResultFilter and cResultDescriptor will be in the sim_std.msg
	file, the original names collide with the message-compiler generated
	descriptor classes.

2016-07-14  Andras Varga

	* cModule::buildInside(): retval changed from int to void

2016-07-11  Andras Varga

	* Added cStatisticBuilder internal class, as part of the change where
	setting up statistics recording was moved from EnvirBase into the sim.
	kernel.

2016-07-06  Andras Varga

	* cComponentType: factored out getSignalDeclaration(), currently internal

2016-06-20  Andras Varga

	* SimTime: added format() method, currently as internal function

2016-04-13  ------ omnetpp-5.0 released ------

2016-04-01  Andras Varga

	* cOsgCanvas: initialize zNear/zFar to NaN. This will turn on automatic
	  zNear/zFar computation in the viewer.

	* cOsgCanvas: added methods setZLimits(), clearZLimits(), hasZLimits()

2016-03-13..30  Andras Varga

	* Documented several classes around cFigure/cCanvas and cOsgCanvas

	* Edited comments to improve the generated C++ documentation (doxygen)

	* Removed unused stlwrap.h

2016-03-23  Andras Varga

	* Fix: simtime_t was not part of the omnetpp namespace

2016-03-21  Andras Varga

	* cFigure: move(x,y) args renamed to (dx,dy)

2016-03-15  Andras Varga

	* cFigure: skew now uses a coefficient, not an angle

2016-03-22  Andras Varga

	* cKSplit: method rename: rangeExtension(bool) to setRangeExtension()

2016-03-21  Andras Varga

	* cEnvir::recordEventlog was not in use by simkernel, moved into
	EnvirBase

2016-03-21  Andras Varga

	* "#undef emit" no longer needed in simkerneldefs.h

2016-03-21  Andras Varga

	* cPar: read() and finalize() conceptually changed to be internal
	methods. They are still declared public for technical reasons
	(called from cComponent)

2016-03-21  Andras Varga

	* Remove Register_Enum()-related temporary workaround for INET-3.0
	compilation with OMNeT++ 5.0b2

2016-03-10  Andras Varga

	* cFingerprint renamed to cFingerprintCalculator
	* cSimulation methods also renamed accordingly (i.e. to get/set-
	FingerprintCalculator())

2016-03-10  Andras Varga

	* cModule::size() deprecated (use getVectorSize() instead)

2016-03-10  Andras Varga

	* Several methods made virtual in cComponent, cModule, cSimpleModule,
	cChannel, cArray, cQueue, cTopology, cStatistic, etc.

2016-03-10  ------ omnetpp-5.0rc released ------

2016-03-10  Levente Meszaros, Andras Varga

	* cFingerprint renamed to cFingerprintCalculator

 	* cModule: size() deprecated, use getVectorSize() instead

	* More methods made virtual in cSimpleModule and other classes

2016-03-07  Andras Varga

	* OSG refinements:
	  - OmnetppObjectNode renamed to cObjectOsgNode
	  - cOsgCanvas: removed createOmnetppObjectNode(), isOmnetppObjectNode(),
	    setOmnetppObject(), getOmnetppObject() methods; one should directly
	    use cObjectOsgNode instead
	  - osgutil.h is now part of omnetpp.h, doesn't need to be #included
	    separately

2016-02-26  Levente Meszaros & Andras Varga

	* Added cIEventlogManager, a new Envir plugin class that allows one
	to replace the built-in eventlog manager. Eventlog managers are
	responsible for recording simulation history into an eventlog file.

2016-02-24  Andras Varga

	* cConfigOption: Refined per-object config option kinds (added COMPONENT
	and CHANNEL).

2016-02-22  Rudolf Hornig

	* Fixed bugs #946 #947. Added missing omnetpp namespace to logging and
	registration macros. This change allows using these macros from C++ code
	that doesn't use the omnetpp namespace.

2016-02-16  Levente Meszaros

	Refined the logging API. Changes include:

	* Changed default compile-time release-mode log level to LOGLEVEL_DETAIL,
	  and debug-mode log level to LOGLEVEL_TRACE. The former keeps all details
	  understood by users, the latter keeps all debug information understood by
	  the developers. Changed default run-time cLog::logLevel to LOGLEVEL_TRACE.

	* Dropped source object class name from the list of supported log prefix
	  items, because getClassName() was slowing down the simulation even if it
	  was not used.

	* Renamed a few things in the logging API:
	  - OPP_LOG to EV_LOG
	  - GLOBAL_COMPILETIME_LOGLEVEL to COMPILETIME_LOGLEVEL
	  - camelCase consistency: loglevel to logLevel, and Loglevel to LogLevel
	  - cLogLevel to cLog
	  - cLogLevel::globalRuntimeLoglevel to cLog::logLevel
	  - cLogLevel::getLogLevel() to cLog::resolveLogLevel()
	  - cLogLevel::getName() to cLog::getLogLevelName()

	* Reversed LOGLEVEL_* enum members to make the values consistent with
	  semantics. Added LOGLEVEL_OFF that allows to completely disable logging.

	* Added new user customization points to the logging API.
	  - The COMPILETIME_LOG_PREDICATE allows changing the compile time
	    condition for compiling log statements into the executable.
	  - The cLog::noncomponentLogPredicate and cLog::componentLogPredicate
	    static global variables allow changing the run-time condition for
	    executing log statements.

2016-02-05  Andras Varga

	* cEnvir: Renamed getRNGMappingFor(component) to preconfigure(component)

2016-02-01  Andras Varga

	* cOsgCanvas: Removed redundant setPerspective() method (it was a union
	of two other setters)

2016-01-25  Andras Varga

	* cFigure API refinements:
	  - replaced getClassNameForRenderer() with getRendererClassName()
	  - spelling: ArrowHead changed to Arrowhead in method names, enum name, etc.
	  - move() made recursive, nonrecursive version is called moveLocal()
	  - Pixmap: renamed resize() to setSize()
	  - Transform: skew() methods to use coefficient instead of angle
	  - Transform: matrix was transposed so points can be column vectors
	    instead of row vectors
	  - added NUM_GOOD_DARK_COLORS and NUM_GOOD_LIGHT_COLORS
	  - some cPixmapFigure methods were also renamed

2015-12-07  ------ omnetpp-5.0b3 released ------

2015-12-02  Andras Varga

	* Added cEnvir::resolveResourcePath() that searches a number of folders
	for a resource given with its file name or relative path, and returns
	the path for the first match. It can useful for locating various data
	files for models, OSG model files, and other files.

	* Added cComponent::resolveResourcePath() that delegates to the cEnvir
	method of the same name.

2015-11-30  Andras Varga

	* Added cEnvir::isExpressMode() that returns true if the simulation is
	running under a GUI in Express mode. This can be used to tailor the
	operation of refreshDisplay() code.

	* cComponent::bubble() made const so that it can be called from
	refreshDisplay() as well.

2015-11-13  Levente Meszaros, Andras Varga

	* Fingerprint computation re-thought: cHasher has been relegated to
	a simple hash computing class, and fingerprint computation is now
	performed by cFingerprinter (which itself relies on a cHasher).
	More precisely, cFingerprinter is an abstract class interface from
	which concrete fingerprint computing classes are derived, currently
	cSingleFingerprinter, cMultiFingerprinter, and cOmnetpp4xFingerprinter.

	cSingleFingerprinter allows selecting which data elements to include
	in the fingerprint, and also allows filtering (by module, etc).
	See sim/ChangeLog for a more detailed feature description.

	* Define USE_OMNETPP4x_FINGERPRINT at compile-time to get back
	OMNeT++ 4.x fingerprints. Note: using cOmnetpp4xFingerprinter alone is
	not enough, because SimTime operation has also changed in some details.
	USE_OMNETPP4x_FINGERPRINT also restores the 4.x behavior of SimTime.

	* API change: cSimulation no longer has getHasher()/setHasher();
	getFingerprinter() has been added instead.

2015-11-20  Andras Varga

	* API fix: cSimpleModule::scheduleAt() return type changed from int
	(a dummy) to void.

2015-11-17  Andras Varga

	* API fix: cObject::getDescriptor() made const

2015-11-17  Andras Varga

	* Some cComponent/cModule methods were changed to const to facilitate
	calling them from refreshDisplay():
	- cComponent: getDisplayString()
	- cModule: findSubmodule(), getSubmodule(), getModuleByPath(),
	  getCanvas(), getOsgCanvas()

2015-11-17  Andras Varga

	* cComponent: added the refreshDisplay() method which is called by
	graphical user interfaces (Qtenv, Tkenv) whenever GUI contents need
	to be refreshed after processing some simulation events. Modules are
	expected to override refreshDisplay() and move visualization code
	(display string manipulation, canvas figures maintenance, OSG scene
	graph update, etc) into it. Overriding refreshDisplay() allows for
	a much more efficient screen update strategy than handleMessage(),
	and also results in more consistent information being displayed.

	Code in refreshDisplay() is not supposed to alter the state of the
	model; to this end, the method is declared const.

2015-11-18  Andras Varga

	* Removed compatibility macros that were introduced in 4.0 to allow
	writing models that work with both the then-new int64-based SimTime
	class and the legacy "double" simtime_t: SIMTIME_RAW(), STR_SIMTIME(),
	SIMTIME_TTOA(). MAXTIME was renamed to SIMTIME_MAX.

	SIMTIME_ZERO, SIMTIME_DBL(), SIMTIME_STR() were left in place, as they
	are either too broadly used to be removed and/or have some utility
	value.

2015-11-17  Andras Varga

	* SimTime overhaul to increase accuracy (i.e. use integer arithmetic
	where possible), improve the API, and add missing operations/functions.

	Details:
	- Added missing * and / operators for integral types. This causes
	  integer multiplications/divisions to be computed with integer
	  arithmetic instead of floating point, thus giving better accuracy
	- Added overflow checking for integer multiplication and negation
	- Use int64 arithmetc and overflow checking when assigning from integer types
	- Added isZero()
	- Replaced "int exponent" with "SimTimeUnit unit" in the two-argument
	  constructor (value + unit) and several other methods, with the aim
	  of making the API more user-friendly (and model code easier to read).
	  Models that call affected methods with integers will need to be
	  updated.
	- Template operators expanded to 8 integer types (signed/unsigned
	  short, int, long, long long). Reason: templates kicked in too often
	  where the expression was not about SimTime at all but conversion was
	  needed; e.g. for K*2 where K was defined as enum {K=2}. The compiler
	  decided to convert K into SimTime then complained that it couldn't
	  cast the result back to the desired type (int or double).
	- Friend operations inlined for code readability
	- Moved math functions like fabs(SimTime) into the omnetpp namespace
	- Added div(SimTime, SimTime); also refined related fmod()'s documentation

2015-10-19  Andras Varga

	* Signal listener interface change: A cObject *details (default-nullptr)
	argument has been added to emit() methods, and consequently, to
	cIListener::receiveSignal() methods as well. The motivation was to
	allow simulation models to provide some extra information with
	primitive data types (double, long, etc) they emit, without the need
	to switch over to emitting cObject altogether.

	This is a non-backward-compatible change: users' listeners will need
	to be updated (the extra argument added to their receiveSignal()
	methods). To facilitate transition, compile OMNeT++ and models with
	WITH_OMNETPP4x_LISTENER_SUPPORT defined; this will set up cIListener
	to delegate to the old methods, so existing listeners will work.

	* Result filter/recorder interface change: A similar change has been
	applied to cResultFilter and cResultRecorder as well, so models that
	contain custom result filters or recorders will need to be updated for
	OMNeT++ 5.0. Defining WITH_OMNETPP4x_LISTENER_SUPPORT does NOT help
	these classes.

2015-11-06  Rudolf Hornig

	* Fixes for mingw64: M_PI moved into platdep/platmisc.h

2015-10-16  Andras Varga

	* omnetpp namespace made permanent (cannot be turned off):
	- removed configure option and preprocessor symbol USE_NAMESPACE
	- removed related macros: NAMESPACE_BEGIN, NAMESPACE_END,
	  USING_NAMESPACE, OPP, OPP_STR, OPP_PREFIX etc.

2015-08-28  Andras Varga

	* Fixed namespace bug in ASSERT() macro [reported by Rens van der
	Heijden on the omnetpp mailing list]

2015-08-10  Andras Varga

	* Made OMNeT++ objects clickable (~picking) in OSG view.
	To make an object clickable, add an OmnetppObjectNode above it
	in the scene graph.

	OmnetppObjectNode basically wraps a cObject pointer. In Qtenv,
	the object inspector view (bottom-left corder of the main window)
	will be set to the picked object.

2015-07-24  Andras Varga

	* Added cOsgCanvas, a class that supports 3D graphics support via
	OpenSceneGraph. The 3D scene graph is to be built using the
	OpenSceneGraph API (e.g. loaded from file via osgDB::readNodeFile()),
	and then set onto a cOsgCanvas instance. There's one default cOsgCanvas
	instance per module, accessible via cModule::getOsgCanvas(), but
	the user can also create additional ones. The 3D scene(s) can be
	visualized in the new Qtenv graphical runtime environment (Tkenv
	cannot support it due to technical limitations.)

	Note that cOsgCanvas is just an OMNeT++-aware wrapper for the scene
	graph (plus some viewer hints), but the viewer itself (i.e. the widget)
	is not accessible from simulation models. This is by design, to
	de-couple the model from its user interface (i.e. a viewer may not be
	open for any particular cOsgCanvas instance at any given time, or even,
	the module may be running under Cmdenv or Tkenv that does not support
	3D visualization at all.)

	Code that uses the OpenSceneGraph API should be surrounded with #ifdef
	WITH_OSG, so that the model can be compiled and used in OMNeT++
	installations compiled without OpenSceneGraph support. The cOsgCanvas
	class always exists, regardless of OpenSceneGraph being available or
	not.

2015-07-20  ------ omnetpp-5.0b2 released ------

2015-06-24  Andras Varga

	* cEnum: added getNameValueMap() method

2015-06-23  Andras Varga

	* Register_Enum documentation fix and improvement

2015-06-23  Andras Varga

	* Register_Enum bugfix (registered name didn't take namespace into
	account)

2015-06-12  Andras Varga

	* Iterator cleanup and API change:
	- added operator* and operator->, deprecated operator()
	- cleaned up iterator increment/decrement operators
	- affected classes: cModule::GateIterator, cModule::SubmoduleIterator,
	  cModule::ChannelIterator, cQueue::Iterator

2015-06-16  Andras Varga

	* FES made replaceable:

	- cMessageHeap has been renamed to cEventHeap
	- an abstract cFutureEventSet base class has been introduced, and
	  cEventHeap now extends cFutureEventSet
	- use cSimulation::getFES() to access the FES; cSimulation.msgQueue and
	  cSimulation.getMessageQueue() have been removed
	- cSimulation::getFES() returns cFutureEventSet pointer
	- introduced futureeventset-class= config option
	- cEventHeap: peek(k) renamed to get(k)
	- cEventHeap::Iterator removed (not much advantage over get(i))
	- cEventHeap: removed length() and empty(); use getLength() and isEmpty()
	  instead

2015-06-15  Andras Varga

	* cQueue: length(), empty() deprecated; use getLength() and isEmpty()
	instead

2015-06-09  Andras Varga

	* Remove the deprecated status of cChannelType's createIdealChannel() etc.
	methods, namely: createIdealChannel(), createDelayChannel() and
	createDatarateChannel()

2015-06-09  Andras Varga

	* Remove deprecated methods and typedefs:

	- cClassDescriptor: compatibility methods that emulated pre-4.2 API,
	  i.e. certain overloaded versions of:
	  getFieldCount(), getFieldName(), findField(), getFieldTypeFlags(),
	  getFieldIsArray(), getFieldIsCompound(), getFieldIsPointer(),
	  getFieldIsCObject(), getFieldIsCOwnedObject(), getFieldIsEditable(),
	  getFieldDeclaredOn(), getFieldTypeString(), getFieldProperty(),
	  getArraySize(), getFieldAsString(), getFieldAsString(),
	  setFieldAsString(), getFieldStructName(), getFieldStructPointer()

	- cGate::setChannel(); use reconnectWith() instead

	- cMessage::setArrival()

	- cMessage::addPar(cMsgPar&); use addPar(cMsgPar*) instead

	- cSubModIterator class: use cModule::SubmoduleIterator instead

	- cMsgPar::getAsText(); use str() instead

	- cMsgPar::setFromText(); use parse() instead

	- cSimpleChannel typedef; use cDatarateChannel

	- cPolymorphic typedef; use cObject instead

	- cPacket: getEncapsulatedMsg(); use getEncapsulatedPacket() instead

	- Simtime: SCALEEXP_S and other SCALEEXP_xxx constants; use SIMTIME_xxx
	  constants instead

2015-06-09  Andras Varga

	* Remove deprecated method cModule::getModuleByRelativePath()

2015-05-22  Andras Varga

	* Modernizing: added the 'override' keyword (C++11) to overridden methods;
	it becomes blank when using with an older compiler.

2015-05-21  Rudolf Hornig

	* Modernizing: replaced NULLs by 'nullptr' (C++11); it is defined as 0
	when using an older compiler.

2015-05-12  Andras Varga

	* Cleanup: several data members, function arguments and local variables
	changed to camelCase

2015-05-12  Andras Varga

	* cException: getContextModuleID() -> getContextComponentId(), and more

	* cComponent: added getComponentKind() (and isModule()/isChannel() changed
	to rely on it)

	* cException: added getContextComponentKind()

2015-05-11  Andras Varga

	* Some methods renamed in statistic classes:

	cStatistic:
	- addTransientDetection() -> setTransientDetectionObject()
	- addAccuracyDetection() -> setAccuracyDetectionObject()

	cDensityEstBase: methods renamed
	- getNumFirstVals() -> getNumPrecollectedValues()
	- setNumFirstVals() -> setNumPrecollectedValues()

	cVarHistogram:
	- unnamed enum of HIST_TR_xxx constants became cVarHistogram::TransformType

2015-05-20  Andras Varga

	* Cleanup: cModule, cStatistic: some private stuff made private

2015-05-08  Andras Varga

	* Cleanup: removed deprecated opp_error(), opp_terminate(), opp_warning()
	functions

2015-04-24  Andras Varga

	* cStatistic to subclass from cRandom, and its random() has been deprecated
	in favour of cRandom's draw()

2015-04-20  Andras Varga

	* Cleanup: use C++ names of C headers (e.g. <cstdio> instead of <stdio.h>)

2015-04-15  Andras Varga

	* Introduced cRandom:

	- cRandom encapsulates a random number stream into an object. Random
	  numbers can be extracted with the draw() method.

	- Added the following cRandom subclasses: cUniform, cExponential,
	  cNormal, cTruncNormal, cGamma, cBeta, cErlang, cChiSquare, cStudentT,
	  cCauchy, cTriang, cWeibull, cParetoShifted, cIntUniform, cBernoulli,
	  cBinomial, cGeometric, cNegBinomial, cPoisson. They encapsulate the
	  similarly named functions (e.g. exponential()) with their parameters
	  and the random number generator (cRNG).

	* Refactoring of the random number generator functions:

	- Random variate generation functions have been moved into cComponent.
	  Goal: remove dependence on global variable (they used the RNGs of the
	  *context* module).

	- Affected: exponential(), normal() etc as well as intrand() and dblrand().

	- Original standalone functions remained, but take cRNG* as argument
	  instead of an integer RNG index.

	* Removed: genk_intrand(), genk_dblrand(). Use the update intrand/dblrand
	instead (they exist both in method and standalone function form).

2015-04-14  Andras Varga

	* Eliminating the "simulation" macro:

	- Introduced a global getSimulation() function, and replaced "simulation"
	  occurrences by a call to getSimulation().

	- Added the following added accessor methods:
	    - cComponent::getSimulation()
	    - cComponent::getSystemModule()
	    - cScheduler::getSimulation()

	- Goal: long-term, there should be enough getSimulation() methods around
	  so that the global function can be thrown out. Ultimately, we'd like
	  to get rid of the activeSimulation global variable too.

	- Note: simulation.getModuleByPath() calls in modules can simply be
	  replaced by the module's getModuleByPath() method.

	* Eliminating the "ev" macro:

	- Introduced a global getEnvir() function, and replaced "ev" occurrences by
	  a call to getEnvir(). Advantage: cComponent etc may later have getEnvir()
	  methods --> less static vars.

	- Added cComponent::hasGUI() to replace ev.isGUI() calls

2015-04-11  Andras Varga

	* Cleanup: standardize and qualify header guards with the OMNETPP prefix

2015-04-14  Andras Varga

	* Added OMNETPP_BUILDNUM

2015-04-13  Andras Varga

	* Added compatibility platdep/sockets.h that redirects to omnetpp/platdep/sockets.h.

	Needed because sockets.h *must* be included before omnetpp.h, so we
	cannot use OMNETPP_VERSION to decide between <platdep/sockets.h> (old)
	and <omnetpp/platdep/sockets.h> (new).

2015-04-01  Andras Varga

	* cObject: parsimPack() became const

2015-04-07  Andras Varga

	* Restructuring: Header files moved into include/omnetpp, with the
	exception of <omnetpp.h>

2015-04-04  Andras Varga

	* cObjectFactory: implemented namespace lookup. The following methods

	   static cObjectFactory *find(const char *classname);
	   static cObjectFactory *get(const char *classname);

	have been extended with two extra arguments to allow lookup of names
	within a context namespace, potentially falling back to the "omnetpp"
	namespace:

	   static cObjectFactory *find(const char *className, const char *contextNamespace=NULL, bool fallbackToOmnetpp=true);
	   static cObjectFactory *get(const char *className, const char *contextNamespace=NULL, bool fallbackToOmnetpp=true);

2015-03-23  Andras Varga

	* Cleanup: VoidDelFunc and VoidDupFunc became inner types of cMsgPar,
	as only cMsgPar used them.

2015-03-04  ------ omnetpp-5.0b1 released ------

2015-02-14  Andras Varga

	* Eliminated platdep/intxtypes.h, as recent versions of MSVC finally
	have <stdint.h>.

	* Removed int8..int64 and uint8..uint64 typedefs (defined in the removed
	platdep/intxtypes.h). We should use the standard ones from <stdint.h>
	that end in "_t": int8_t, uint8_t, etc.

	* Removed opp_long_long (and opp_unsigned_long_long), they only existed
	because earler versions of MSVC didn't know about long long.

	* Added platdeps/intlimits.h to contain INT64_MAX and similar macros.
	They are supposed to come from <stdint.h> but that's problematic:
	<stdint.h> only defines them when __STDC_LIMIT_MACROS is defined before
	including the header *for the first time*. So if model code includes
	<stdint.h> before us without __STDC_LIMIT_MACROS, we'd be toast.

2015-02-08  Andras Varga

	* added Register_Enum2() macro, which registers an enum and at the same time
	makes it accessible via a global cEnum* pointer.

2014-12-12  Andras Varga

	* cResultListener: added callFinish(), so that invoking finish() multiple
	times can be prevented at the cost of one additional flag.
	Fixes issue #799: double recording of scalars computed from multiple signals

2014-09-17  Andras Varga

	Canvas API implementation finished. This is a 2D figure-based drawing API.

	One can create figure objects (derived from cFigure), and place them on
	a canvas (cCanvas). Every module has its own canvas (cModule::getCanvas()),
	and one may create additional ones directly. Figure classes are data
	storage classes only, actual rendering is in the GUI code (e.g. Tkenv).
	Figures form an object tree, where child figure coordinates are relative
	to the parent figure.

	cFigure contains the following utility classes:
	Point, Rectangle, Color, Font, Transform, RGBA, Pixmap.

	The following figure classes are available:
	    cFigure - base class
	      cGroupFigure - for grouping other figures, no visual appearance
	      cPanelFigure - non-zooming container, no visual appearance
	      cAbstractLineFigure - line, with optional arrowheads
	        cLineFigure - a single line segment
	        cArcFigure - arc
	        cPolylineFigure - (smoothed) polyline
	      cAbstractShapeFigure - shape, both fill and outline is optional
	        cRectangleFigure - (rounded) rectangle
	        cOvalFigure - circle or ellipse
	        cRingFigure - ring
	        cPieSliceFigure - pie slice
	        cPolygonFigure - (smoothed) polygon
	        cPathFigure - optionally filled path, modelled after SVG
	      cAbstractTextFigure
	        cTextFigure - text
	        cLabelFigure - non-zooming text
	      cAbstractImageFigure
	        cImageFigure - image loaded from the image path
	        cIconFigure - non-zooming image loaded from the image path
	        cPixmapFigure - programmatically created image

2014-10-27  Andras Varga

	* Removed nonstandard fixed-size integer typedefs: int8, uint8, etc.
	Use the standard ones with the _t suffix.

	* Removed opp_long_long, which was an alias to long long, with a hack
	to make the code compile with Visual C++ 7.1 and earlier. Modern
	Visual C++ versions support long long, so this typedef is no longer
	needed.

	* Removed platdep/intxtypes.h, which was our in-house version of <stdint.h>
	Now that recent Visual C++ versions (and all other modern compilers)
	have <stdint.h>, platdep/intxtypes.h is no longer needed.

2014-09-22  Andras Varga

	* opp_string: added size() method

2014-08-18  Zoltan Bojthe

	* cEnum: added resolve(): similar o lookup(), but throws error if
	string is not found

2014-08-01  Andras Varga

	* cEnum: added bulkInsert()

2014-01-30  Andras Varga

	* cGate: added getConnectionId(). Connection ID is an integer that can
	be used by tools like the Sequence Chart to globally and uniquely
	identify the connection during the lifetime of the simulation.
	(Reconnecting the gate assigns a fresh ID, and disconnecting it sets
	-1 as ID.) There is no mechanism for looking up a connection by ID
	(apart from scanning through all gates in the simulation.)

2014-01-18  Andras Varga

	* cModule: changeParentTo() will now assign a new ID to the module.
	This usually causes no problem in the simulation's operation, but
	if your model stores module IDs somewhere, you'll need to invalidate or
	update them manually.

	Motivation: we want to have a time-independent moduleId-to-fullPath
	mapping, as it would allow a lot simpler and more efficient data
	structures in GUI parts (Tkenv, Sequence Chart, Simulation Front-End,
	etc.)

2014-01-16  Andras Varga

	* Channel objects (cChannel) now have IDs, similarly to modules. This
	was achieved by two changes:
	- getId() was moved from cModule to cComponent, so now cChannel inherits it
	- cSimulation internal vector now stores cComponent* ptrs, not cModule*

	API changes:
	- cSimulation: getLastModuleId() renamed to getLastComponentId()
	- cSimulation: added getChannel(id) and getComponent(id) to already existing
	  getModule(id)
	- cSimulation: internal functions registerModule()/deregisterModule() renamed

	Note: since the above change causes module IDs to be assigned differently
	it would change the OMNeT++ 4.x fingerprint. Thus, code for the
	USE_OMNETPP4x_FINGERPRINTS mode has been updated accordingly (i.e.
	compute and store fictitous OMNeT++ 4.x module IDs as well)

2013-11-21 Andras Varga

	Code cleanup:
	* renamed error codes: eXXX to E_XXX
	* removed deprecated class cLinkedList
	* removed deprecated operator[] from cSimulation
	* removed double-simtime support (WITH_DOUBLE_SIMTIME)
	* removed deprecated macros: Define_Function(), Define_Function2(),
	  Define_Function3(), Define_Function4(). Use Define_NED_Math_Function()
	  instead.

2013-09-26  Andras Varga, Levente Meszaros

	* New logging API. It features 6 log levels (FATAL, ERROR, WARN, INFO,
	DETAIL, DEBUG, TRACE), category support, compile-time and runtime global and
	per-module log level thresholds. Internally, the implementation makes
	much more information available to the Envir library than previously,
	e.g. the file/line of the logging statement, and the class/name/pointer
	of the surrounding object if the logging statement occurs in a
	non-static method of a class.

	The following macros can be used for logging (stream-style, i.e. with
	operator <<): EV, EV_FATAL, EV_ERROR, EV_WARN, EV_INFO, EV_DETAIL, EV_DEBUG,
	EV_TRACE for logging without category (i.e. generic); and their _C
	counterparts (EV_C(category), EV_FATAL_C(category), etc.) for logging
	with category information. They all rely on OPP_LOG(loglevel, category).

	Compile-time log level can be set by defining the GLOBAL_COMPILETIME_LOGLEVEL
	macro during compilation.

	The global runtime log level can be changed by assigning the
	cLogLevel::globalRuntimeLoglevel variable, but it better to set it
	via the log-level= inifile configuration option (defined in the Envir
	library).

	Per-module log level can be set with cComponent's setLoglevel() internal
	method. When set, it overrides the global runtime log level. There is
	currently no way to set per-module log level from ini files.

	Category filtering could be offered by the Envir library (it has the
	category information), but it is currently not implemented.

	Incompatibilities:
	- ev<< is no longer legal, use EV<< instead
	- ev.printf() was removed, use the stream API (EV<<) instead

	Implementation:
	- added clog.h
	- cEnvir no longer has << operators for logging, and printf(), sputn()
	  and the internal std::ostream was removed; now it has a log(cLogEntry*)
	  method instead where all the logging macros eventually delegate.
	- the logging macros internally refer to a cLogProxy class; a cLogProxy
	  instance is used to store log context information (file/line etc)
	  until a log line is complete.

2013-09-17  Andras Varga

	* cpacket.h split from cmessage.h; removed WITHOUT_CPACKET (it was a
	compatibility macro to help code migration from OMNeT++ 3.x to 4.0)

2013-04-03  Andras Varga

	cTopology improvements (taken over from INET Framework)
	* added factory methods for links and edges
	* added methods to manipulate the graph (e.g. build a graph from scratch):
	    int addNode(Node *node);
	    void deleteNode(Node *node);
	    void addLink(Link *link, Node *srcNode, Node *destNode);
	    void addLink(Link *link, cGate *srcGate, cGate *destGate);
	    void deleteLink(Link *link);
	* code cleanup (variables renamed, use STL instead of arrays, etc.)

2013-02-26  Andras Varga

	* check_and_cast: fixed two issues:
	    (1) only accepted cObject* pointers as input
	    (2) silently discarded const modifier from the pointer

	* added check_and_cast_nullable that accepts NULL pointer as input

2013-02-05  Andras Varga

	* SimTime: conversion from double now uses rounding instead of truncation
	(plain C-style cast). Motivation: some small time constants given as
	doubles ended up with lots of trailing 9's after conversion to simtime_t.
	Note that this change alters simulation fingerprints.

	* Introduced USE_OMNETPP4x_FINGERPRINTS. When OMNeT++ is compiled with
	this symbol #defined, the simulation kernel will use OMNeT++ 4.x
	compatible fingerprint computation. (For example, the above simtime
	rounding is not applied.)

2013-01-28  Andras Varga

	* Introduced cEvent as a base class of cMessage. cEvent allows scheduling
	of arbitrary code for a simulation time that runs independent of modules.
	Override the execute() method of cEvent to specify the code. cEvent is
	not intended for use in simulation models; the primary motivation is
	implementing simulation time limit with a "end-simulation" event,
	and to encapsulate foreign events (e.g. SystemC events and crunching)
	for seemless integration with the simulation event loop.

	* Revised cScheduler interface. The main methods in cScheduler are now
	takeNextEvent() and guessNextEvent().

	* Added putBackFirst(cEvent *event) to cMessageHeap, as it is sometimes
	needed for schedulers

2013-01-28  Andras Varga

	* Implemented simulation lifecycle listeners. The listener class is
	cISimulationLifecycleListener; listeners can be installed/removed
	with the addLifecycleListener() / removeLifecycleListener() cEnvir
	methods. Event type constants are in the SimulationLifecycleEventType
	enum: LF_ON_STARTUP, LF_PRE_NETWORK_SETUP, LF_POST_NETWORK_SETUP, etc;
	see the full list in the source.

	* Output scalar/vector/snapshot managers, schedulers and cParsimPartition
	have been changed to use lifecycle events: the old startRun()/endRun()/etc
	methods remain but are now invoked from lifecycle events:
	- startRun() -> LF_POST_NETWORK_INITIALIZE
	- endRun() -> LF_ON_RUN_END
	- flush() -> LF_ON_SIMULATION_PAUSE

2013-01-28  Andras Varga

	* envirext.h: renamed cOutputVectorManager, cOutputScalarManager and
	cSnapshotManager to include an "I" (for interface) in their names:
	cIOutputVectorManager, cIOutputScalarManager, cISnapshotManager.

2012-11-05  Andras Varga

	* In preparation for a remote GUI simulation front-end, added a mechanism
	for checking whether an object's stage has change since the last GUI
	refresh. There is a global counter (cObject::changeCounter) that is
	incremented on every change; and every object may store a lastChangeSerial,
	changeCounter's value of at the tme of the last change. The GUI may supply
	the changeCounter at the time of the last refresh, and ask objects whether
	they've changed since then. Two methods in cObject:
	    virtual bool hasChangedSince(int64 refreshSerial);
	    static int64 getChangeCounter() {return changeCounter;}

	Note: Currently all changes on cPar/cGate/cDisplayString/cModule are
	lumped together, to cDefaultList's lastChangeSerial. This could be made
	more fine-grained if needed. (Currently if you create, send or receive a
	message, that already updates cDefaultList's lastChangeSerial, and thus
	the module and all of its parameters and gates need to be reloaded!)

	The code is now surrounded with #ifdef SIMFRONTEND_SUPPORT, turned off
	by default.

2012-09-04  Andras Varga

	cClassDescriptor interface cleanup:
	* removed redundant "void *object" first argument from methods that
	  referred to the class and not instance: getFieldName(),
	  getFieldProperty(), getFieldStructName(), etc.
	* added getPropertyNames() and getFieldPropertyNames()
	* renamed getArraySize() to getFieldArraySize()
	* renamed getFieldAsString() to getFieldValueAsString()
	* similarly, renamed setFieldAsString() to setFieldValueAsString()
	* renamed getFieldStructPointer to getFieldStructValuePointer()
	* old methods still exist as deprecated ones

////////////// fixes taken from omnetpp-4.x come here /////////////////

2014-11-27  ------ omnetpp-4.6 released ------

2014-06-30  ------ omnetpp-4.5 released ------

2014-04-15  Andras Varga

	* Added cMessagePrinter class and Register_MessagePrinter() macro.
	Message printers are used by Tkenv to produce one-line descriptions
	of network packets and other messages.

2014-02-03  Andras Varga

	* Removed cCompoundModule. From now on, cModule is used to instantiate
	compound modules. Motivation: allow a compound module to be instantiated
	with a cSimpleModule-based C++ class, and still have submodules.

2014-02-13  ------ omnetpp-4.4.1 released ------

2013-12-20  ------ omnetpp-4.4 released ------

2014-01-07  Andras Varga

	* Added the EXECUTE_ON_SHUTDOWN() macro

	* Embedding: Code registered with EXECUTE_ON_STARTUP() can now be run
	with CodeFragments::executeAll(CodeFragments::STARTUP) (instead of the
	old ExecuteOnStartup::executeAll()) and code registered with the new
	EXECUTE_ON_SHUTDOWN() macro can be run with CodeFragments::executeAll(
	CodeFragments::SHUTDOWN). These calls usually occur at the top and
	bottom of the main() function of the simulation program.

2013-12-20  Andras Varga

	* cEnvir: added attachDebugger() method

2013-12-09  Andras Varga

	* distrib.h: fix #693: SimTime version of truncnormal() accidentally
	called double version of normal() instead of truncnormal().

2013-11-23  Andras Varga

	* better definition for DEBUG_TRAP on *nix: use SIGTRAP instead of
	SIGINT, and on Intel+Linux use asm int 3.

2013-10-03  Andras Varga

	* cResultRecorder: added support for programmatically setting up result
	filters and recorders on signals. This is made possible by adding new args
	to init(): cProperty* attrsProperty, opp_string_map *manualAttrs;
	this allows result recorders to be used without a corresponding @statistic
	attribute, e.g. they can be added to signals programmatically

	* cEnvir: added support for @statistic-style result recording on dynamically
	registered signals (e.g. "conn-<n>" where n is an integer). Instead of
	@statistic, use @statisticTemplate property in the NED file, and for each
	new signal call a new cEnvir method:
	   addResultRecorders(cComponent *component, simsignal_t signal,
	   const char *statisticName, cProperty *statisticTemplateProperty);

2013-10-28  Rudolf Hornig

	* fixes for clang and C++11 [thanks to https://github.com/shigeya/omnetpp]

2013-10-25  Zoltan Bojthe

	* signals: added emit(simsignal_t, const cObject*) to cComponent

	This was necessary because otherwise the compiler casts the const pointer
	to long (!!!) and calls that emit().

	The new method delegates to the const-less version, which is not very
	clean. It would be better to do the other way round (let non-const
	delegate to the const version), however, for that the listeners would
	have to accept const pointer which would be a painful change

2013-10-29  Andras Varga

	* signals: cIListener: added receiveSignal() overload for the bool type.
	(Before it was channelled into long.)

2013-10-24  Andras Varga

	* signals: introduced SimsignalType, an enum for signal data types;
	it replaces cITimestampedValue::Type.

2013-10-24  Andras Varga

	* cObjectFactory: extended with an isInstance() method that effectively
	wraps a dynamic_cast

	* added Register_Abstract_Class() macro so cObjectFactory::isInstance()
	can be used on abstract classes as well

2013-10-01  Andras Varga

	* cNEDValue: added two static parseQuantity() functions that let you
	access similar functions of UnitConversion in the common lib.

	* cResultRecorder: make it possible to bypass reading the @statistic
	property

2013-09-12  ------ omnetpp-4.3.1 released ------

2013-04-02  ------ omnetpp-4.3 released ------

2013-02-08  ------ omnetpp-4.3rc1 released ------

2013-02-07  Andras Varga

	* SimTime: added SimTime(int64 value, int base10exponent) constructor
	to allow specifying precise constants.

	SimTime: added functions for getting the value out in various time
	units (sec, msec, etc): inUnit(), trunc(), remainderForUnit(), split()

2013-02-07  Andras Varga

	* cGate: added the getBaseId() method that returns the id of gate [0]
	in the same gate vector. It is useful for checking whether a message
	arrived on a gate of a given module vector, without string lookups.

	  int transportInGateBaseId = gateBaseId("transportIn");
	  ...
	  if (msg->getArrivalGate()->getBaseId() == transportInGateBaseId) {
	      // message arrived on transportIn[]
	  }

2013-01-29  Andras Varga

	* cModule: deprecated getModuleByRelativePath() and added a more
	powerful version, getModuleByPath(), that understands both relative
	and absolute paths, and also has notation for parent module (caret, ^).

2013-01-09  Andras Varga

	* Renamed methods of cMatchExpression::Matchable:
	  getDefaultAttribute() -> getAsString()
	  getAttribute(const char *name) -> getAsString(const char *attribute)

2012-01-31  Andras Varga

	* Signals implementation now allows static initialization of simsignal_t
	variables. The signal registration table is no longer cleared between
	runs, so you can write things like

	  simsignal_t PPP::txBeginSignal = cComponent::registerSignal("txBegin");

	The "first 64 signals are faster" thing has been resolved by introducing
	an indirection: bit indices are allocated to signals at the first usage
	(first emit() or subscribe()). This allocation table *is* cleared between
	runs, so only the signals actually used will have bits allocated to them.

2012-01-18  Zoltan Bojthe

	* Added calculateWeightedSingleShortestPathsTo() to cTopology

2012-01-18  Andras Varga

	* Added hasEncapsulatedPacket() to cPacket

2012-01-14  Andras Varga

	* cModule now caches fullPath string in debug mode; this makes it
	easier to identify modules while debugging [suggested by Jes Jones]

2012-01-14  Andras Varga

	* Added the cPatternMatcher and cMatchExpression utility classes
	to the API. cPatternMatcher is a glob-style pattern matching class,
	adopted to special OMNeT++ requirements. It recognizes wildcards
	(?, *, **), numeric ranges ({5..10}), numeric index ranges ([5..10]),
	and supports options such as case sensitive and whole string match.
	cMatchExpression builds on top of cPatternMatcher and lets you
	combine patterns with AND, OR, NOT for matching fields of arbitrary
	objects.

2012-03-13  ------ omnetpp-4.2.2 released ------

2012-01-17  ------ omnetpp-4.2.1 released ------

2011-10-28  ------ omnetpp-4.2 released ------

2011-10-14  Levente Meszaros

	* Refactored operator= and copy constructor in all 	- classes.
	Motivation: it is a common C++ recommendation that they delegate to
	the same utility function. Until now, copy constructor was implemented
	in terms of operator=, which had some drawbacks.

	Details:

	Added a private copy function per class that contains the common part
	of operator= and the copy constructor. Added tests for both functions.

	copy constructor
	================
	 - explicitly calls base class copy constructor if there's a base class
	 - initializes some class variables, most notably pointers
	 - calls copy

	<class>::<class>(const <class>& other) : <superclass>(other)
	{
	   <pointer> = NULL;
	   copy(other);
	}

	operator=
	=========
	 - checks this==&other if class is not abstract
	 - calls clear if there's something to delete
	 - calls base class operator= if there's a base class
	 - calls copy
	 - returns void or *this

	<class>& <class>::operator=(const <class>& other)
	{
	    if (this==&other) return *this; // omit if class is abstract
	    clear(); // omit if there is nothing to delete
	    <superclass>::operator=(other); // omit if there is no base class
	    copy(other);
	    return *this; // alternatively return void
	}

	copy
	====
	 - is private, non-virtual and returns void
	 - does not call base class' copy or any copy constructor or any operator=

	void <class>::copy(const <class>& other)
	{
	   <member> = other.<member>;
	   // etc
	}

2011-09-11  ------ omnetpp-4.2rc1 released ------

2011-06-25  Andras Varga

	* The internal class cMathFunction was renamed to cNEDMathFunction,
	to follow similar renaming of corresponding registration macros
	(Define_Function --> Define_NED_Math_Function).

	* Result filter/recorder interfaces and registration macros made
	public (moved here from src/envir), so that users can contribute
	their own result filters and recorders. Files: cresultlistener.h,
	cresultfilter.h  cresultrecorder.h. Result filters have to be
	subclassed from cResultFilter or the more specific cNumericResultFilter
	or cObjectResultFilter base classes and registered with the
	Register_ResultFilter() macro; result recorders have to be subclassed
	from cResultRecorder or the more specific cNumericResultRecorder,
	and registered with the Register_ResultRecorder() macro. After that,
	the new filter or recorder can be used in the source= and record=
	attributes of @statistic, and with the **.result-recording-modes
	configuration option.

2011-06-20  Andras Varga

	* The Define_Function() macros have been renamed to Define_NED_Math_-
	Function(). For backwards compatibility, the old macro definitions
	remain, but issue a deprecation warning. Note that the preferred
	way of defining new NED functions is now the Define_NED_Function()
	macro.

2011-06-14  Andras Varga

	* cDynamicExpression::Value, also shared by cNEDFunction, has been
	factored out to a cNEDValue class. Data members are no longer public,
	they can be manipulated via various methods. NOTE: This change is
	NOT backwards compatible: user-supplied NED functions will need to be
	revised. Look at src/sim/nedfunctions.cc for code examples.

2011-05-05  ------ omnetpp-4.2b2 released ------

2011-04-15  Andras Varga

	* cEnvir: new methods:
	- cXMLElement *getParsedXMLString(const char *content, const char *xpath);
	- void forgetParsedXMLString(const char *content);
	- void flushXMLParsedContentCache();
	The first one is needed for the new xml() NED function; the other two
	are added for symmetry with the forgetXMLDocument() and
	flushXMLDocumentCache() methods.

2011-04-04  Andras Varga

	* cRegistrationList::get() renamed to find(), for consistency with
	other, similarly named methods

2011-04-04  Andras Varga

	* introduced "object kind" for per-object config options; for the time
	being this is useful for better content assist in the inifile editor
	in the IDE. Incompatible change: the Register_PerObjectConfigOption()
	and Register_PerObjectConfigOptionU() macros now take one more
	argument, the object kind. [Implemented by Tamas Borbely]

2011-02-23  ------ omnetpp-4.2b1 released ------

2011-02-17  Andras Varga

	* cPar: setExpression() now accepts an evaluationcontext parameter;
	added getEvaluationContext() / setEvaluationContext() methods

2010-12-11  Andras Varga

	* Removed #include <winsock.h> from <platdep/timeutil.h>; the reason
	is that it conflicted with lwIP code recently integrated into INET.
	(<winsock.h> defines a lot of constants, functions etc that lwIP also
	wants to define, making lwIP impossible to compile with <omnetpp.h>
	pulled in.) <platdep/sockets.h> still includes <winsock.h>, but now
	<platdep/sockets.h> MUST precede <omnetpp.h> in all sources!

2010-07-17  Andras Varga

	* platdep/sockets.h: closesocket() was incorrectly defined as no-op
	on platforms other than Windows

2010-07-06  Andras Varga

	cChannel::MessageSentSignalValue: getMessage() return type fixed
	(changed from cObject to cMessage)

2010-06-11  ------ omnetpp-4.1 released ------

2010-06-11  Andras Varga

	* cSimulation: added getSimulationStage()

	* cException: exception object now stores simulation stage, event
	number and simulation time as well; also added getFormattedMessage()
	method that puts together the complete error message from its pieces.

2010-06-09  Andras Varga

	* cGate: added utility functions findTransmissionChannel(),
	getIncomingTransmissionChannel(), findIncomingTransmissionChannel().

2010-05-31  ------ omnetpp-4.1rc2 released ------

2010-05-29  Andras Varga

	* cChannel: added forceTransmissionFinishTime(simtime t), so that
	channels can support aborted transmissions (needed e.g. for Ethernet).

2010-05-28  Andras Varga

	* cChannel: added getNominalDatarate(). This is often needed in models,
	for example in INET to fill in the interface entry.

	* minor: cITimestampedValue::simtimeValue() return type changed from
	const SimTime& to SimTime so that the code works with simtime_t=double
	as well.

2010-05-22  Andras Varga

	* added forgetXMLDocument(filename) and flushXMLDocumentCache() to
	cEnvir (see bug #131)

	* cPar: added a note to the xmlValue() method that the lifetime of
	the returned objects may be limited. Modules should NOT hang on to
	cXMLElement pointers between events!

2010-05-07  Andras Varga

	* restored cChannel::calculateDuration() that was removed in 4.1b3,
	as feedback indicates it does have utility value

2010-05-06  Andras Varga

	* Enter_Method_Silent() now may take arguments (printf-like arg list).
	Also, it now logs the call into the eventlog file (and the resulting
	string (if given) is recorded as the method name).

2010-04-25  Andras Varga

	* added cComponent::isChannel() utility method

	* cChannel: introduced MessageSentSignalValue to make transmission
	details (result_t) available in listeners of the "messageSent"
	channel signal

	* cConfiguration: substituteVariables() made public

	* new NED function: expand(). It substitutes ${} config variables
	into a string. Possible use: in NED parameters like the following:
	string fname = default(expand("${resultdir}/${configname}-${runnumber}.txt"));

2010-04-20  ------ omnetpp-4.1b4 released ------

2010-04-19  Andras Varga

	* channel's main function process(), introduced in the previous beta,
	renamed to processMessage() for consistency with handleMessage().

2010-04-18  Andras Varga

	* cMessage, cPacket: several methods made virtual, most notably
	encapsulate() and decapsulate(), to allow customizing the behavior
	in subclasses

	* cPacket: getEncapsulatedMsg() renamed to getEncapsulatedPacket()
	to better describe its function. The old method was left there for
	backward compatibility; it is deprecated and delegates to the new
	method.

	* cClassFactory renamed to cObjectFactory

2010-04-01  Andras Varga

	* cStringTokenizer: added copy constructor and assignment operator

2010-03-31  Rudolf Hornig

	* handleParameterChange() is called for each component with
	parameterName=NULL after the last stage of the initialization phase.
	This allows the components to refresh their cached parameter values
	if some parameters were changed during the initialization phase.
	This is necessary because handleParameterChange() is not called during
	the component's initialization phase.

2010-03-14  ------ omnetpp-4.1b3 released ------

2010-03-10  Andras Varga

	* When recording a histogram object into the scalars file (see
	cComponent::recordStatistic(), cStatistics::record(), etc.),
	its transform() method gets invoked to force it set up the histogram
	cells, provided it was not already invoked.

	* cVarHistogram: createEquiProbableCells() renamed to
	createEquiprobableCells() (lowercase "p")

	* cOutVector: added setRecordDuringWarmupPeriod() and getRecordDuring-
	WarmupPeriod() methods.

2010-03-01  Andras Varga

	* cGate: removed isBusy() and getTransmissionFinishTime(), as they
	were confusing (they ignored any propagation delay up to the
	transmission channel); they had bad performance characteristics
	(they linerarly searched for the transmission channel every time);
	and they threw an error if the path didn't contain a transmission
	channel at all.

2010-02-27  Andras Varga

	* created cHistogram class by merging cDoubleHistogram and cLongHistogram
	functionality.

2010-02-15  Andras Varga

	* cChannel: deliver() method semantics changed, method renamed to
	process(), and argument list changed. Reason is to decrease the
	amount of code that needs to be written when implementing a new
	channel class, and to improve reusability via subclassing.
	See documentation in the code.

2010-01-29  Andras Varga

	* cProperty: getNumValues() to return 0 (instead of thowing an error)
	when the property does not contain the given property key.

2010-01-23  Andras Varga

	* implemented signals mechanism. See new classes cIListener and
	cListener; new cComponent methods registerSignal(), getSignalName(),
	emit(), mayHaveListeners(), hasListeners(), subscribe(), unsubscribe(),
	isSubscribed(), getLocalListenedSignals(), getLocalSignalListeners();
	constants PRE_MODEL_CHANGE and POST_MODEL_CHANGE; new class
	cModelChangeNotification and subclasses; and new "Signals" section
	in the Manual.

2009-09-14  Rudolf Hornig

	* cGate: added getNameSuffix() method.

2009-08-06  Andras Varga

	* added cArray::setCapacity()/getCapacity(). setCapacity() can be used
	to trim back the internally allocated array after a large number of
	items have been removed from it.

2009-07-25  Andras Varga

	* FES performance improvement: cMessageHeap was changed to more
	efficiently handle the insertion and removal of events scheduled
	for the current simulation time. Such events are actually quite common
	due to plain (zero delay, zero datarate) connections between modules.
	For more info, see src/sim/ChangeLog.

	* performance improvement: cMessage::getArrivalTime() was consuming
	10-20% of CPU time in many configurations, see bug #22,
	http://dev.omnetpp.org/bugs/view.php?id=22.

	Solution: change return type of getArrivalTime() and other methods
	from simtime_t to simtime_t_retval (which is a new typedef that maps to
	const simtime_t&). Reason: on some platforms and configurations, esp.
	in debug builds, returning a const reference is more efficient than
	returning by value (even though SimTime is only 64 bits and would fit
	in register(s)).

	On 64-bit architectures and optimized builds (-O2/-O3) this change may
	actually decrease performance; this is to be investigated, and
	simtime_t_retval conditionally defined as plain simtime_t.

2009-07-10  Andras Varga

	* cClassDescriptor: added findField() method

2009-06-25  Andras Varga

	* cModuleType: added isSimple()

	* corrected the definition of NULL according to C++ rules

2009-04-25  Andras Varga

	* cModule::addGate() to return the gate pointer whenever a single gate
	is created (for inout gates [~gate pair] and vectors it returns NULL)

2009-03-12  ------ omnetpp-4.0 released ------

2009-03-28  Andras Varga

	* cClassDescriptor: getFieldAsString() signature change (return
	std::string instead of taking char *buf, int bufsize)

2009-03-09  Andras Varga

	* added factory methods cIdealChannel::create(), cDelayChannel::create(),
	cDatarateChannel::create(), which are easier to find and remember than
	previous ones (cChannelType::createIdealChannel()/createDelayChannel()/
	createDatarateChannel() -- those are deprecated now).

2009-02-27  ------ omnetpp-4.0rc2 released ------

2009-02-18  Andras Varga

	* added cSimulation::clearLoadedNedFiles() function

2009-02-07  Andras Varga

	* cNEDFunction and Define_NED_Function(): changed signature string
	to a C-like syntax.

2009-01-13  Andras Varga

	* Several changes to make it easier to use the simulation kernel
	as a C++ library, for embedding simulations into other programs:

	- created cRunnableEnvir by factoring out run() method from cEnvir;
	simulation user interfaces like Cmdenv or Tkenv subclass from
	cRunnableEnvir, but other custom environment objects do not need to.

	- added cNullEnvir, a default do-nothing implementation for cEnvir.

	- cConfiguration split to a smaller cConfiguration plus a
	cConfigurationEx class that adds the rest of the methods.
	When the simulation kernel is used as library, only cConfiguration
	needs to be implemented. cConfigurationEx is needed only when one
	wants to plug in a different configuration object into the existing
	Envir library, replacing SectionBasedConfig.

	- cSimulation now creates a cSequentialScheduler by default (no need
	to do it manually); if it's not good, a different scheduler object
	can be installed with the setScheduler() method.

	- support for multiple instances of cSimulation. "simulation" is
	no longer a global variable but a macro that expands to
	cSimulation::getActiveSimulation(). Multiple cSimulation objects
	may coexist; before invoking any function in the simulation library,
	the correct cSimulation instance must be activated with
	cSimulation::setActiveSimulation().

	- multiple environment objects may coexist; in fact, there must be
	exactly one associated with every cSimulation instance. "ev" now
	maps to cSimulation::getActiveEnvir() which is short for
	cSimulation::getActiveSimulation->getEnvir(). cSimulation::
	setActiveSimulation() which activates a cSimulation instance
	also activates its corresponding environment object.

	- added cSimulation::loadNedText(), to facilitate creating
	self-contained executables by embedding NED source as string
	literals.

	- two new related examples: samples/embedding and samples/embedding2.

2008-12-12  ------ omnetpp-4.0rc1 released ------

2008-02-25  Andras Varga

	Summary of changes for omnetpp-4.0 (2006..2008):

	Lots of breaking changes. We opted for doing all necessary
	changes at once (3.3 -> 4.0), instead of scattering them
	over multiple releases after 4.0. So only one porting is needed,
	and API can be kept more stable over the coming releases.

	General:
	- "get" verb added to the names of nearly all getter methods; notable
	   exceptions are STL-like names like size(), empty(), length(),
	   end(), str(), c_str(); par() and gate() methods of cModule;
	   boolValue(), longValue(), stringValue() etc methods of cPar
	   (already consistent with Java); info(), detailedInfo();
	   intRand(), dblRand() and other cRNG methods.
	   Methods returning bools begin with "is", "has", "contains" or a
	   similar verb. [Change decided by voting on the mailing list]

	- <omnetpp.h> now provides the C99 integer types and limit macros,
	  even on systems that don't have <stdint.h> (for example, MSVC does
	  not have it). This includes int8_t, uint8_t,..int64_t, uint64_t types;
	  INT8_MAX, UINT64_MAX, etc. In addition, it also provides shorter names
	  (int8, uint8,...); they are provided as macros, so if they collide
	  with definitions in some external code, they can be undefined after
	  including <omnetpp.h>.

	Simulation time:
	- simtime_t is now not double but class SimTime (64-bit fixed point number)
	- simtime exponent is base 10, and set globally
	- there is no implicit conversion from SimTime to double. However,
	  to alleviate this pain, at many places overloaded functions have
	  been added that take simtime_t.
	- simtimeToStr(), strToSimtime() are no longer (use SimTime methods
	  instead, or the compatibility macros described below!)
	- simTime() was moved out of the cSimpleModule class: it became a global
	  function which delegates to simulation.getSimTime()

	Simtime compatibility mode:
	- if needed, the simkernel can be compiled with simtime_t = double.
	  For that, compile everything with USE_DOUBLE_SIMTIME defined
	  (add -DUSE_DOUBLE_SIMTIME to CFLAGS). If you want to ensure that
	  models compile with both int64-based and double simtime_t, use
	  the following macros to convert simtime_t from/to double and string:
	  SIMTIME_STR(t), SIMTIME_DBL(t), STR_SIMTIME(s), SIMTIME_TTOA(buf,t).
	  MAXTIME is also defined correctly for both simtime types.

	Converting source code to the new int64-based simtime_t:
	- for the large part, code is supposed to compile without much change
	- most errors come from using "double" variables which should really be
	  "simtime_t". E.g. if you see variables like double timeout, double
	  interval, double age, etc, they should all be changed to simtime_t.
	  This applies to message fields within .msg files as well: some of
	  the "double" ones may need to be changed to "simtime_t".
	- when conversion to double is still needed, use SIMTIME_DBL(t) or t.dbl().
	- ev << simtimeToStr(t) is to be changed to: ev << t;

	Gate handling:
	- introduced inout gates, which resulted in some changes listed below
	- with inout gates, gate("gatename") does not work, use gate("gatename$i")
	  or gate("gatename$o") instead
	- if a gate vector is zero size, there's no cGate object for it at all.
	  But hasGate(), gateType(), isGateVector(), gateSize() do work.
	- for gate direction, use the new cGate::Type enum instead of the
	  'I' and 'O' characters (though characters continue to work)
	- setGateSize() return type changed from int to void (when resizing an
	  inout gate, it would have to return the two ids)
	- addGate() return type changed to void (when an inout gate is created,
	  it would have to return two cGate* pointers)
	- gate("xxx") now throws error if gate is not found, instead of returning NULL
	- gate("xxx") now won't return gate "xxx[0]"
	- gate("out")->size() does not work, because gate("out") throws an error
	  ("not found") if "out" is a vector gate; gate("out",0)->size() will work,
	  but only if out[] is of nonzero size (otherwise you'll get the "gate out[0]
	  not found" error). Best is to use gateSize("out"), a cModule member function.
	- removed setTo(), setFrom() methods; use connectTo() instead!
	- isRouteOK() renamed to isPathOK()
	- fromGate()/toGate() renamed to getPreviousGate()/getNextGate()
	- sourceGate()/destinationGate() renamed to getPathStartGate()/getPathEndGate()
	- dynamic gate creating changed:
	    - removed cGate::setOwnerModule() and setIndex()
	    - now there is addGate() and setGateSize()
	- to help connecting gate vectors, two utility methods were added:
	    - getOrCreateFirstUnconnectedGate()
	    - getOrCreateFirstUnconnectedGatePair()
	- added setDeliverOnReceptionStart() flag, which may be invoked only on
	  simple module input gates. It defines whether a packet that travelled
	  through a channel with datarate (i.e. has nonzero duration) is
	  delivered to the module at the time reception begins, or when
	  reception ends. (In OMNeT++ 3.x, only the latter option was
	  available).
	- added getTransmissionChannel() which returns *the* transmission
	  channel in the path
	- transmissionFinishes() renamed to getTransmissionFinishTime()
	- gates that have the @loose or @directIn property set in the NED file
	  may remain unconnected (ie no error will be raised, even if
	  "allowunconnected" is not specified in the connections section)

	Channels:
	- channels became first-class citizens: they have a common base class
	  (cComponent) with cModule, they participate in the initialize()/
	  finish() protocol, and so on.
	- cBasicChannel renamed to cDatarateChannel
	- added calculateDuration(cMessage *msg) method into channels
	- removed delay(), setDelay(), error(), setError(), dataRate(),
	  setDataRate() methods from cGate: please use methods from the gate's channel
	  instead: check_and_cast<cDatarateChannel *>(gate->channel())->setDelay(0.1);
	  or use generic component parameter access instead: gate->channel()->par("delay")=0.1.
	- "error" parameter renamed to "ber" (bit error rate or BER, cDatarateChannel methods
	  getBitErrorRate/setBitErrorRate)
	- added "per" parameter (packet error rate or PER, cDatarateChannel methods
	  getPacketErrorRate/setPacketErrorRate)
	- added cIdealChannel which lets messages through without any change
	  and without any delay.
	- getFromGate() renamed to getSourceGate()
	- breaking change in cDatarateChannel behaviour: implicit queueing is
	  no longer supported: sending on a busy gate (that is, when simTime() <
	  gate->transmissionFinishTime()) results in an error. Thus, using a
	  special transmitter module (with an internal queue) is now sort of
	  mandatory when channels with data rate are in use.
	- setting channel parameters from the ini file:
	   (1) make the parameter input, e.g.:
	         a.out --> { delay=default(0); } --> b.in;
	   (2) add <fromgate-fullpath>.channel.<paramname> = <value> into the ini file, e.g.:
	         **.a.out.channel.delay = 10ms
	- now a connection path may only contain one cDatarateChannel (more precisely,
	  only one channel whose isTransmissionChannel() method returns true)
	- likewise, a sendDirect() call with nonzero duration may only be sent onto
	  a gate whose connection path does NOT contain any cDatarateChannel (or
	  channel whose isTransmissionChannel() method returns true)

	Dynamic module/channel creation:
	- finalizeParameters() must be called (for channels, this reads input params from omnetpp.ini;
	  for modules, also creates gates [since gate vector sizes may depend on parameter values])

	Exception handling changed:
	- now all our exceptions subclass from std::exception (e.g. cException extends std::exception)
	- exceptions are now thrown by value not by pointer (s/throw new/throw/g)
	- hint: catch std::exception if you don't need the exception to be of a specific type

	DisplayString:
	- parse() no longer interprets literal "\t", "\n" escape sequences; it is the job of the
	  NED or C++ compiler to convert those to 0x09, 0x0a etc. "\;", "\=", "\," can still be
	  used to escape those special characters, but they have to be entered into the NED or C++
	  source with *double* backslashes like "t=hello\\,world" (one will be eaten by the NED/C++
	  compiler, the other by the display string parser).
	- parse() now throws an error if the display string has invalid syntax. It used to return
	  a boolean which no one checked.

	cOutVector:
	- removed half-hearted tuple=2 support from cOutVector and underlying infrastructure
	- added methods for metadata annotation: setEnum(), setUnit(), setType(),
	  setInterpolationMode(), setMin(), setMax()

	cQueue:
	- head()/tail() removed, back()/front() added (insert at back, pop from front!);
	  because of head/tail change, iterator direction and meaning of insertBefore/insertAfter
	  has changed
	- boolean flag to specify ascending/descending order removed (because the
	  earlier default ascending=false was inconvenient, and silently changing
	  the default is not a good idea)
	- compat.h typedef cQueueIterator removed, as iterator semantic was changed in a
	  non-compatible way anyway

	New class: cPacketQueue

	cArray:
	- items() became size()

	Display strings:
	- connection display string is now stored in the channel, not the source gate
	- setDisplayString() methods removed
	- displayString() delegates to channel()->displayString(); if there's
	  no channel, it creates a cIdealChannel
	- module and channel display string access functions are now in the common
	  base class, cComponent
	- display string objects are now only created (from @display) when first accessed

	Gross renaming: cObject became cOwnedObject, cPolymorphic became cObject;
	- cNamedObject introduced in between.
	- cArray, cQueue still handle cObject (old cPolymorphic), i.e. they can work
	  with non-owned objects as well

	Introduced cComponent, a common base class for cModule and cChannel
	- new methods to mention: isModule(), nedTypeName(), etc
	- final garbage object collection can be turned on per module, by
	  invoking setPerformFinalGC(true)

	cSimpleModule, cSimulation:
	- removed: pause(), backtomod, pause_in_sendmsg (they were obsolete)
	- removed: breakpoint(), and its callback method in cEnvir, in Tkenv, etc..
	- sendDirect(): added overloaded methods that accept transmissionDelay as well
	- cancelEvent() now only allows cancelling self-messages

	cModule:
	- removed backgroundDisplayString()/setBackgroundDisplayString() and its compat
	  #defines displayStringAsParent() and setDisplayStringAsParent()
	- added isPlaceholder() to cModule
	- cPlaceHolderModule: renamed to cPlaceholderModule (lowercase h)
	- gate handling reorganized, so that gate IDs are stable (do not change
	  when the gate vector gets resized). Gate IDs are now interpreted as a
	  bitfield, so they cannot be used for iterating over all gates of a
	  module; cModule::GateIterator was introduced for this purpose.
	- gates() removed, as gate IDs are no longer integers in the 0..gates()-1
	  interval (use the new cModule::GateIterator for enumerating the gates).
	- added gateNames() method
	- className() for cModule (or cComponent in general) no longer lies
	  the NED type name, but returns the real C++ class name

	cMessage changes:
	- the length, bit error flag and encapsulated message cMessage fields
	  got factored out from cMessage, into the cPacket class (which extends
	  cMessage). All network packets (frames, datagrams, etc) are now
	  supposed to be subclassed from cPacket, not directly cMessage.
	  To port simulations into 4.0, in message descriptions (.msg files)
	  change relevant "message" keywords to "packet" (this will cause
	  the base class to be cPacket), and use casts to convert cMessage* to
	  cPacket* where needed: cPacket *pkt = check_and_cast<cPacket *>(msg).
	  We hope that on the long run this change will result in clearer code
	  in simulation models. To help porting, it is possible to compile
	  everything in a "backward compatibility mode" when cPacket is
	  just an alias to cMessage, and cMessage contains all fields.
	  For that, compile everything having WITHOUT_CPACKET defined
	  (add -DWITHOUT_CPACKET to CFLAGS).
	- the C++ type for message kind and priority changed from "int" to
	  "short", and priority was renamed to scheduling priority (methods
	  setSchedulingPriority/getSchedulingPriority)
	- added some extra fields required by sequence chart drawing: cause event
	  number, message id, message tree id, etc.
	- removed two static methods of limited usefulness: cmpbydelivtime(),
	  cmpbypriority().

	cPacket:
	- existing obsolete fields (protocol and pdu codes) were removed
	- the length, bit error flag and encapsulated message fields were moved
	  from cMessage into cPacket
	- methods associated with "length" got renamed, new method names are:
	        getBitLength(), setBitLength(), addBitLength()
	- length changed from long to int64 (reason: message length was limited
	  to 2 gigabits=256 megabytes on 32-bit architectures).
	  Affected functions:
		setLength() / setByteLength() / addLength() / addByteLength()
	        length() / byteLength()
	- added getDuration() and isReceptionStart() methods, which are related
	  to the last send over a channel with datarate, and to cGate's
	  deliverOnReceptionStart flag.

	Message parameters:
	- deprecated; type changed: cMsgPar instead of cPar
	- cMsgPar is the same as the old cPar, but features which are not needed for message parameter objects have been removed:
	  - removed support for interactively prompting the user for a value: input flag, prompt, read() method
	  - removed indirection (redirection) support
	  - removed support for storing expressions

	recordScalar() methods (cSimpleModule, cStatistic):
	- added optional "const char *unit" argument to all respective methods
	- cStatistic::recordScalar() renamed and split to record(), recordAs() and recordWithUnit()
	- cSimpleModule::recordScalar() methods moved to cComponent
	- see also: **.param-record-as-scalar = true

	cMessageHeap:
	- renamed getFirst() to removeFirst(), and get(cMessage*) to remove(cMessage*)

	cPar implementation changed

	cPar, etc:
	- setFromText() -> parse()
	- getAsText() -> str()
	- also cDisplayString: getString() -> str() (old getString() deprecated)
	NOTE: inconsistency with INET Framework: IPAddress, IPv6Address, MACAddress: str()

	cEnvir refactoring:
	- motivation: break sim_std.dll dependence on envir.dll (mainly the
	  "ev" global variable)
	- "ev" is no longer a variable, but a macro which expands to (*evPtr)
	- cEnvir no longer subclasses from std::ostream, but instead redirects
	  all ev<< calls to an internal std::ostream instance
	- cEnvir is no longer a concrete class, but an abstract base class with
	  lots of pure virtual methods
	- removed puts(const char *) and gets(const char *)

	cCommBuffer:
	- added pack/unpack methods for int64
	- array packing methods now take const pointers
	- doPacking()/doUnpacking() methods moved out of opp_msgc-generated
	  code into the simkernel headers (packing.h, included by omnetpp.h)

	Misc:
	- cBag class removed

	- global connect() function removed (use cGate::connectTo() instead!)

	- global findXXX(const char *name) functions turned into static cXXX::find(const char *name);
	   - findLink()
	   - findFunction
	   - findEnum
	   - findChannelType
	   - findNetworkType()
	   - findModuleType()

	- cModuleType::buildInside(mod) became protected (was deprecated anyway)

	- cModule: deprecated methods phase(), setPhase() removed

	- removed writeContents() altogether

	- removed min(double,double), max(double,double), equal(double,double,double).
	  Use std::min and std::max instead.

	- snapshot file became XML

	- deprecated cSubmodIterator -- use cModule::SubmoduleIterator instead! cModule::ChannelIterator also added

	- cSimpleModule::end() -- removed, as there was little value in it. To terminate
	  an activity() module, simply return from the activity() method, or call the new
	  halt() method to end the module while preserving the local variables for inspection.

	- added cSimpleModule::halt()

	- cSimpleModule::deleteModule() -- in handleMessage()-based modules, this no longer
	  throws exception. That is, execution will continue normally after the deleteModule() call.

	- removed cSimpleModule::moduleState()

	- covariant return types for dup(). This might cause incompatibility with customized message
	  classes (.msg file with customize=true). The hand-coded class still contains cPolymorphic*
	  return type not the real class type, which results in error messages like:
	     ../Transport\TCP\TCPSegment.h(68) : error C2555: 'TCPSegment::dup': overriding virtual function
	     return type differs and is not covariant from 'TCPSegment_Base::dup'
	  Fix: change dup()'s return type to the real class.

	- several internal classes got removed/reorganized

	- cPar: new method stdstringValue() / operator std::string: this must be used with "volatile string" params

	- removed macros Min() and Max(), use std::min/std::max instead (<algorithm>);
	  also removed sgn()

	- cStringTokenizer: added asIntVector() and asDoubleVector() methods; TODO testing

	- cXMLElement, xmldoc(): mini-XPath expressions made more tolerant to whitespace

	Configuration handling rewritten, including cConfiguration.

	Run number handling:
	- run numbers were made entirely the matter of cEnvir. cSimulation::runNumber()
	  got removed. Also removed runNumber from the arg list of cEnvir callback
	  functions.

	Removed several obsolete functions:
	- calls to myxxx() functions should be replaced with opp_xxx() in the code:
		myrandomize(...)
		genk_myrandomize(...)
		mystrdup(...)
		mystrcpy(...)
		mystrcmp(...)
		mystrmatch(...)
		fastconcat(...)
		indexedname(...)
	- calls to genk_xxx() functions should be replaced with their "genk_"-less
	  counterparts  (and the first arg dropped or moved to the last place):
		genk_uniform(double gen_nr, double a, double b);
		genk_intuniform(double gen_nr, double a, double b);
		genk_exponential(double gen_nr, double p);
		genk_normal(double gen_nr, double mean, double variance);
		genk_truncnormal(double gen_nr, double mean, double variance);
	- other:
	        correct(const char *) got renamed to opp_nulltoempty(const char *)

	Statistics classes:
	- cStatistic: renamed samples() to count(). This affects cStdDev,
	  cWeightedStdDev and basically all statistics classes (they all
	  inherit from cStatistic)
	- cWeightedStdDev: implemented stddev(); also fixed min() and max()
	  (they bogusly returned min/max of the weight*value products).
	  For stddev(), code is based on the patch from Peter Woitek.
	- cStatistic: added 3 new functions, to access values underlying weighted
	  statistics: weightedSum(), sqrSumWeights(), weightedSqrSum()
	- cStatistic: added isWeighted()
	- cStatistic: added merge(cStatistic *) for aggregating statistics,
	  and implemented it in subclasses
	- cDensityEstBase etc: transformed() renamed to isTransformed();
	  added setCellSize()
	- cLongHistogram: revised the way histogram cells are set up. Now it
	  throws an error if all given constraints cannot be satisfied (so that
	  numCells*cellSize==rangeMax-rangeMin, all integers)

	cTopology changes:
	- added extractFromNetwork(Predicate*), to support specifying conditions
	  in a type-safe way (without void* casts)
	- extractByModuleType() not longer exists, use the new extractByNedTypeName()
	  method instead. Code like
	    topo.extractByModuleType("Host", "Router", NULL);
	  should be replaced by something like
	    topo.extractByModuleType(cStringTokenizer("Host Router").asVector());
	- extractByParameter() arg list changed

	Files renamed (Note: simulation models should only refer to <omnetpp.h>!)
	     --OLD--          --NEW--
	     cconfig.h        cconfiguration.h
	     chist.h          chistogram.h
	     cllist.h         clinkedlist.h
	     cmsgheap.h       cmessageheap.h
	     coutvect.h       coutvector.h
	     cstat.h          cstatistic.h
	     cdensity.h       cdensityestbase.h
	     cstrtokenizer.h  cstringtokenizer.h
	     ctopo.h          ctopology.h
	     cfunction.h      cmathfunction.h
	     csimul.h         csimulation.h
	     ...

	* MSVC 6.0 support dropped (the compiler is over 10+ years old, and
	does not support many modern C++ features like covariant return types)

	* VC++ libs compiled with /MT (mulTithreaded C lib) with VC7.1 as well

	* out-of-directory build, and other Makefile changes

2008-02-24  Andras Varga

	* merged last diffs from head of the 3.x branch

2006-12-04  Andras Varga

	* added hasher.h, for cHasher to calculate simulation fingerprints

	* csimul.h: added method hasher() to provide access to fingerprint
	calculation for simulation models.

2006-11-15  Andras Varga

	* compat.h: removed some very old compatibility #defines

2006-11-12  Andras Varga

	* several methods and classes already marked as DEPRECATED in their
	documentations and doc/API-Changes.txt are now marked as such with GCC's
	__attribute__((__deprecated__)) facility, which results in warnings
	during compilation of code that uses them. Those pieces of code need
	to be changed in order to be compatible with future OMNeT++ versions.
	MSVC equivalent is __declspec(deprecated).

	* defs.h: added _OPPDEPRECATED macro

2006-11-07  Andras Varga

	* cDensityEstBase: added cellInfo() method

2006-11-06  Andras Varga

	* internal class cStructDescriptor refactored and renamed to cClassDescriptor

2006-10-21  ------ omnetpp-3.3 released ------

2006-09-13  Andras Varga

	* cconfig.h: getAsFilenames() enhancement: if directory name contains
	spaces, adds quotation marks.

	* cconfig.h: added getAsFilename()

2006-03-19  Andras Varga

	* csimul.h: added method guessNextEvent() for use from Tkenv.

2006-03-15  Andras Varga

	* distrib.h: fixed a documentation bug and refined description of
	gamma_d() [feedback from Patrick McDonnell]

2006-02-27  Andras Varga

	* cenvir.h: added getParsimProcId() and getParsimNumPartitions()

	* crng.h: added parsimProcId and parsimNumPartitions to the args of
	cRNG::initialize(), as every partition should get different random
	number streams

2006-01-12  ------ omnetpp-3.2p1 released ------

2006-01-10  Andras Varga

	* platdep/time.h, platdep/socket.h: made it possible to choose between
	winsock.h and winsock2.h

2005-10-27  Andras Varga

	* csimul.h: setSimTime() added (internal use only!), needed for SystemC
	integration support

2005-10-19  ------ omnetpp-3.2 released ------

2005-10-09  Andras Varga

	* cpar.h: added conversion to/from short and unsigned short [patch
	from Omer Sinan Kaya]

2005-09-15  Andras Varga

	* csimplemodule.h: added method cancelAndDelete(cMessage *msg),
	for use in simple module destructors.

2005-09-14  Andras Varga

	* cpolymorphic.h, cobject.h, etc: dup() moved up to cPolymorphic, and
	return type changed to cPolymorphic. Once we drop MSVC 6.0 support,
	return types can be changed to class itself, i.e. in class Foo it can
	be defined as Foo *dup(). Unfortunately MSVC 6.0 doesn't support this.

	* cmodule.h, csimplemodule.h, ctypes.h, macros.h: signature of module
	constructors simplified, from
	    cModule(const char *name, cModule *parent) and
	    cSimpleModule(const char *name, cModule *parent, unsigned stack)
	to
	    cModule() and
	    cSimpleModule(unsigned stack=0)
	The purpose is to ease writing constructors, e.g. for a handleMessage()
	module class "PacketSink : public cSimpleModule", the constructor is
	just
	    PacketSink() {}
	instead of the former
	    PacketSink(const char *name, cModule *parent) :
	       cSimpleModule(name, parent, 0) {}

	Backwards compatibility: module classes using Module_Class_Members()
	(95%) are not affected. For module classes using hand-coded
	constructors, adding NULL as a default value to the "name" and "parent"
	ctor arguments will make the class work with both OMNeT++ 3.2 and
	earlier versions:
	    PacketSink(const char *name=NULL, cModule *parent=NULL) :
	       cSimpleModule(name, parent, 0) {}
	This affects very few modules, e.g. two in the current INET Framework
	release.

	Motivation: since cleanup-time garbage collection is off by default
	in OMNeT++ 3.2, users are encouraged to write proper destructors.
	However, destructors can only be written if constructors set pointer
	members of the class to NULL. (This is currently customarily done
	in the initialize() method; however, pointers must be initialized
	to NULL even if initialize() doesn't get called due to a runtime error
	earlier in another module's initialize(), otherwise the destructor will
	crash.) The Module_Class_Members() macro (currently used in 95% of
	the cases) defines an empty constructor, one cannot put statements
	into it -- so one must use hand-coded constructors. The new signature
	of constructors makes it possible to write much more compact code,
	and will make it more comfortable for users.

2005-09-12  Andras Varga

	* cxmlelement.h: several members of cXMLElement made const

	* cstrtokenizer.h: added hasMoreTokens() method

	* cenvir.h: added undisposedObject() method

2005-08-07  Andras Varga

	* cxmlelement.h: the builtin mini-XPath interpreter now understands
	parameters inside predicates, i.e. the following is valid syntax:
	"element[@attr=$PARAM]". Before, only literals were allowed, like
	"element[@attr='something']". Parameters values are supplied by
	a resolver object (cXMLElement::ParamResolver) which can be programmed
	by the user and passed into the mini-XPath evaluator.

	* cmessage.h: implemented reference counting of encapsulated messages.
	This should dramatically increase performance of wireless simulations
	where lots of message duplication is done (AirFrames) with most copies
	discarded without looking into them (noisy channel or wrong L2 dest
	address). There' nominal (<1%) performance penalty for other
	simulations.

2005-07-25  Andras Varga

	* coutvect.h: made it possible to record values into output vectors
	by a timestamp other than simTime(): added recordWithTimestamp()
	functions to cOutVector. (Increasing timestamp order must still be
	ensured.)

	* cmodule.h: modules can now get notified when a module parameter
	changes, by redefining the handleParameterChange(const char *parname)
	virtual	method of cModule.

	* ccommbuffer.h: moved packObject(), unpackObject(), checkFlag(),
	isNull() (renamed to packFlag) into cCommBuffer.

2005-07-24  Andras Varga

	* cdispstr.h: added setTagArg() method for numeric (long) argument as
	well. (Just converts it to string and calls the other setTagArg()).

	* cpar.h: added isConstant() member to cPar

	* cmessage.h: added cModule *senderModule() to cMessage

	* cmessage.h: if "vector" is a vector gate, msg->arrivedOn("vector")
	now checks if msg arrived one of the vector's gates. [hint from Ignacio
	Arenas Jimenez]

	* cxmlelement.h: added getFirstChildWithTagName(const char *tagname)
	and getNextSiblingByTagName(const char *tagname) to cXMLElement

	* envirext.h: added flush() to cOutputVectorManager and cOutputScalar-
	Manager classes

2005-07-23  Andras Varga

	* cwatch.h: WATCH() implementation changed: now anything can be watched
	that has operator<<. If it also has operator>> and it gets watched via
	WATCH_RW(), it can also be modified from the GUI. Objects and pointers
	to objects can also be watched with WATCH_OBJ() and WATCH_PTR().

	* added cstlwatch.h: macros WATCH_VECTOR(), WATCH_PTRVECTOR, etc

2005-07-09  Andras Varga

	* platdep/time.h: added opp_asctime() which produces string
	representation of time time in "yyyy-mm-dd hh:mm:ss" format

2005-06-25  Andras Varga

	* cpar.h: added default value to type parameter of setFromText().

2005-04-28  Andras Varga

	* cmessage.h: added byteLength(), setByteLength(), addByteLength()
	convenience functions. They just invoke the length(), setLength(),
	addLength() methods.

2005-04-21  Andras Varga

	* util.h: added simtimeToStrShort().

2005-04-04  Andras Varga

	* cenvir.h: fixed compilation bug in gcc3.4. For some obscure reason,
	in template classes gcc 3.4 seems to insist on fully qualifying calls
	to methods from the base class. This does not appear to make much
	sense, and indeed was not a problem with gcc<3.4, vc6.0 or vc7.1,
	and even gcc3.4 is willing to compile the old code if run with
	the -fpermissive option. Oh well...

2005-03-31  ------ omnetpp-3.1 released ------

2005-03-22  Andras Varga

	* cenvir.h: cEnvir::getParameter() return type changed from
	const char * to std::string. This was needed because if the
	parameter value contains the xmldoc() function, getParameter()
	will modify the file name in it to make it relative to the
	position of the ini file the setting was read from.

2005-03-18  Andras Varga

	* cconfig.h: added getBaseDirectoryFor() and getLocation() functions
	to cConfiguration

	* added cstrtokenizer.h, which contains cStringTokenizer

2005-03-17  Andras Varga

	* cscheduler.h: added method executionResumed() to cScheduler and
	cRealtimeScheduler

	* cstruct.h, ctypes.h: constructor usage patches to satisfy gcc 3.3.5
	[reported by Tom Parker]

2005-03-15  Andras Varga

	* cexception.h: added cRuntimeError

2005-02-24  Andras Varga

	* added missing 	- declarations to several classes and functions

2005-01-10  Andras Varga

	* create platdep/ subdirectory

	* cscheduler.h: added cRealTimeScheduler class, added startRun(),
	endRun() virtual functions to cScheduler

2004-12-29  ------ omnetpp-3.0 released ------

2004-12-22  Andras Varga

	* chist.h: cLongHistogram: if number of cells is not specified,
	it will be determined automatically from the range (more info in class
	doc)

2004-12-19  Andras Varga

	* cstruct.h: added baseclassname, baseclassdesc

2004-12-16  Andras Varga

	* cobject.h: setName() made virtual (needs to be overridden in cModule)

	* cmodule.h: added lastsubmodp (speeds up insertSubmodule())

	* cenvir.h: removed ev.getDisplayString() with no replacement

2004-12-10  Andras Varga

	* csimul.h: added getUniqueNumber(), for generating unique IDs for
	models

2004-12-08  Andras Varga

	* cenvir.h: added getParameterUseDefault() to support omnetpp.ini's
	<paramname>.use-default=yes option

2004-11-27  Andras Varga

	* added cvisitor.h, nearly all files changed: old forEach(do_fn)
	changed	to forEachChild(cVisitor *) (Visitor pattern)

2004-11-25  Andras Varga

	* cmodule.h: displayStringAsParent() renamed to backgroundDisplay-
	String() (compatibility #define added)

	* cchannel.h: cSimpleChannel renamed to cBasicChannel (compatibility
	#define added)

2004-11-23  ------ omnetpp-3.0b1 released ------

2004-11-18  Andras Varga

	* index.h: title page change; adjustments in doxygen comments in other
	headers

2004-11-03  ------ omnetpp-3.0a9 released ------

2004-11-02  Andras Varga

	* csimplemodule.h: expanded scheduleAt() comment, to call attention
	to related methods.

2004-10-25  Andras Varga

	* added crng.h

	* cenvir.h: added methods int numRNGs() and cRNG *rng(int k), which
	allow access to the RNGs. The concept is that there are a number
	of RNGs available for the simulation, numbered globaly 0..N.
	Every module uses one or more RNGs identified with "module-local RNG
	numbers", and every local RNG number maps to a global RNGs -- and you
	can specify the mapping. Thus e.g. several module types can all work
	with RNG 0 (local RNG number), and you map some modules to physical
	RNG 0, others to physical RNG 1, and so on.

	* cenvir.h: added getRNGMappingFor(cModule *) which sets up the mapping
	in the given module

	* cmodule.h: added cRNG *rng(int k) which returns the RNG of the given
	local RNG number. This function maps k to a physical RNG number and
	calls ev.rng(k) with it.

	* random.h: following symbols and functions were removed because they
	didn't fit into the new architecture:
	#define NUM_RANDOM_GENERATORS -- this is now an omnetpp.ini setting
	#define INTRAND_MAX -- see cRNG::intRandMax()
	int testrand() -- see cRNG::selfTest()
	long opp_nextrand(long& seed) -- no replacement
	void opp_randomize() -- no replacement
	long randseed() -- no replacement (Mersenne Twister state is >32 bits!)
	long randseed(long seed) -- no replacement (seeding from C++ not supported)
	long intrand() -- see cRNG::intRand()
	void genk_opp_randomize(int gen_nr) -- no replacement (see above)
	long genk_randseed(int gen_nr) -- no replacement (see above)
	long genk_randseed(int gen_nr, long seed) -- no replacement (see above)
	long genk_intrand(int gen_nr) -- see cRNG::intRand()

2004-10-25  Andras Varga

	* all files: void info(char *buf) changed to std::string info() const
	-- new signature is both safer (no danger of accidental buffer overrun)
	and easier to use.

	* cpolymorphic.h, cobject.h, cgate.h, cmodule.h, etc: fullPath()
	return value changed from const char* to std::string. The previous
	version produced the string in a static buffer which was inherently
	dangerous. POTENTIAL INCOMPATIBILITY: fullPath() calls in sprintf(),
	ev.printf(), new cException() etc calls should be changed to
	fullPath().c_str(). (ev<< statements are not affected because ev can
	handle std::string just as well as const char *).

	Note: fullPath(char *buffer, int maxlen) still exists.

2004-10-04  ------ omnetpp-3.0a8 released ------

2004-09-24  ------ omnetpp-3.0a7 released ------

2004-09-15  Andras Varga

	* ctopo.h: added two utility functions to cTopology:
	void extractByModuleType(const char **types)
	void extractByModuleType(const std::vector<std::string> types)

2004-08-11   Andras Varga

	* cmessage.h: changed default length of cMessage to zero (was 1)

2004-07-22  ------ omnetpp-3.0a6 released ------

2004-07-10   Andras Varga

	* cmodule.cc: added ev_enabled to cModule -- this makes it possible
	to select in Cmdenv which modules' output you want to see.

	* csimul.h,util.h: added cSimulation::contextType() to make it
	available from Envir what a module's doing (CTX_INITALIZE, CTX_EVENT,
	CTX_FINISH, etc)

2004-07-05   Andras Varga

	* csimplemodule.h, cenvir.h, envirext.h: recordScalar() functions for
	text and cStatistic data removed. A cStatistic object can be recorded
	into the scalar file by calling its recordScalar() method (below).

	* cstat.h: added recordScalar() method.

2004-06-24  Andras Varga

	* cpar.h: added type M (XML element) to cPar. New methods:
	setXMLValue(cXMLElement*), cXMLElement *xmlValue(), op=(cXMLElement*),
	op cXMLElement*().

2004-06-22  Andras Varga

	* added cxmlelement.cc

2004-06-17  Andras Varga

	* added cconfig.h: contains cConfiguration, an abstract base class
	for configuration managers. cConfiguration makes it possible to
	use different sources than omnetpp.ini, e.g. database or XML.
	See ChangeLog in src/envir.

	* cenvir.h: added method cConfiguration *config(). This lets e.g.
	scheduler classes (see cScheduler) have entries in omnetpp.ini.

2004-06-07  ------ omnetpp-3.0a5 released ------

2004-05-15  ------ omnetpp-3.0a4 released ------

2004-05-10   Andras Varga

	* carray.h,cllist.h: discouraged use of classes cBag and cLinkedList.
	STL classes such as std::vector, std::list or std::deque are
	recommended instead.

2004-04-20   Andras Varga

	* cobject.h, cpolymorphic.h: moved createDescriptor() into cPolymorphic

2004-04-13   Andras Varga

	* cenvir.h: added method bool cEnvir::disabled(); returns true when
	ev<< output is disabled (e.g. Express mode) so executing ev<< is
	a waste of CPU cycles. To save CPU cycles, one can write code like:
	   if (!ev.disabled())
	       ev << "Packet " << msg->name() << " received\n";
	or (not that ?: binds looser than <<!!!):
	   #define EV  ev.disabled()?ev:ev
	   EV << "Packet " << msg->name() << " received\n";

	* cmessage.h: added possibility to attach a "control info" object
	(cPolymorphic*) to cMessage. Purpose: communication between protocol
	layers. New methods: setControlInfo(), removeControlInfo(),
	controlInfo().

2004-03-22  ------ omnetpp-3.0a3 released ------

2004-03-20   Andras Varga

	* ccommbuffer.h, cparsimcomm.h: moved here from src/sim/parsim.

2004-03-10   Andras Varga

	* cenvir.h: use std::ostream as base class for cEnvir. ev<< works
	exactly as with any C++ stream now (stream manipulators can be used,
	etc). Also, there are no bounded buffers along the data path, so
	outputting arbitrarily long strings are supported. (Except in
	ev.printf(), but as of 2004, one shouldn't feel much temptation to
	use it.)

	Users should change custom << operators written for cEnvir to use
	std::ostream instead. Leaving cEnvir<< will continue to work,
	but ostream<< is just more useful.

	* cenvir.h: removed stream input ev>> operators, and also the methods
	askf(), prompt(), setprompt(). gets() was retained for now, but added
	an overloaded equivalent which stores input in std::string.

	cpar.h: changed void getAsText(char *buf, int bufsize) functions to
	std::string getAsText().

2004-03-08   Andras Varga

	* cobject.h, cpolymorphic.h: defined fullName() and fullPath() in
	cPolymorhpic as empty virtual functions (return "") which cObject
	redefines. check_and_cast<> argument type changed from cObject* to
	cPolymorphic*.

2004-03-06   Andras Varga

	* cobject.h, cpolymorphic.h: several changes:
	- info() method moved to cPolymorphic
	- buffer size for info() now explicitly declared as MAX_OBJECTINFO
	- new method detailedInfo() added to cPolymorphic -- this method
	  is allowed to produce a more verbose, multi-line description of
	  the object. Support for displaying it will be built into Tkenv.
	  Can be used to display internal tables (routing table, ARP cache,
	  etc) and other data structures.
	- default writeContents() implementation changed to use detailedInfo()
	- writeTo() method made "internal"

	* util.h, opp_string.h: opp_string changes:
	- created separate header opp_string.h
	- added c_str(), empty() methods for similarity to std::string
	- removed const char* conversion -- it was often tested against NULL
	  to see if string was empty, and caused confusion. c_str() never
	  returns NULL.

2004-03-03  ------ omnetpp-3.0a2 released ------

2004-03-01  Andras Varga

	* ctypes.h,macros.h: createOne() return value changed from void* to
	cPolymorphic* so that it can be used with type safety. Only classes
	derived from cPolymorphic can be registered using Register_Class().

	* envirext.h: classes cScheduler, cOutputVectorManager,
	cOutputScalarManager, cSnapshotManager are now subclassed from
	cPolymorphic.

	* cobject.h, cpolymorphic.h: cPolymorphic removed from cobject.h and
	placed into its own header file.

2004-02-23  Andras Varga

	* cmodule.h: added changeParentTo() to cModule.
	* cenvir.h: added moduleReparented() to cEnvir.

2004-02-22  Andras Varga

	* cmodule.h: added gateSize() to cModule.

2004-02-20  Andras Varga

	* ctype.h, cchannel.h, cgate.h: introduced cChannelType which replaces
	cLinkType. cChannelType is a lot more flexible since its factory
	method create() allows creating channels of any class, not just
	cSimpleChannel. Custom channel behaviour can thus be implemented
	by authoring an own channel class and registering it via an
	appropriate cChannelType and the Define_Channel() macro.

2004-02-12  Andras Varga

	* cgate.h, cchannel.h: gave a bool return value to deliver(), "false"
	meaning that message object should be deleted.

2004-02-11  Andras Varga

	* csimul.h, cscheduler.h: semantic change in getNextEvent()'s and
	selectNextModule()'s return value: NULL now means that the scheduler
	got interrupted by the user while it was waiting (typically with parsim
	or real-time sim).

2004-02-09  Andras Varga

	* cexception.h: added storage of module class name (NED type name)

2004-02-09  Andras Varga

	* ctypes.h: added methods to cModuleInterface so that it's possible
	to dynamically assemble it (needed by networkbuilder)

2004-02-07  Andras Varga

	* ctypes.h: added createOneIfClassIsKnown(const char *classname)
	function

2004-02-06  Andras Varga

	* cgate.h: added cGate::disconnect(); revised cGate::connectTo()

	* cchannel.h: added setDelay(double), setError(double),
	setDatarate(double) to cSimpleChannel

2004-02-04  ------ omnetpp-3.0pre1 released ------

2004-01-09  Andras Varga

	* cenvir.h: added bubble() to cEnvir

	* cenvir.h: added overloaded "<<" operator for printing object pointers
	and references (cObject*, const cObject*, cObject&, const cObject&).
	It prints the class name and the full name, like "(cMessage)hello".

2004-01-06  Andras Varga

	* cenvir.h: added isGUI()

	* display string manipulation made a lot easier: displayString() now
	returns a cDisplayString which can be changed with its own member
	functions: insertTag(), setTagArg(), removeTag(), etc.
	Example: coloring the icon: displayString().setTagArg("i",1,"cyan").
	setDisplayString() got deprecated -- there's really no need for it
	any more.

	* cGate became 8 bytes (2 pointers) smaller: notify_inspector and
	data_for_inspector members got eliminated (notification is now
	in the cDisplayString class). Same for cModule.

	* cenvir.h: new notification methods: moduleCreated(),
	moduleDeleted(), connectionCreated(), connectionRemoved(),
	displayStringChanged(cGate*), displayStringChanged(cModule*),
	displayStringAsParentChanged()

	* backwards compatibility stuff collected in compat.h

2004-01-05  Andras Varga

	* Heavy redesign of cObject and cModule internals with performance
	and memory consumption improvements and cleaner code. Summary:
	- new ownership mechanism reduces memory footprint from 20 to 8 bytes
	  per simulation object (cObject subclasses: cMessage, cGate, etc.).
	  Before it was 4 pointers (ownerp, firstchildp, nextp, prevp) plus
	  1 char (storage class) and 1 bool (tkownership), and now it's only
	  1 pointer (ownerp) plus 1 int (pos).
	- faster: change of ownership was up to 6 comparisons and 9 assignments,
	  now it's 1 comparison, 3 assignments and 1 increment.
	- catches more errors: it now detects attempts to delete or take
	  objects that are currently in a queue, array, or the FES. (in other
	  words, it's no longer possible to silently steal an object from its
	  legitimate owner.)
	- cObject's custom 'operator new' could be eliminated, together with
	  determining the storage class.
	- downside: container objects have to call drop() before deleting contained
	  objects (basically, 'delete obj' calls have to be changed to
	  'dropAndDelete(obj)'.
	- tkownership was also removed also for lack of usefulness
	- other optimization is that short object names (up to 11 chars) are
	  stored inside the object's memory (an object with 11-character name
	  doesn't allocate more than an object with no name assigned).
	Details follow:

	* in activity() modules, stack cleanup is now done by C++ exceptions
	(utilizes stack unwinding). Implications: cObject's heapflag, stor
	and operator new could all be thrown out (cleaner code, performance
	improvement, plus reduces cObject size by 2 bytes)

	* short object name strings are stored inside cObject (that is,
	cObject contains union {char *nameptr, char shortname[]} now)
	--> short object names come for FREE (don't allocate extra
	memory compared to nameless objects.) This results in memory savings
	(on average) and performance improvent (less calls to 'new').
	Names count as short up to 11 chars. (This might be extended to
	15 chars if measurements show long names are popular.)

	* Object ownership handling in cObject was redesigned, with *both*
	performance improvement and memory saving, plus more protection against
	programming errors (now any object which is stored in a Queue, cArray
	etc cannot be "taken" by any other object -- it must be removed from
	the container first). Basic idea: owned objects were previously stored
	in every cObject via firstchildp, nextp, prevp pointers, every class
	(cQueue, cArray etc) had its own (extra) pointers to contained objects;
	Now it became every object's responsibility to keep ptrs to owned
	objects. Consequences:
	- setOwner() was removed (it caused a lot of misunderstandings)
	- cDefaultList was introduced
	- firstchildp, nextp, prevp got removed from cObject; ownerp was kept;
	  pos was added (necessary for storing things in cDefaultList).
	  --> reduces cObject size by 8 bytes (on 32-bit architectures)
	- cHead, cIterator was removed
	- removed cModule's `locals', `members' -- the owner is now the cModule
	  class itself (cModule became subclass of cDefaultList).
	- defaultowner made a static in cObject
	- added total_objs and live_objs counters (useful for tracing memory
	  leaks)
	- isSoftOwner() introduced -- soft owner is an object which allows
	  other objects take away an owned object from it (e.g. cQueue and
	  cArray are hard owners, cDefaultList and cModul is soft owner)

	* takeownership flag removed from cObject, and put only into classes
	where needed: cQueue, cArray and cPar (reduces cObject size by 2 bytes)

	* cModule optimization:
	- submodules are now kept via firstsubmodp, prevp, nextp pointers
	- cSubmodIterator rewritten to use firstsubmodp, prevp, nextp (more
	  efficient!)
	- also: modules are now owned by cSimulation (not the parent module)

	* removed deprecated/obsolete methods: putasideQueue; receiveNew(),
	receiveNewOn(), etc; cSimpleModule's memAlloc()+memFree();

	* removed machine parameters from cModule and cModuleInterface (parsim
	extension no longer uses them)

	* callInitialize(), callFinish() impl. moved to base class, cModule.

	* cDisplayStringParser renamed to cDisplayString (compatibility typedef added)

	* cArray::Iterator added

	* cenum.h: sEnumBuilder removed

	* global registration lists moved to globals.h and transformed into
	cArrays, accessed via new class cSingleton

2003-12-09  Andras Varga

	* distrib.h: fixed description of lognormal distribution -- the m,s
	parameters referred to the underlying normal distribution, not
	lognormal itself. [reported by Ian Grivell]

2003-11-23  Andras Varga

	* cdispstr.h: insertTag() return value changed from bool to int.

	* ccoroutine.h: MSVC version check fixed (#if _MSC_VER==1200 changed
	to #if _MSC_VER>=1200)

2003-11-13  Andras Varga

	* Merged parallel simulation brach that was developed March-May 2003,
	during my stay at Monash University. Changes in that branch:

	2003-05-21  Andras Varga
	* cobject.h: introduced cPolymorphic base class for cObject,
	with the purpose of strengthening type safety by using cPolymorphic
	at places where normally void * pointers would have been used.
	className() moved from cObject to cPolymorphic. cPolymorphic has
	no data members and ctor/dtor doesn't do anything, so subclassing
	from it comes for free.

	2003-04-18  Andras Varga
	* cenvir.h: removed foreignPuts() method, no longer used by parallel
	simulation.

	2003-04-09  Andras Varga
	* csimul.h: added guessNextModule() method, to be used from Tkenv
	in "next module" gauge.

	2003-04-01  Andras Varga
	* cenvir.h: runningMode() removed (because of reorganization of
	parallel simulation support)

	2003-03-31  Andras Varga
	* omnetpp.h, csimul.h; removed cnetmod.h: cNetMod and all references
	to it are removed -- parallel simulation is represented in cSimulation
	via cParsimPartition.
	* csimplemodule.h: syncpoint calls removed.

	2003-03-25  Andras Varga
	* cmodule.h, csimplemodule.h: method isSimple() moved to base class
	cModule where it uses dynamic_cast.
	* cenvir.h: getLocalMachineFor() has been replaced by isModuleLocal()
	* ctypes.h: cModuleType::create(): last arg "bool local" removed
	(it is now determined inside, by calling new method ev.isModuleLocal());
	also added overloaded create() method which takes module index and
	module vector size, and contains cModule::setIndex().

	* cmodule.h: cModule methods setId(), setIndex(), setModuleType()
	made protected. (They're called internally during the module creation
	process, from cModuleType::create().)

	2003-03-24  Andras Varga
	* csimul.h, cmsgheap.h: improved method documentation

	2003-03-23  Andras Varga
	* split cmodule.h: cSimpleModule put into new file csimplemodule.h
	* cobject.h: cObject::namestr private member changed from char* to
	opp_string
	* added cscheduler.h, changed csimul.h: cSimulation::nextModule()
	now relies on a scheduler object, subclassed from cScheduler.
	Normally (with sequential execution) the scheduler is
	cSequentialScheduler which just returns msgQueue.peekFirst();
	With parallel and/or real-time simulation, the scheduler is a
	specialized class which also does synchronization with real time
	and/or with other segments.

	2003-03-20  Andras Varga
	* nearly all files: changed signature of netPack()/netUnpack()
	to use new cCommBuffer interface
	* cgate.h: deliver() made virtual

2003-11-09  Andras Varga

	* csimul.h: added cSimulation::loadNedFile() which can be used to
	dynamically load NED files. See src/sim/ChangeLog for more info
	on how to enable this feature and what other libraries it requires.

2003-10-02  Andras Varga

	* util.h: added Enter_Method() and Enter_Method_Silent() macros
	which should be added to top of module class methods, and do
	context switching and animation of method calls. (Macros build on
	cContextSwitcher internal class.)

	* cenvir.h: added method moduleMethodCalled(), needed for animating
	method calls between modules

2003-09-25  Andras Varga

	* cmessage.h: support for message display strings. You have to
	redefine cMessage's displayString() to return a valid display string
	(by default it returns ""). See Tkenv for valid options.

2003-09-22  Andras Varga

	* cenvir.h: messageSent() signature modified, in order to be able to
	animate sendDirect().

	* cmodule.h: refined the rules for sendDirect(), and documented it.
	Namely, fromGate()==NULL must hold for the destination gate, that is,
	modules MUST have dedicated gates for receiving via sendDirect().
	You cannot have a gate which receives messages via both a connection
	and sendDirect().

	This restriction makes models cleaner (you must have dedicated gates
	for receiving messages via sendDirect()), and it is also necessary
	for proper animation in Tkenv.

	Soundly written existing models will not be affected.

	* cmessage.h: new fields added:
	    unsigned refcount : 7;     // reference count for encapsulated message (max 63)
	    unsigned char srcprocid;   // reserved for use by parallel exec.
	Also made existing `bool error' a 1-bit bitfield (1 length).
	The total size of cMessage didn't grow as probably earlier the compiler
	used some padding to align fields after the "error" field to a 2-byte
	boundary (at least), and we just filled up this space with useful data.

2003-06-16  ------ omnetpp-2.3 released ------

2003-06-16  Andras Varga

	* cpacket.h: deprecated cPacket class.

2003-06-14  Andras Varga

	* cmodule.h: cModule's addGate(), addPar() return type changed from
	void to cGate*/cPar*.

	* cobject.h: added bool cStaticFlag::isSet()

2003-05-29  Andras Varga

	* cfsm.h: FSM_Print(): improved output

2003-03-15  ------ omnetpp-2.3b2 released ------

2003-03-15  Andras Varga

	* cgate.h, cchannel.h: refined documentation on channel attributes,
	isBusy() and transmissionFinishes().

2003-02-15  ------ omnetpp-2.3b1 released ------

2003-02-10  Andras Varga

	* chist.h: cHistogramBase: added setNumCells() method

2003-01-30  Andras Varga

	* defs.h: added MathFunc4Args (it was needed by triang() and other
	distributions); also added its handling where needed

2003-01-29  Andras Varga

	* chead.h: added argcount paremeter to findFunction()

2003-01-22  Andras Varga

	* ctypes.h, macros.h: increased type safety of Register_Function() and
	cFunctionType

2003-01-20  Andras Varga

	* contents of obsolete header cstk.h removed

2003-01-19  Andras Varga

	* distrib.h (new): contains function declarations for distributions
	contributed by Werner Sandmann (TU Bonn): continuous distributions
	gamma_d(), beta(), erlang_k(), chi_square(), student_t(), cauchy(),
	triang(),lognormal(), weibull(), pareto_shifted(), and discrete
	distributions bernoulli(), binomial(), geometric(), negbinomial(),
	hypergeometric(), poisson()

	* random.h (new), distrib.h; utils.h: From util.h, existing
	distributions (uniform, normal, exponential, etc) were moved to
	distrib.h, and random number generator functions were moved to new file
	random.h.

	* distrib.h: bugfix: 2nd arg to normal() is really the stddev, not
	variance. Documentation fixed.

2003-01-14  Andras Varga

	* cwatch.h: added support for 'bool'

	* index.h: cOutVector doc moved from group 'SimSupport' to 'Statistics'

	* cmodule.h: new method waitAndEnqueue() added to cSimpleModule.

	* cmodule.h: putAsideQueue was DEPRECATED. putAsideQueue is currently
	used implicitly by the methods wait(), receiveOn() and receiveNewOn()
	to insert messages that arrive during the wait period or not on the
	specified gate. The receive() functions look first on the
	putAsideQueue and only then at the future events.

	As practice has shown, the purpose of the putAsideQueue was very
	often misunderstood, and its implicit use by wait() and the message
	receiving functions was highly error-prone. On the other hand,
	it is easy to emulate with waitAndEnqueue(), or a loop with receive().
	putAsideQueue will be removed at some point in the future.
	Be prepared: use wait() and receiveOn() if you do not expect other
	messages to arrive at the module; use waitAndEnqueue() where you
	mean it; do not use the receiveNew..() functions as they will be made
	redundant when putAsideQueue goes away.

2003-01-07  Andras Varga

	* cenvir.h: added ev.flush()

	* cmodule.h: deprecated phase() (nobody really used it)

2003-01-05  Andras Varga

	* macros.h: added macro Define_Function2

2002-12-19  Andras Varga

	* always use <iostream> instead of <iostream.h>

2002-12-17  Andras Varga

	* cobject.h: check_and_cast<T>(cObject *p) template function added --
	it can be used to assert that a pointer is of the given T type.
	It does dynamic_cast<T> and throws exception if the result is NULL
	(ie. pointer types are incompatible). Useful with message subclassing.

2002-12-02  Andras Varga

	* cmessage.h: added convenience methods: addObject(), getObject(),
	hasObject(), removeObject(). Refined related documentation and
	added hint to message subclassing to class description.

2002-11-03  Andras Varga

	* namespace cleanup: several iterator and other small classes
	made inner classes (cKSplitIterator changed to cKSplit::Iterator,
	cQueueIterator to cQueue::Iterator, cLinkedListIterator to
	cLinkedList::Iterator, cMessageHeapIterator to cMessageHeap::Iterator,
	sXElem to cPar::ExprElem, sGrid to cKSplit::Grid, sTopoLink to
	cTopology::Link, sTopoLinkIn to cTopology::LinkIn, sTopoLinkOut to
	cTopology::LinkOut, sTopoNode to cTopology::Node). #defines for
	backwards compatibility were added to defs.h.

2002-10-27  Andras Varga

	* Started to use C++ RTTI. It is no longer necessary to redefine
	className() in every cObject subclass. The class name string is now
	produced in the base class (cObject::className()) using the typeid
	operator.

	Tested with MSVC 6.0 and Cygwin/gcc-2.95.3-5. With MSVC, one needs
	to compile every source using /GR, otherwise Tkenv crashes (RTTI
	exception)!

	* cobject.h: removed inspector() and inspectorFactoryName() methods
	from cObject

	* ctypes.h, macros.h: removed TInspector and the inspectorfactory
	stuff altogether (they didn't really belong here). The whole stuff
	was moved to Tkenv.

2002-10-20  Andras Varga

	* cgate.h: added isConnectedOutside() and isConnectedInside()
	utility methods.

2002-10-19  Andras Varga

	* cmodule.h, ctype.h: refactoring on dynamic module creation: instead of
	modtype->buildInside(mod), one should now write mod->buildInside(),
	which is more logical.
	(Former syntax still works -- a cModuleType::buildInside() is still
	provided for backward compatibility). buildInside() delegates task
	to doBuildInside() (a new method), so it's doBuildInside() which
	should be redefined in subclasses, and also nedc generates now
	doBuildInside() code.

	* ctypes.h, macros.h: refactoring around cNetworkType and
	Define_Network: subclass cNetworkType instead of using a naked
	pointer to a network setup function.

	* cexception.h: introduced cTerminationException, cEndModuleException;
	added 2 new ctors to cException

	* cenvir.h: return type of run() changed from void to int; now the
	return value can be used in main() as application exit code.

2002-10-16  Andras Varga

	* csimul.h: cSimulation: methods warning(), setWarnings(bool),
	warnings() removed from class. Warnings are no longer used by the
	simulation library at all. opp_warning() remained (but its use
	discouraged) -- it can further be used  to report non-fatal
	discrepancies, but the user won't be offered the possibility
	to stop the simulation. (In Cmdenv, warnings will be written
	to the standard error, and in Tkenv it will probably pop up an
	[OK] dialog.

	* Convention 1: methods returning an object reference (e.g. cPar&) now
	always throw an exception if the object is not found. (Until now, some
	methods issued a warning and returned null reference, i.e.
	*(cPar*)NULL).

	* Convention 2: methods returning a pointer (e.g. cGate*) return NULL
	pointer if the object is not found. (Until now, some methods issued
	a warning and returned NULL pointer.

	* csimul.h: cSimulation: lastModuleIndex() renamed to lastModuleId();
	operator[] deprecated (use module(int) method instead)

	* cmodule.h: cSubModIterator: operator[] deprecated (use operator()(int)
	method instead)

	* cModule: cGate *gate() methods no longer issue a warning if the
	gate is not found, just return NULL. (see Convention 2 above)

	* cModule, cMessage: par() throws an exception if parameter was not
	found. (see Convention 1 above)

	* cArray::remove(cObject *) and cQueue::remove(cObject *) methods
	now return NULL instead of the original pointer if the object was
	not found. see Convention 2 above)

2002-10-09  Andras Varga

	* cobject.h: clarified and extended documentation of cObject.

	* csimul.cc: refactoring in cSimulation: del() renamed to deleteModule(),
	add() to addModule()

	* refactoring: NO(classname) macro (an alias to NULL) eliminated

2002-10-08  Andras Varga

	* chead.h: removed deleteChildren() from cHead destructor call.

	* cobject.h: refactoring/simplification: removed deleteChildren() and
	destructChildren() methods; dealloc(cObject *) renamed to discard().

2002-10-07  Andras Varga

	* macros.h, cobject.h: refactoring of internal workings: way of
	constructing global registration lists (module types, networks, etc)
	have been reorganized. Now it uses a new EXECUTE_ON_STARTUP() macro
	instead of having hardwired into global objects' constructor to
	join lists. As a consequence, cObject constructors could be simplified.

	* onstartup.h: new file, contains EXECUTE_ON_STARTUP() macro and
	underlying object.

	* Interface() macro renamed to ModuleInterface() (name clashed with
	COM stuff on Windows); Register_Interface() macro renamed to
	Register_ModuleInterface().

2002-10-04  Andras Varga

	* csimul.h: refactoring on cSimulation object:

	* incEventCount() removed, incrementing event count was moved into
	doOneEvent()

	* responsibilities of startRun() and endRun() changed, see doc comment.

	* several methods moved from cSimulation into the Envir library:
	timeLimit(), simTimeLimit(), startClock(), stopClock(), resetClock(),
	checkTimes(). Also, it is no longer the scheduler function's
	responsibility to stop the simulation if sim/real time limits have
	been reached

	* cexception.h changed

2002-09-07  Andras Varga

	* added cchannel.h: cChannel, cSimpleChannel introduced

	* cGate: added setChannel(), channel()

	* cGate: DEPRECATED setDelay(), setError(), setDatarate(), setLink()
	methods. Channel objects should be used instead.

	* cGate: added connectTo() method; DEPRECATED setFrom() and setTo()

	* cMessage: refactoring: added setSentFrom() and setArrival() methods
	instead of letting friend classes manipulate private data members
	of cMessage, and reduced friend class list.

	* cModule, cGate: deliver(cMessage*) changed to
	deliver(cMessage*, simtime_t); arrived() method signature changed
	similarly

	* cArray: created set(cObject*) method to add optional hashtable-like
	behaviour to cArray: this method replaces the object with the same
	name in the array with the object passed.

	* cArray: commented out opp_warning() calls from all remove() methods.
	TBD: opp_warning() to be eliminated from EVERY class!!!

2002-07-04  Andras Varga

	* cdispstr.h added: utility class cDisplayString

2002-06-27  Andras Varga

	* cexception.h added; methods that formerly called opp_error() now
	throw exception: throw new cException(...).

2002-06-17  Andras Varga

	* cpar.cc: new feature: cPar can use compiled expressions subclassed
	from cDoubleExpression (new class). This is needed for code generated
	by the new, nedxml-based nedc.

2002-06-12  Ulrich Kaage  <kaage@int.uni-karlsruhe.de>

	* doxy.cfg (GENERATE_TAGFILE): ../doc/api/tags renamed to
	../doc/api/opptags.xml

2002-06-11  Ulrich Kaage  <kaage@int.uni-karlsruhe.de>

	* doxy.cfg (GENERATE_TAGFILE): generate ../doc/api/tags. This
	tag file can be included when generating model documentation

2002-05-28  Frank Paehlke  <paehlke@tm.uni-karlsruhe.de>

	* defs.h: added macro USE_STD_NAMESPACES for C++ compilers with
	standard library and namespaces (currently GNU C++ >= 3.0)

	* cdensity.h, cenvir.h, chist.h, cksplit.h, cmodule.h, cobject.h,
	cpsquare.h, csimul.h, cstat.h, ctopo.h, ctypes.h, cvarhist.h,
	envirext.h: Use standard headers and namespaces if
	USE_STD_NAMESPACES is defined

	* ctopo.h: check if INFINITY is already defined

2002-05-04  ------ omnetpp-2.2 released ------

2002-04-06  Andras Varga

	* defs.h: version number upped to 2.2

2002-03-05  Andras Varga

	* cgate.h: cGate::setDisplayString() got an optional second parameter,
	bool immediate

2002-03-04  Andras Varga

	* cobject.h: cObject::free(cObject *) renamed to dealloc() to avoid
	misunderstandings

	* coutvect.h: new methods: valuesReceived(), valuesStored()

	* cobject.h, cmodule.h, cgate.h, cpar.h, csimul.h:
	fullPath2(buf,bufsize) renamed to fullPath(buf,bufsize). cObject's
	fullPath() method (without arg) had to be duplicated in all affected
	classes because a (seemingly meaningless) C++ rule says overloaded
	virtual functions must be redefined together.

2002-03-04  Ulrich Kaage  <kaage@int.uni-karlsruhe.de>

	* util.h (class opp_string): use delete[] in functions
	~opp_string, allocate and operator=

2002-03-03  Andras Varga

	* protocol.h: added constants: PR_ICMP, PR_UDP_APP. [suggested by
	Johnny Lai]

2002-03-03  Andras Varga

	* cpar.h: valueChanges() renamed to beforeChange(); corresponding
	afterChange() method added

	* macros.h, ctypes.h: Register_Class(), cClassRegister can now be used
	to create instances of non-cObject classes too; as part of this change,
	createOne() return value changed from cObject* to void*.

	* csimul.h: management of various output files (output vector file,
	output scalar file, snapshot file) was moved from cSimulation to the
	user interface library (behind the ev facade); new methods were added
	to cEnvir to support this. (See also following items.)

	* cenvir.h: added new methods to cEnvir: registerOutputVector(),
	deregisterOutputVector(), overloaded recordInOutputVector() methods,
	overloaded recordScalar() methods, getStreamForSnapshot(),
	releaseStreamForSnapshot().

	* coutvect.h: management of output vector file including start time
	and stop time of vectors was completely moved to the user interface
	library; startTime()/stopTime() methods were removed from cOutVector.
	The cOutFileMgr class was removed altogether.

	* envirext.h added: contains abstract classes that can be used to extend
	the functionality of the standard user interface library (src/envir)
	via a plugin mechanism: cOutputVectorManager, cOutputScalarManager,
	cSnapshotManager.

	* index.h: EnvirExtensions doc group added (contains classes in envirext.h)

	* cpar.cc: module parameter change logging feature removed for various
	reasons. (If you miss it, let me know!)

2002-02-22  Ulrich Kaage  <kaage@int.uni-karlsruhe.de>

	* cllist.h (cLinkedList): Doc-fix for cLinkedList::insert()

2002-02-21  Ulrich Kaage  <kaage@int.uni-karlsruhe.de>

	* cobject.h: extended description of CompareFunc regarding return values

	* cqueue.h (cQueue): fixed CompareFunc arguments in Queue class description

2001-10-28 Andras Varga

	* util.h: opp_string::allocate(), opp_strprettytrunc() added;
	indexedname() renamed to opp_mkindexedname() (old name still exists
	as macro)

	* cobject.h, cmodule.h, csimul.h, cgate.h, cpar.h: added
	fullPath2(buffer,buflen) which produces the result in an external
	buffer; cObject::fullPath() now relies on fullPath2().

2001-10-06 Andras Varga

	* cstruct.h: fixed bugs that came up while testing experimental msg
	subclassing

2001-09-14 Andras Varga

	* utils.h: added opp_nextrand(long& seed)

	* cmodule.cc: cModule's display string methods were reorganized:
	displayString(type) method split into displayString() and
	displayStringAsParent(), eliminating the type parameter. Similar change
	to the set...() methods. Old methods remained but were made deprecated.

	* cwatch.h: added unsigned int/long, signed/unsigned char, etc.
	constructors to cWatch.

2001-09-06 Andras Varga

	* cleanup around object copying: every class has now a copy constructor,
	an assignment operator, and every non-abstract class has dup().
	All dup()s call the copy constructor, and all copy constructors
	call the assignment operator. In some classes the assignment operator
	calls copyNotSupported().

2001-08-23 Andras Varga

	* index.h: wrote doc comment about internal classes

	* generated API doc for earlier 2.1 release (undoing API changes
	introduced since 2.1 release on a local copy of the headers)

2001-08-12 Andras Varga

	* documented all typedefs

2001-08-11 Andras Varga

	* added _CONSTs to all copy constructors, operator=()'s and dup()'s
	* improved doc comments in cnetmod.h, cdetect.h, index.h

2001-08-05 Andras Varga

	* added a few dozen new _CONSTs; affects nearly all files

2001-08-04 Andras Varga

	* index.h: added doc comments

2001-08-03 Andras Varga

	* ccor.h cdetect.h cgate.h cmodule.h cobject.h cpar.h csimul.h cstk.h:
	improved/added documentation comments

2001-07-30  Ulrich Kaage  <kaage@int.uni-karlsruhe.de>

	* cenvir.h: operator<< definitions were broken. Introduced with
	revision nr. 1.5. Reverted according to rev. 1.4

2001-07-29 Andras Varga

	* made a lot of methods const (only experimental for now).
	Used a _CONST macro defined in defs.h; _CONST has to be explicitly
	enabled from the makefile (-D_CONST=const). After testing, _CONST
	macros will be replaced by ordinary 'const'. Affects nearly all files.

2001-07-27 Andras Varga

	* cenum.h cfsm.h cnetmod.h cpar.h cstruct.h cwatch.h macros.h util.h:
	improved/added documentation comments

2001-07-24 Andras Varga

	* misc documentation improvements

2001-07-19 Andras Varga

	* added index.h which defines groups for the documentation; updated
	a lot of classes with @ingroup directives.

	* cdensity.h chist.h cksplit.h cpsquare.h cqueue.h cstat.h ctopo.h
	cvarhist.h chead.h ctypes.h cwatch.h: added/cleaned up DOC++ comments

2001-07-15 Andras Varga

	* added documentation for redefined cObject methods. Affects nearly all
	headers.

2001-07-13 Andras Varga

	* switched to DoxyGen for generating documentation: doxy.cfg added

	* cmsgheap.h coutvect.h cpacket.h ctopo.h: added/cleaned up DOC++
	comments

2001-07-11 Andras Varga

	* carray.h cgate.h cllist.h cpar.h cqueue.h csimul.h: added/cleaned up
	DOC++ comments

2001-07-07 Andras Varga

	* cmessage.h,cmodule.h,util.h: added/cleaned up DOC++ comments

2001-07-02 Andras Varga

	* cenum.h,cstruct.h: DOC++ comments added (not yet complete)

2001-06-28  Andras Varga

	* utils.h: added DOC++ comments (not yet complete!).

	* cstruct.h added: classes to support self-describing data structures,
	to be used for implementing message subclassing. UNTESTED. To be added
	to the makefile.

	* cenum.h added: classes to support string mapping of enums. UNTESTED.
	To be added to the makefile.

2001-06-23  Andras Varga

	* cobject.h: cleaned up DOC++ comments

	* Class comments fixed in all files. Comments for methods, functions,
	and macros yet to be done.

2001-06-22  Ulrich Kaage  <kaage@int.uni-karlsruhe.de>

	* Some fixes to errors produced by opp_docify.pl: missing #endif at
	bottom of file added, replaced /* */ statements inside comments
	with // //.

	* Merged in documentation from refman.html into header files using
	Andras' helper script opp_docify.pl (affects all files).  unused.txt
	contains doc entries extracted from opp_docify that did not fit into
	the header files.

2001-06-20  Ulrich Kaage  <kaage@int.uni-karlsruhe.de>

	* const patches applied (affects almost all files)

2001-03-10 Andras Varga

	* ------ omnetpp-2.1 released ------

	* The include/ directory was created. (Header files were formerly
	in src/sim; if you're interested in earlier changes, refer to
	src/sim/ChangeLog.)
