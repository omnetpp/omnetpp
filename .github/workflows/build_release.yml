name: Build release

on:
  push:
    branches:
      - "master"
      - "omnetpp-6.x"
  pull_request:
    branches:
      - "master"
      - "omnetpp-6.x"
  workflow_dispatch:
    # allows manual execution

jobs:
  build_ide:
    # Only run on the main repo, or when manually triggered
    if: ${{ github.repository == 'omnetpp/omnetpp' || github.event_name == 'workflow_dispatch' }}

    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - name: Build IDE
        working-directory: releng
        run: ./build-omnetpp-in-docker

      # These have to be separate steps in order for the builds to be in their own artifacts
      - name: Upload Linux build
        uses: actions/upload-artifact@v4
        with: { name: linux-x86_64, path: releng/dist/*linux-x86_64*, retention-days: 1 }

      - name: Upload macOS build
        uses: actions/upload-artifact@v4
        with: { name: macos-aarch64, path: releng/dist/*macos-aarch64*, retention-days: 1 }

      - name: Upload Windows build
        uses: actions/upload-artifact@v4
        with: { name: windows-x86_64, path: releng/dist/*windows-x86_64*, retention-days: 1 }

  install_natively:
    needs: build_ide

    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: ubuntu-24.04, build: linux-x86_64, preinstall_cmd: "sudo apt update" }
          - { os: macos-14, build: macos-aarch64 }
          - { os: windows-latest, build: windows-x86_64 }

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/download-artifact@v4
        name: Download release
        with:
          name: ${{ matrix.build }}

      - name: Extract artifact
        if: matrix.os == 'windows-latest'
        run: Expand-Archive -Path *${{ matrix.build }}* -DestinationPath .

      - name: Extract tools
        if: matrix.os == 'windows-latest'
        working-directory: omnetpp-6.1.1/tools
        shell: cmd # Because I had some trouble with pwsh.
        # Better use backslashes here for paths...
        run: |
          7za.exe x -aos -y -owin32.x86_64 opp-tools-win32-x86_64-mingw64-toolchain.7z
          del opp-tools-win32-x86_64-mingw64-toolchain.7z

          7za.exe x -aos -y -owin32.x86_64\opt\mingw64 opp-tools-win32-x86_64-mingw64-dependencies.7z
          del opp-tools-win32-x86_64-mingw64-dependencies.7z

          win32.x86_64\opt\mingw64\bin\qtbinpatcher.exe --qt-dir=win32.x86_64\opt\mingw64

      - name: Install release (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: omnetpp-6.1.1/tools
        # These are needed for the bundled MinGW bash to find the included binaries.
        env:
          MSYSTEM: MINGW64
          MSYSCON: defterm
        # GitHub doesn't reliably provide the repo name on its own anywhere,
        # so we have to extract it from the username/repository slug.
        # "${{ github.workspace }}" is "D:\a\<repository-name>\<repository-name>\",
        # but we need to MinGW-ify it for bash...
        # The > means the following is a single line, hence the semicolons for bash.
        run: >
          win32.x86_64\usr\bin\bash -l -c '
            GITHUB_REPOSITORY="${{ github.repository }}";
            REPOSITORY_NAME="${GITHUB_REPOSITORY#*/}";
            cd /d/a/$REPOSITORY_NAME/$REPOSITORY_NAME/omnetpp-6.1.1;
            source setenv;
            ./configure;
            make -j4;
            cd samples/aloha;
            ./aloha -u Cmdenv -c PureAloha1 --sim-time-limit=10s;
          '

      - name: Install release (non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          tar -xf *${{ matrix.build }}*
          cd omnetpp-6.1.1
          ${{ matrix.preinstall_cmd }}
          ./install.sh -y
          source setenv
          cd samples/aloha
          ./aloha -u Cmdenv -c PureAloha1 --sim-time-limit=10s

  install_in_docker:
    needs: build_ide
    runs-on: ubuntu-24.04

    strategy:
      fail-fast: false
      matrix:
        include:
          - { image: "ubuntu:latest", preinstall_cmd: "apt update" }
          - { image: "fedora:latest" }
          - { image: "archlinux:latest", preinstall_cmd: "pacman -Syy" }
          - { image: "opensuse/tumbleweed:latest", preinstall_cmd: "zypper refresh" }
          - { image: "almalinux:9", install_opts: "--no-3d" }
          - { image: "debian:latest", preinstall_cmd: "apt update" }

    steps:
      - uses: actions/download-artifact@v4
        name: Download release
        with:
          name: linux-x86_64

      - name: Install release
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ matrix.image }}
          options: -v ${{ github.workspace }}:/omnetpp
          shell: bash
          run: |
            cd /omnetpp
            tar -xf *linux-x86_64.tgz
            cd omnetpp-6.1.1
            ${{ matrix.preinstall_cmd }}
            ./install.sh -y ${{ matrix.install_opts }}
            source setenv
            cd samples/aloha
            ./aloha -u Cmdenv -c PureAloha1 --sim-time-limit=10s
