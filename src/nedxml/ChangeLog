2025-04-08  Andras Varga

	* opp_msgtool: Fix #1351 enum declarations not working. Example code that
	demonstrates the issue:

	    enum Foo;  // declaration of an externally defined enum
	    class A {
	        Foo foo; //Error: unknown type 'Foo' for field 'foo' in 'A'
	    }

2025-04-08  Andras Varga

	* opp_msgtool: Refactor: nits: move field within ClassInfo for clarity

2025-02-28  Attila Torok

	* NedTypeInfo: Added getDocumentation() method, to enable Qtenv display
	documentation of modules.

2024-10-08  ------ omnetpp-6.1.0 released ------

2024-05-09  Levente Meszaros

	* NED validation: Recognize new @suppressWarnings property, and no not issue
	"Cannot modify parameter/gate properties in a submodule or connection" error
	message for it.

2024-05-09  Andras Varga

	* Message compiler: Fix: cplusplus {{..}} block for a destructor was inserted
	into the C++ code in multiple copies. Fn the following example:

	class MyMessage
	{
	   int a;
	   int b;
	   int c;
	}

	cplusplus(MyMessage::~MyMessage) {{
	   // this line will be replicated a number of times equal to the number
	of fields??
	}}

	The C++ block was inserted into MyMessage_m.cc as many times as there are
	fields in the message.

	Reason: misplaced generateMethodCplusplusBlock() call, it was
	accidentally placed into the "for each field" loop.

	Reported by Giovanni Nardini [Simu5G]

2024-05-09  Andras Varga

	* NED: Allow inline properties in pattern assignments.

2024-04-03  Andras Varga

	* Message compiler: Add support for "enum class" and enum underlying data
	type, using the @class, @underlyingType properties.

2024-04-03  Andras Varga

	* Message compiler: Enums defined in the msg file now may have properties added.

2023-01-09  Andras Varga

	* NED: Fix "Network not found" errors when INET was in a symlinked
	directory. Solution was to resolve symlinks when using dirs as map keys (in
	canonicalize(), a function now part of the common/). This also appears to
	fix #747 "Module class not found due to soft links in the NED folder's path"

2022-08-30  Andras Varga

	* NED: Refactor NedResourceCache to allow accessing NED types immediately
	after they have been loaded (provided all base types are also available),
	as opposed to only after calling doneLoadingNedFiles().

2022-08-26  Andras Varga

	* NED: Excluded-packages list to use the same separator char as NED
	path. Practically, it now also accepts ":" on non-Windows systems.

2022-06-22  Attila Torok

	* NED: Fix errors not being reported when a @display string literal had
	a badly escaped character (like "\,") in it.

2022-05-16  Attila Torok

	* Use C++ headers instead of C ones, e.g. <cstdlib> instead of <stdlib.h>

2022-05-19  Andras Varga

	* Message compiler: lexer/parser modernization, made reentrant.

2022-05-17  Andras Varga

	* NED: lexer/parser modernization, made reentrant.

2024-02-01  ------ omnetpp-6.0.3 released ------

2023-10-06  ------ omnetpp-6.0.2 released ------

2022-09-01  ------ omnetpp-6.0.1 released ------

2022-06-14  Andras Varga

	* ide/ned,src/nedxml: NedElement: added get getPreviousSiblingWithTag()

2022-05-18  Attila Torok

	* build: Disable implicit make rules by setting .SUFFIXES to empty

2022-04-11  ------ omnetpp-6.0 released ------

2022-01-27  Andras Varga

	* Message compiler: Improved the documentation to reflect that @getter,
	@setter, and other "method name" properties may contain funcall templates
	instead of method names when @existingClass is given.

2022-01-27  Andras Varga

	* Message compiler: Validate the method names the user provides in the
	@getter, @setter, @sizeGetter, and other "method name" properties.

2022-01-26  Andras Varga

	* Message compiler: Improve the handling of "funcall templates" (used
	primarily by the @toString/@fromString properties) that specify a method
	call (start with "." or "->"). Since it is not always possible to know at
	the place of the @toString/@fromString property whether the field will
	contain an object or a pointer, the message compiler will now automatically
	replace "." by "->" or vica versa, to ensure that the generated C++ code
	will compile.

	* Fix: getFieldValueAsString() could crash when invoked on a pointer
	field whose value is nullptr.

2022-01-25  Andras Varga

	* Message compiler: Fix C++ compilation error if msg contains cMessage
	instead omnetpp::cMessage. The C++ code also contained plain cMessage
	instead of omnetpp::cMessage. The reason was that field type name lookup was
	messed up, and the unqualified type name from the msg file was used as C++
	type name. This has been rectified.

2022-01-22  Andras Varga

	* Message compiler: No longer use operator<< for converting fields to string
	in getFieldValueAsString(), see commit message for rationale. Instead, use
	@toString code if the class has one; or str() if the class has one; otherwise
	just return the empty string.

2022-01-22  Andras Varga

	* Message compiler: Allow "namespace;" syntax. It returns to the toplevel
	C++ namespace.

2022-01-22  Andras Varga

	* Message compiler: msg2.y: Simplify the rules for qualified names.
	The namespace directive now allows leading "::" (and ignores it).

2022-01-22  Andras Varga

	* Message compiler: Use removeSpaces() in msg2.y for qualified names. This
	fixes the issue that the lexer/parser allows whitespace within qualified
	names, but the rest of the code assumes they don't contain any.

2022-01-18  Andras Varga

	* Message compiler: Added error checking for boolean properties; any
	value other than "true" and 'false" will now be reported as error.

2022-01-13  Andras Varga

	* Message compiler: Implemented @abstract.

2022-01-13  Andras Varga

	* Message compiler: Changed abstract fields not to require @customize(true)

2022-01-13  Andras Varga

	* Message compiler: Added the @customImpl property. When specified on a
	field, opp_msgc will not generate implementation for the field's accessor
	methods, allowing custom implementations to be supplied by the user.

2022-01-13  Andras Varga

	* Message compiler: Fix: Setter for owned pointer field crashed when invoked
	with the current value.

2022-01-13  Andras Varga

	* Message compiler: Fix: For owned cObject* fields: Added runtime checks if
	object is actually a cOwnedObject so we can property drop()/take() it.

2022-01-11  Andras Varga

	* Message compiler: Rename "drop" method to "remove" for pointer fields.

2022-01-11  Andras Varga

	* Message compiler: Introduce "append" method for array fields instead of
	single-arg "insert" method.

2022-01-12  Andras Varga

	* Message compiler: Introduced @datamemberType, adjust descriptions of @cppType,
	@argType, @returnType.

2022-01-08  Andras Varga

	* Message compiler: Fix error message raised by generated code when index into
	array field is out of range.

2022-01-11  Andras Varga

	* Message compiler: Property declarations: Clarify which properties affect the
	class descriptor ONLY (but not the generated class).

2022-01-11  Andras Varga

	* Message compiler: Separate groups of methods generated for different fields by
	newline.

2022-01-08  Andras Varga

	* Message compiler: Warning made more helpful.

2022-01-10  Andras Varga

	* Message compiler: When generating the Message Properties appendix for the
	manual, write out the '@' prefix of properties.

2021-11-20  Rudolf Hornig

	* PLATFORM makefile var was split into PLATFORM and ARCH

	- This allows easier testing for platform only (independent of
	  architecture). At several places the PLATFORM.ARCH pair was tested
	  incorrectly (i.e. win32.x86_64) while the code was strictly only platform
	  dependent but not architecture dependent.

	- Introduced also the JNI_PLATFORM variable which is compatible with the
	  JNI naming (i.e. instead of macos, it uses darwin)

2021-11-05  Andras Varga

	* NED: Built-in channels (DelayChannel, DatarateChannel): parameters made
	@mutable.

2021-10-28  Andras Varga

	* NED/MSG parser: Fix storing of file/line info into AST nodes. This bug
	caused NED errors to appear without location info in the IDE.

2021-09-30  Andras Varga

	* Message compiler: implement @readonly

2021-09-29  Andras Varga

	* Message compiler: fix "ambiguous conversion from 'long' to 'omnetpp::cValue'"
	on macOS.

2021-09-28  Andras Varga

	* NED: Prevent NED files to be loaded more than once. Occurs if NED path
	contains duplicate entries. Caused error with package.ned files.

2021-07-16  Andras Varga

	Message compiler: Follow cClassDescriptor change: generate getFieldValue()
	and setFieldValue() methods. Added new properties @toValue()/@fromValue()
	so that user can define how to implement those.

2021-07-23  Andras Varga

	* Message compiler: fix: setFieldStructValuePointer() only supported
	pointer fields, but it's also OK if the setter takes the object by reference.

2021-07-11  Andras Varga

	* Message compiler: for enums, generate Register_Enum() calls instead of
	ad-hoc code.

2021-07-08  Andras Varga

	* Message compiler: cosmetics: camelization in generated class descriptor source.

2021-07-08  Andras Varga

	* Message compiler: some refactoring.

2021-06-23  Andras Varga

	* Message compiler: Adapt to the introduction of any_ptr in class descriptors
	(see include/omnetpp/ChangeLog); generate and use toAnyPtr/fromAnyPtr functions
	for converting pointers from/to any_ptr. For any class, the generation of
	toAnyPtr/fromAnyPtr can be disabled by specifying @castFunction(false) in
	the class.

	Details:
	- main point: generateFromAnyPtr() and generateToAnyPtr() methods in
	  MsgCodeGenerator
	- the generated toAnyPtr/fromAnyPtr methods are needed from other
	  generated files as well, so sim_std_m.h is now part of <omnetpp.h>
	- new properties: @castFunction(<bool>), @polymorphic(<bool>)
	- properly resolve classes listed in @implements (this may cause errors
	  to be reported for msg files that previously compiled OK.)
	- added classQName utility field to ClassInfo
	- refactoring: generateTemplates() call moved from MsgCodeGenerator::
	  generateNamespaceBegin() to MsgCompiler::generateCode()

2021-07-01  Andras Varga

	* Message compiler: remove opp_msgtool --msg4 option and the MsgCompilerOld
	class; also remove -u and -e which didn't work.

2021-06-28  Andras Varga

	* Message compiler: @implements property: read as list instead of single
	string which is split along commas. That is, @implements("foo,bar") now needs
	to be written as @implements(foo,bar).

2021-06-16  Andras Varga

	* NEDElement: Store src location in a FileLine struct not as strings; this
	allows stringpooling file names.

	* MsgCompilerOld: Remove obsolete MSGC_COMPATIBILE mode.

2021-06-10  Andras Varga

	* NED grammar: Added method call syntax, to be used by the UFCS (Universal
	Function Call Syntax) support.

2021-06-09  Andras Varga

	* More modernizing: dtdclassgen: use nullptr for pointers in the generated code

2021-05-07  Andras Varga

	* NED grammar: Introduced "parent" keyword.

	The accepted syntax for parameters, sizeof(), exists(), index and
	typename has become significantly broader; it is the task of
	nedsupport.cc to reject forms that aren't meaningful or unsupported.

	Removed syntax: index()

2021-05-13  Andras Varga

	* Cosmetics on '// namespace' comments

2021-05-11  Andras Varga

	* Use opp_splitandtrim() instead of StringTokenizer.

2021-05-04  Andras Varga

	* NED grammar: JSON values to accept extra comma at the end of lists

2020-01-13  Andras Varga

	* NED grammar: JSON values to accept bare numbers, true/false/nan/inf/null as map keys

2021-04-16  Attila Torok

	* Fix printf format string bugs, add format(printf) attributes

2021-03-18  Andras Varga

	* Msg compiler: fix: generated fallback operator<<() for non-cObject
	classes that don't have operator<<() printed the pointer instead of
	class name etc.

2020-12-15  Andras Varga

	* NedResourceCache::loadNedSourceFolder(): accept exclusions in the
	form of package names instead of folders.

2020-11-13  Attila Torok

	* Modernizing: Use in-class member initializers wherever possible;
	use "=default" syntax for copy constructors where appropriate.
	Tool: clang-tidy plus manual editing where needed.

2020-11-06  Andras Varga

	* opp_msgtool fix: When specifying a dir, it tried to interpret all
	files in it as msg files.

2020-10-16  Andras Varga

	* Old msg compiler: Similar change to generated default operator<<

2020-08-28  Levente Mészáros

	* Msg compiler: Changed generated default operator<<
	to apply to non-cObject subclasses only. Fixes ambiguity in
	generated code.

2020-06-10  Zoltan Bojthe

	* Msg compiler: parsimpack support for enums

2020-04-17  Andras Varga

	* NED parser: fix #806, buffer overrun with long file paths

2019-11-25  Andras Varga

	* opp_msgtool: Added "latexdoc" hidden help page, which outputs the
	supported msg properties in LaTeX format for inclusion in the manual.

2019-11-18  Andras Varga

	* msgc: Added @custom field property. It causes the field to only appear in
	descriptors, but no code is generated for it at all. One can inject the
	code that implements the field (data member, getter, setter, etc.) via
	targeted cplusplus blocks.

2019-11-23  Andras Varga

	* msgc: Allow injecting code into almost any of the generated methods, via
	targeted cplusplus blocks. Specify <classname>::<methodname> as target for
	the cplusplus block. Supported methods include the constructor, copy
	constructor (use "Foo&" as name), destructor, operator=, copy(),
	parsimPack(), parsimUnpack(), etc., and the per-field generated methods
	(setter, getter, etc.).

2019-11-23  Andras Varga

	* msgc: Added the syntax and infrastructure for method-targeted cplusplus
	blocks. Syntax: cplusplus <target> {{{ <body> }}}.

2019-11-23  Andras Varga

	* msgc: Use the "=delete" syntax of C++11 in the generated code.

2019-11-23  Andras Varga

	* msgc: structs: Move field initialization inline.

2019-11-15  Andras Varga

	* MsgCompilerOld: Follow cClassDescriptor changes.

2019-11-12  Andras Varga

	* NED grammar: Follow Expression parser change: Allow '::' in object type in
	the JSON notation.

2019-10-24  Andras Varga

	* NED grammar: Support "object" (new keyword) as parameter type.

2019-11-06  Attila Torok

	* Added NedParser::isValidNedExpression(), used in the inifile editor etc.

2019-11-04  Andras Varga

	* msgc: Follow cClassDescriptor change: Use exception in setters to indicate
	error instead of returning false.

2019-10-26  Andras Varga

	* msgc: Added support for setting pointer members and array sizes via class
	descriptors. (cClassDescriptor had no facility for that.)

	This involves adding two methods to cClassDescriptor (setFieldArraySize()
	and setFieldStructValuePointer()), and support for the @resizable() and
	@replaceable field attributes that tell the message compiler to generate
	the respective code in the class.

2019-10-28  Andras Varga

	* ned2.y, msg2.y: cosmetics: Use %empty for empty rules (more explicit).

2019-10-28  Andras Varga

	* ned2.y: Refactored to support arbitrary number of args, in the same way as
	common/expression.y.

2019-10-30  Andras Varga

	* opp_msgtool: Added "builtindefs" help page option (prints built-in
	declarations).

2019-10-29  Andras Varga

	* opp_msgc: fix: Exit early if we find errors in the source, to prevent them
	from causing assertions firing during code generation.

2019-10-23  Andras Varga

	* ASTNode::getSourceLocation() changed from const char * to std::string

2019-10-25  Andras Varga

	* NED parsing: remove NED expression parsing (was unused since new
	common::Expression class)

2019-10-21  Andras Varga

	* Added ASTNode::getSourceFileDirectory().

2019-05-13  Rudolf Hornig

	* msgc: Moved the header guard to the beginning of the generated
	files, in order to work around an IDE issue.

	The CDT Indexer got confused and parsed several times the same file if
	the header guard was not the first #ifdef in the file. This triggered a
	bug in CDT Indexer and caused extreme slowdowns.

2019-04-29  Andras Varga

	* XML parsers removed from here. (Moved to the common/ library.)

2019-04-11  Andras Varga

	* NED grammar: added '=~', '<=>', and 'undefined'.

2019-04-13  Andras Varga

	* NED grammar: Accept 'bool' as function name.

2019-03-11  Andras Varga

	* NedResourceCache: Turn off expression parsing, as expressions in NED
	sources will be (re)parsed separately, by the cDynamicExpression class.

2019-04-04  Rudolf Hornig

	* Makefile improvements.

2019-04-11  Andras Varga

	* NED/MSG grammar: Better token names for some keywords; rename token CHAR
	to COMMONCHAR; no need to use symbolic tokens for single-char operators.

2019-04-11  Andras Varga

	* NED grammar: Made operator precedence more similar to C/C++.
	Relational operators (==, !=, <, <=, >, >=) used to be on the same
	precedence level; now == and != have lower precedence than the rest.

2019-04-11  Andras Varga

	* NED grammar: Rmove incomplete "constant subexpression" support from NED
	expressions. It was never implemented, and not really missed by anyone.
	The 'const' keyword remains reserved in NED, for whatever future use.

2019-04-01  Andras Varga

	* NedResourceCache: Only allow one package.ned per package.

2019-03-26  Andras Varga

	* NedResourceCache: Fix how NED loading works wrt package.ned files.

	package.ned files were looked up in the ancestor *folders*, not in
	ancestor *packages* as in the NED spec. This also fixes issues with NED
	embedding when it's mixed with dynamic NED loading (such as class lookup
	errors in inet/test/fingerprint/ethernet-*.csv when INET is build with
	embedding the NED files under src/)

2019-03-21  Andras Varga

	* NedResourceCache: Added support for NED exclusion path.
	This is needed for EnvirBase (-x option, OMNETPP_NED_EXCLUSION_PATH)

2019-03-21  Andras Varga

	* NedResourceCache refactoring: use canonicalize() throughout.

2019-02-26  Andras Varga

	* opp_msgtool: Rewritten in the style of opp_nedtool.

	- Command line interface now uses subcommands.
	- Better help.
	- Message compiler interface is compatible with earlier versions (the
	  default command is cpp), only the rarely useful -T (type of next file)
	  and -h (here) options have been removed.

2019-02-25  Andras Varga

	* opp_nedtool: Rewritten for convenience and features.

	Main points:
	- Command-line interface redesigned for better usability (subcommands,
	  better help, etc.)
	- Added support for generating C++ source ("cpp" subcommand), for
	  embedding NED files into an executable or library.
	- Added support for processing NED folders.
	- More convenient output (no *_n.ned, *_n.xml).
	- Removed obsolete @listfile and @@listfile support.
	- Fixed bugs in splitting NED files to one NED type per file.

	The most interesting change is the new "cpp" command, which allows you to
	embed NED files into a binary (a library or an executable). It generates C++
	code that contains the content of NED files as string constants, which can
	then be compiled into the simulation binary. When the simulation program is
	started, these embedded NED files will be loaded automatically, and the
	original NED files will no longer be needed for running simulations.
	Optional garbling, which prevents NED source code from being directly
	readable inside the compiled binaries, is also available.

	A makefrag file can be used to integrate the NED-to-C++ translation into the
	build process. To see an example makefrag file, view the 'makefrag' help
	topic in opp_nedtool.

2019-02-22  Andras Varga

	* NED: fix: @namespace in package.ned was not taking effect in single-folder
	models when NED embedding was used. registerPendingNedTypes() tried to
	resolve the C++ class too eagerly (while package.ned was not yet loaded).

2019-01-10  Rudolf Hornig

	* Makefile: Added support to build on Windows using MS ABI compatibility
	(i.e. Visual C++ libraries)

2018-06-27  Andras Varga

	* opp_nedtool: removed msgc-related functionality, now it is really just
	about NED.

2018-06-15  Andras Varga

	* opp_msgc: Made --msg6 the default mode.

2020-01-06  ------ omnetpp-5.6 released ------

2019-05-15  ------ omnetpp-5.5 released ------

2019-05-13  Rudolf Hornig

	* Message compiler: moved the header guard to the beginning of the generated
	files. The CDT Indexer gets confused and parses the same file several times
	if anything (except comments) precedes the header guard #ifdef in the file.
	This triggered a bug in CDT Indexer and caused extreme slowdown and	eventually
	memory exhaustion.

2019-03-11  Andras Varga

	* dtdclassgen: added attribute ID constants

2019-02-07  Andras Varga

	* nedxml: Let the validator know about the new intuniformexcl() NED function.

2018-06-25  ------ omnetpp-5.4.1 released ------

2018-06-13  Attila Torok

	* Silence some minor warnings (-Wsign-compare, -Wformat).

2018-06-15  Andras Varga

	* Msg compiler: fix: check for write errors when using std::ofstream

2018-06-15  Andras Varga

	* opp_msgtool: fix: no error if depsfile cound not be created

2018-06-11  ------ omnetpp-5.4 released ------

2018-04-13  Zoltan Bojthe

	* Message compiler: use static_cast instead of old style c-cast

2018-05-31  Andras Varga

	* NED: Introduced "nan" and "inf" as keywords for numeric constants

2018-05-23  Andras Varga

	* NED: Added "exists" operator. Syntax: exists(<submodulename>)

2018-05-18  Andras Varga

	* NED: Allow 'typename' in expressions. Motivation: we want to be able
	to write:
	 foo: <> like IFoo if typename!=""

2018-04-11  ------ omnetpp-5.3 released ------

2018-01-24  Zoltan Bojthe

	* Message compiler: fix: eraseFoo(i): set array variable to nullptr
	instead of "new FooType[0]"

2018-01-23  Zoltan Bojthe

	* Message compiler: fix memory leak in generated setFieldArraySize()
	of owned pointer arrays: when size was reduced, dropped elements were
	not deleted.

2018-01-19  Zoltan Bojthe

	* Message compiler: fix generated copy(): use @clone and dup() as
	appropriate.

2017-12-14  Andras Varga

	* A complete overhaul of the message compiler and related functionality,
	over a period of several months, with help and input from Zoltan Bojthe.
	See summary below.

	This release contains experimental features which can be enabled with
	the --msg6 option. This experimental mode makes non-backward-compatible
	changes to the MSG language. These features were motivated by the needs
	of INET 4.

	Features in experimental mode:

	- Added opp_msgtool, which encapsulates the MSG-related parts of nedtool,
	  and also acts as message compiler.

	- Dependency generation added to the message compiler, useful with imports;
	  see below.

	- Added import support. A message file can now reference definitions in
	  other message files using the "import" keyword. Type announcements are
	  no longer needed (in fact, they are ignored with a warning), and there
	  is now much less need for cplusplus blocks as well.

	- cObject is no longer the default base class. This is another non-backward-
	  compatible change: if a class yours needs to subclass cObject, modify the
	  MSG file and add "extends cObject".

	- Field getters now return const reference. Separate "get..ForUpdate()"
	  getters that return non-const are generated to cover uses cases when the
	  contained value (typically an object) needs to be modified in-place.

	- Added targeted cplusplus blocks. The target needs to be added in
	  parentheses just after the "cplusplus" keyword. The target can be "h"
	  (the generated header file -- the default), "cc" (the generated .cc file),
	  or the name of a type generated in the same MSG file (content is inserted
	  in the declaration of the type, just before the closing curly bracket).

	- Enum names can now be used as field type name, i.e. it is no longer
	  necessary to write "int foo @enum(Foo)".

	- Support for const fields (no setter).

	- Support for pointer and owned pointer fields. Owned pointers are denoted
	  with the @owned field property. Non-owned pointers are simply stored and
	  returned; owned pointers imply delete-in-destructor and clone-on-dup
	  behavior. Additionally, if the object is a cOwnedObject, take() and drop()
	  calls are also generated in the code.

	- More convenient dynamic arrays: inserter and eraser methods generated
	  into the class, to make it easier to add/remove elements without explicit
	  calls to setArraySize() methods.

	- Support for pass-by-value for fields. Annotate the field with @byValue
	  for that.

	- Many more class and field properties that affect code generation, see list
	  below.

	- @byValue and many other properties can be specified on the class, and they
	  are inherited by fields that instantiate that type.

	- Changed C++ type for array sizes and indices to size_t.

	- Better code for generated classes, e.g. inline field initializers,

	- Better code generated for descriptors, e.g. symbolic constants for
	  field indices.

	A complete list of supported properties (descriptions will be added soon):
	   @actually
	   @primitive
	   @opaque
	   @byValue
	   @supportsPtr
	   @subclassable
	   @defaultValue
	   @cppType
	   @argType
	   @returnType
	   @toString
	   @fromString
	   @getterConversion
	   @clone
	   @existingClass
	   @descriptor
	   @omitGetVerb
	   @fieldNameSuffix
	   @beforeChange
	   @implements
	   @nopack
	   @owned
	   @editable
	   @overrideGetter
	   @overrideSetter
	   @enum
	   @sizeType
	   @setter
	   @getter
	   @getterForUpdate
	   @sizeSetter
	   @sizeGetter
	   @inserter
	   @eraser
	   @allowReplace
	   @str
	   @customize

	Implementation:

	- The message compiler core was split up into three classes: MsgCompiler,
	  MsgAnalyzer, MsgCodeGenerator. The legacy message compiler (for the
	  --msg4 option) is the completely separate class MsgCompilerOld.

	- Primitive types are now defined via built-in declarations, and not
	  hardwired as code. This provides more flexibility.

	- The message compiler is now aware of the OMNeT++ library classes, as if
	  they were imported by default. Declarations come from the sim_std.msg
	  file (which is now textually included by the message compiler.)

	- Updated the list of reserved words (words that cannot be used as
	  identifiers in MSG files; it is the union of the words reserved by C++
	  and by the MSG language.)

	- Near-complete separation of the NED and MSG parts of the library.

	- Several renames throughout the nedxml library, mostly motivated by the
	  previous point. A partial list:

	    - NEDElement -> ASTNode
	    - NEDFileBuffer -> SourceDocument
	    - NEDErrorStore -> ErrorStore
	    - NEDXMLGenererator -> XMLGenerator
	    - NED2, NED -> Ned, MSG2 -> Msg (in class and function names)
	    - NED_xxx -> MSG_xxx
	    - NED_PARTYPE_xxx -> PARTYPE_xxx, etc
	    - NEDSAXHandler -> ASTBuilder
	    - NEDXMLParser -> XMLASTParser
	    - nedexception.h -> exception.h
	    - nedyylib --> yyutil

2017-12-08  ------ omnetpp-5.2.1 released ------

2017-10-18  Rudolf Hornig

	* opp_msgc: It now uses the nedtool in the same bin directory where it
	resides.

2017-09-18  ------ omnetpp-5.2 released ------

2017-04-06  Andras Varga

	* Modernizing: use C++11's range-based for loops where applicable, using
	clang-tidy's modernize-loop-convert.

	* Modernizing: replace INT64_PRINTF_FORMAT and LL with C++11's PRId64.
	Note: PRId64 includes the "d" that was not part of INT64_PRINTF_FORMAT
	alias LL.

2017-05-25  Rudolf Hornig

	* Updated makefiles for speeding up the build:
	- generated files are created only once, even when using parallel build
	- binaries are copied to their final destination using proper makefile
	  targets

2017-05-08  ------ omnetpp-5.1.1 released ------

2017-03-31  ------ omnetpp-5.1 released ------

2017-02-06  ------ omnetpp-5.1pre3 released ------

2017-01-13  Rudolf Hornig

	* nedtool: fix #809/2: Escape '@' characters in doxygen comments in
	generated C++ code.

2017-01-12  Rudolf Hornig

	* nedtool: fix #809 - generated message headers and C++ files no longer
	produce warnings even on pedantic setting. This was achieved by
	disabling expected warnings in the generated C++ files using pragmas,
	for GCC and CLANG.

	On GCC, generated code now builds without warnings with:
	-Wall -Wpedantic -Wunused -Wextra -Winit-self
	-Wswitch-enum -Wuninitialized -Wfloat-equal -Wsuggest-attribute=pure
	-Wsuggest-attribute=const -Wsuggest-attribute=noreturn
	-Wsuggest-attribute=format -Wconversion -Wuseless-cast -Wshadow

2016-11-30  Levente Mészáros

	* nedtool: Added missing override declarations to msg compiler.

2016-12-23  ------ omnetpp-5.1pre2 released ------

2016-12-16  Rudolf Hornig

	* Suppressed shift/reduce warnings in .y files by specifying the
	expected number of conflicts (%expect)

2016-12-15  Rudolf Hornig

	* ned2.y fix: BOM in UTF-8 files is now correctly skipped

2016-12-05  Rudolf Hornig

	* Removed support for old, non-validating version of libXML (<2.6.0)

2016-11-30  Rudolf Hornig

	* build: Makefile refactored. Added clang-c2 support and optimized
	the build process.

	* build: removed Makefile.vc, as Visual C++ builds are now handled
	by the standard Makefiles.

2016-11-10  Andras Varga

	* Error messages refined (start with capital letter, use apostrophes
	for quoting, etc.)

2016-11-09  Andras Varga

	* NED: fix: duplicate type names were not detected, "Redeclaration of type X"
	errors were never issued

2016-11-04  Andras Varga

	* Error handling: don't just dump NED messages on stderr, but use them
	in exception texts

2016-11-08  Andras Varga

	* NEDTypeInfo: use maps to find gates, params, etc.

2016-11-08  Andras Varga

	* Check for uniqueness of names within component

2016-12-05  Rudolf Hornig

	Removed support for old libXML versions (< v2.6) without DTD validation support.

2016-08-23  Andras Varga

	* MsgCppGenerator: follow sim.kernel change: info() renamed to str()

2016-07-12  Andras Varga

	* MsgCppGenerator: follow sim.kernel change: generate
	getFieldDynamicTypeString() method into cClassDescriptors

2016-07-18  Andras Varga

	* msg grammar: remove support for old (3.x) format;
	"properties" and "fields" are no longer keywords

2016-07-12  Andras Varga

	* MsgCppGenerator: some internal cleanup

2016-07-12  Andras Varga

	* msg files: allow generating descriptors for existing inner classes.
	Syntax example: class cComponent::SignalData {... }

2016-06-23  Rudolf Hornig

	* The makefile now uses compiler-generated dependency files.

2016-04-13  ------ omnetpp-5.0 released ------

2016-04-01  Andras Varga

	* Edited comments to improve the generated C++ documentation (doxygen)

2016-03-31  Andras Varga

	* opp_msgc (MsgCppGenerator class):
	- fix: simtime_t was converted to/from string via double
	- fix: simtime_t must be qualified with omnetpp::

2016-03-10  ------ omnetpp-5.0rc released ------

2015-12-07  ------ omnetpp-5.0b3 released ------

2015-10-16  Andras Varga

	* omnetpp namespace made permanent (cannot be turned off):
	- removed configure option and preprocessor symbol USE_NAMESPACE
	- removed related macros: NAMESPACE_BEGIN, NAMESPACE_END,
	  USING_NAMESPACE, OPP, OPP_STR, OPP_PREFIX etc.

2015-08-10  Andras Varga

	* nedyylib.cc: more careful parsing of quoted strings in property
	values (results in less exceptions)

2015-08-06  Andras Varga

	* MsgCppGenerator: more flexible syntax for @getter and other properties
	that specify method names to call:
	- accepted syntaxes: .foo(), ->foo, foo($), foo (equivalent to ->foo())
	- applies to @getter, @sizeGetter, @tostring, @setter, @fromstring

2015-07-20  ------ omnetpp-5.0b2 released ------

2015-06-16  Andras Varga

	* Cleanup: prefer ++it to it++ (less copying)

2015-06-20  Andras Varga

	* nedtool: fix: handle C++ exceptions (instead of crashing)

2015-06-19  Andras Varga

	* NedTypeInfo: allow a "module" to extend a "simple" (motivation: INET 3.x)

2015-06-09  Andras Varga

	* MsgCppGenerator: doPacking() renamed to doParsimPacking(), same for
	doUnpacking(), doArrayPacking() and doArrayUnpacking()

2015-06-08  Andras Varga

	* Cleanup: longer header guards

2015-06-08  Andras Varga

	* Cleanup: code formatting

2015-05-15  Andras Varga

	* Cleanup: use per-folder nested namespaces: omnetpp::envir, omnetpp::tkenv,
	omnetpp::layout, omnetpp::common, omnetpp::eventlog, etc.

2015-05-22  Andras Varga

	* Modernizing: added the 'override' keyword (C++11) to overridden methods;
	it becomes blank when using with an older compiler.

	* MsgCppGenerator: generated code now contains 'override' annotations

2015-05-21  Rudolf Hornig

	* Modernizing: replaced NULLs by 'nullptr' (C++11); it is defined as 0
	when using an older compiler.

	* MsgCppGenerator: generated code now contains 'nullptr' instead of NULL

2015-05-11  Andras Varga

	* Cleanup: many data members renamed to camelCase

2015-04-20  Andras Varga

	* Cleanup: use C++ names of C headers (e.g. <cstdio> instead of <stdio.h>)

2015-04-12  Andras Varga

	* Cleanup: copyright years updated

2015-04-14  Andras Varga

	* MsgCppGenerator: eliminated "_var" suffix from data members. To emulate
	the old behavior, add the following to a message definition:

	    @fieldNameSuffix("_var");

2015-04-08  Andras Varga

	* Modernizing:

	- Use a fixed include path (-Iinclude -Isrc) for all source folders
	  under src/, and qualify cross-folder #includes with the folder
	  name (e.g. change #include "stringutil.h" to #include "common/stringutil.h").
	  This increases readbility and reduces the chance of including a wrong
	  header.

	- In source files, sort #include statements by folder.

2015-04-07  Andras Varga

	* msg2.y fix: msg file parser didn't support file properties

2015-03-30  Andras Varga

	* MsgCppGenerator: changed the code generated for parsimPack() / parsimUnpack()
	in order to make it work with OMNeT++ and model C++ namespaces.

	* Modified the generated operator<< functions for the same reason (namespaces).

2015-03-25  Andras Varga

	* MsgCppGenerator: fixed #821 wrong handling of multiple "namespace" directives

2015-03-04  ------ omnetpp-5.0b1 released ------

2014-09-23  Andras Varga

	* fix #772: trim property values in NED, as each reformatting added a space
	  character after the property value

	* fix #773: ned2.lex/msg2.lex: newline inside properties confused the parser

	* lex files: emove obsolete and unused textbuf from _count() functions

2014-08-18  Zoltan Bojthe

	Changes on MsgCppGenerator (message compiler):

	* adapted the generated descriptor code to cClassDescriptor changes in 5.0

	* implemented @editable(false)

	* added @tostring, @fromstring field properties: their values should be
	  names of functions which will be used by the generated descriptors to
	  convert the field value to / from string. This is most useful with
	  compound field types (classes). Details:

	 - @tostring accepts member functions, too: if the property value begins
	   with a dot, it is assumed to be a member function of the value class

	 - @tostring, @fromstring: if the property value contains a '$' character,
	   '$' will be replaced by the value to be converted

	 - if field has the @enum property, conversion to/from string will accept
	   symbolic constants too (enum2string(), string2enum())

2014-11-27  ------ omnetpp-4.6 released ------

2014-08-05  Zoltan Bojthe

	* opp_msgc: removed, use nedtool for compiling msg files

	* nedtool: added msg compiler feature; nedtool can now be used as a
	a drop-in replacement for opp_msgc. Command line options: opp_msgc's
	options have been added; some existing options needed to be renamed
	due to conflict with opp_msgc options.
	    -X renamed to -T
	    -X[nc|nd|ns] added (disable generating class/descriptor/setter at MSG files)
	    -P <exportdef> added
	    -S renamed to -t (header suffix)
	    -t renamed to -S (store source)

2014-06-30  ------ omnetpp-4.5 released ------

2014-06-27  Andras Varga, Zoltan Bojthe

	* opp_msgc: fix: the generic templated operator<< in the generated
	code caused compilation error when namespaces were involved.

	* opp_msgc: added operator<< for vector field types (std::vector<T>,
	where T must have operator<<).

2014-05-28  Andras Varga

	* opp_msgc: added support for @implements class property. Its expects
	a comma-separated list as value, and adds the list items to the
	generated class as public base classes. No additional code is generated.
	E.g. @implements(Foo,Bar) adds "public Foo, public Bar" to the
	generated class header.

2014-02-03  Andras Varga

	* Follow removal of cCompoundModule from the simulation library.

2014-02-13  ------ omnetpp-4.4.1 released ------

2014-02-11  Andras Varga

	* ned2.lex: fix #715: allow wildcards in property indices, for @signal;
	allowed characters are *,?,{, and } (not [ and ] though)

2014-02-11  Andras Varga

	* opp_msgc: fix related to namespace qualifier of base classes in
	generated code

2014-01-31  Andras Varga

	* opp_msgc: fix bug #655 "opp_msgc does not respect namespace when
	generating #ifndef/#define". Generated header guard now includes the
	namespace name.

2013-12-20  ------ omnetpp-4.4 released ------

2013-09-28  Andras Varga

	* More liberal syntax for NED (and MSG) properties. Rules:
	  - property names and indices may now contain letters, digits,
	    underscore, hyphen, dot and colon (this is roughly the same rule as
	    for XML attribute names)
	  - values no longer need to be enclosed in quotes if they contain parens,
	    provided that parens are balanced
	  - comma, semicolon and equal sign are ignored within nested parens,
	    brackets, curly braces; also within string constants
	  - if parens, brackets or braces are unbalanced, the value needs to be
	    quoted
	  - spaces are generally ignored, except within values

	The implementation uses several flex modes and yyless()

2013-09-12  ------ omnetpp-4.3.1 released ------

2013-04-02  ------ omnetpp-4.3 released ------

2013-02-08  ------ omnetpp-4.3rc1 released ------

2012-01-14  Andras Varga

	* grammar change (ned2.dtd,ned2.y, ned2generator.cc): added channel
	name support to connections

	Syntax:
	   r1.pppg++ <--> eth1: EthernetChannel <--> r2.pppg++;
	   a.out --> foo: {delay=1ms;} --> b.in;
	   a.out --> bar: --> b.in;

	See also the associated @defaultname property in the manual.

2012-03-13  ------ omnetpp-4.2.2 released ------

2012-01-31  Andras Varga

	* added XInclude support to the LibXML2 wrapper code

2012-01-17  ------ omnetpp-4.2.1 released ------

2011-10-28  ------ omnetpp-4.2 released ------

2011-09-11  ------ omnetpp-4.2rc1 released ------

2011-07-10  Andras Varga

	* opp_msgc: fixes for cNamedObject

	* opp_msgc: fix: setter method argument names no longer end in "_var"

	* opp_msgc: fix: use fully qualified type names for fields in the
	generated code

	* opp_msgc: improvement: announcements and type definitions to observe
	whether they are above the namespace declaration  (=outside the
	namespace) or below it (=inside the namespace). This changes makes it
	consistent with cplusplus blocks that had this behavior for quite some
	time. Details:
	  - treat announcements above namespace decls as being outside the
	    namespace (i.e. unqualified names will be understood as belonging
	    to the global namespace)
	  - do not allow type definitions above the namespace decl (because we
	    always want to generate them into the C++ namespace)

	* opp_msgc: improvement: modified type lookup in namespaces, to make it
	possible to use unqualified names when declaring fields.
	The rules:
	  - if type contains '::', we regard it as being fully qualified
	  - if type is simplename, and there is such name in the file's namespace,
	    that's it
	  - otherwise, the simplename must be unambiguous when looking at names
	    in all other namespaces (including the global namespace); e.g. if
	    there's both a foo::A and an ::A (or a bar::A), we report it as
	    ambiguous.

2011-05-17  Andras Varga

	* saxparser_expat.cc: fix #300: wrong printf() format used for
	XML_GetCurrentLineNumber().

2011-05-05  ------ omnetpp-4.2b2 released ------

2011-04-19  Andras Varga

	* minor grammar change (ned2.y, ned2.lex): made "typename" a keyword,
	and allow it as the last component in pattern assignments.
	Example:
	  *.host[*].tcp.typename = "TCP_lwIP";
	Note that a 'typename=...' assignment cannot occur in the body of the
	parametric submodule itself; this is because the value expression
	would have to be evaluated in the context of a submodule that does not
	exist yet.

2011-04-14  Andras Varga

	* SAXParser: implemented parsing of string literals (needed for the
	xml() NED function in the sim. kernel)

2011-04-14  Andras Varga

	* minor grammar change (ned2.y): treat xmldoc() like any other NED
	function; allow "xml" to be used as NED function name

2011-04-08  Andras Varga

	* implemented conditional submodules (change affects doc/ned/ned2.dtd).
	Syntax:
	  udp: UDP if needsUDP {...}
	  tcp: <tcpType> like ITCP if needsTCP {...}

2011-03-03  Andras Varga

	* implemented default value for parametric submodule and channel types.
	NED now supports the following syntax:
	  mobility: <default("NullMobility")> like IMobility;
	The effect is that NullMobility will be used if the type name is not
	specified in the configuration using a line similar to this:
	  **.mobility.type-name="ConstSpeedMobility"

2011-02-23  ------ omnetpp-4.2b1 released ------

2011-01-18  Andras Varga

	* NED refactoring: <channel-spec> element was merged into <connection>;
	its arrow-direction attribute was split to 2 booleans.
	Affects doc/ned/ned2.dtd, and generated classes ChannelSpecNode (which
	was removed) and ConnectionNode.

2010-06-11  ------ omnetpp-4.1 released ------

2010-06-11  Andras Varga

	* fix: SAX parsers did not close the input file

2010-05-31  ------ omnetpp-4.1rc2 released ------

2010-05-09  Andras Varga

	* opp_msgc feature: implemented @sizetype property for array fields.
	It can be used to specify the C++ type of the array size and array
	indices (by default it is unsigned int). Affects the size variable,
	the getter, setter, array size getter and array size setter methods
	as well.

	* msg2.y: keywords "int", "char", "unsigned" etc are not accepted in
	property values. Useful for @sizetype (above). Without this change,
	type would need to be enclosed in quotes: @sizetype("unsigned short").

	* opp_msgc: fixed bug #136: a "using namespace" line inside a
	cplusplus {{...}} block messed up parsing

2010-04-20  ------ omnetpp-4.1b4 released ------

2010-03-31  Andras Varga

	* ned2.y: upped the GLR stack size from the default 200, as it was
	too small for parsing NED files with complex expressions

2010-03-25  Andras Varga

	* nedxml: added isInnerType() to NEDTypeInfo class

2010-03-14  ------ omnetpp-4.1b3 released ------

2010-01-29  Andras Varga

	* ned2.y: fixed ambiguity when parsing @foo(key=,"val"); solution
	is that equal sign should not be allowed as part of the value.

2009-07-18  Andras Varga

	* opp_msgc: further refinements related to recent changes

2009-07-16  Andras Varga

	* nedxml: fixes in comment parsing (tabs were handled incorrectly)

2009-07-15  Andras Varga

	* opp_msgc: fixed namespace support. It is now possible to use types
	from other namespaces as base class, field type, or field enum.

	To place generated types into a namespace, add a namespace declaration
	at the top of the msg file (existing feature); examples:
	  namespace foo;
	  namespace proj::pkg::subpkg;

	Example for using types from another namespaces:

	  message proj::ABCPacket;
	  message ABCPacketExt extends proj::ABCPacket {
	      ...
	  }

	Example 2:

	  class proj::pkt::Bundle;  // explicit namespace
	  class ::cQueue;           // global namespace (needs "::")
	  class SomeData;           // msg file's namespace
	  message SomePacket {
	      proj::pkt::Bundle bundle;
	      cQueue queue;   // recognized as ::cQueue
	      SomeData data;
	  }

	If the message file declares a namespace, then unqualified names in
	type announcements are understood as from the same namespace; names
	from the global namespace need to be explicitly prefixed with "::"
	to remove ambiguity. Thus, you need write "class ::cQueue;" and not
	"class cQueue;".

	  namespace foo;
	  packet MyPacket;  // understood as foo::MyPacket
	  class cQueue;     // WRONG -- would be understood as foo::cQueue
	  class ::cQueue;   // correct

	* opp_msgc: improved cplusplus blocks: their contents can be placed
	into or outside the namespace {...} block in the generated header file,
	depending on whether the block occurs before or after the namespace
	declaration in the msg file.

	* opp_msgc: removed support for enum inheritance (which was an
	undocumented and generally unused feature, with several issues)

2009-07-10  Andras Varga

	* opp_msgc: implemented @codegen and @descriptor properties (msg-file
	equivalent of -Xnc, -Xnd, -Xns command line options):

	- @existingClass(true) in a message/class/struct instructs opp_msgc
	  not to generate code for the class (this is useful if the class
	  already exists, and one only wants to generate reflection info for it)

	- @descriptor(false) instructs opp_msgc not to generate reflection
	  info (cClassDescriptor) for the class

	- @descriptor(readonly) instructs opp_msgc not to generate field
	  setters for the reflection info class (cClassDescriptor)

	* opp_msgc: added generation of descriptor method findField()

	* opp_msgc: generates more efficient code for getFieldTypeString(),
	getFieldName(), and getFieldTypeFlags()

	* opp_msgc: bugfix: namespace was missing from the name string of the
	generated descriptor class, so appropriate descriptor could never
	be found by name

2009-06-25  Andras Varga

	* NEDTypeInfo: handle @class in compound module types as well

2009-03-12  ------ omnetpp-4.0 released ------

2009-02-27  ------ omnetpp-4.0rc2 released ------

2009-01-21  Andras Varga

	* ned2.y: definition of property_value made more permissive

2008-12-14  Andras Varga

	* opp_msgc: improvement related to bug #33. Type announcement now can
	specify the base class of the declared class. If missing, the class is
	assumed to subclass from cOwnedObject. To declare that the class does
	not have any base class interesting to opp_msgc, one must declare it
	as "extends void". Summary:

	  class X {...}              ==> generated with cObject as base class
	  class X extends void {...} ==> generated with no base class

	  class X extends void;         |
	  class X extends cObject;      |==> type announcement with base class
	  class X extends cOwnedObject; |

	  class X;            ==> equals to: class X extends cOwnedObject;
	  class noncobject X; ==> equals to: class X extends void;
	  message X;          ==> equals to: class X extends cMessage;
	  packet X;           ==> equals to: class X extends cPacket;

	"extends" in declarations may name ancestor instead of direct base class

2008-12-12  ------ omnetpp-4.0rc1 released ------

2008-12-02  Andras Varga

	* opp_msgc: fixed bug #15 (class descriptor was generated with the
	intermediate class name (x__Base) not the real class name)

2008-11-26  Andras Varga

	* library renamed to oppnedxml

2008-10-26  Andras Varga

	* opp_msgc: generates boilerplate code for dll export/import symbol

2008-08-28  Andras Varga

	* DatarateChannel parameters to be declared with "default()"

2008-07-31  Andras Varga

	* added "packet" keyword to msg files. It is like "message", except
	that it generates "cPacket" as base class

2008-07-14  Andras Varga

	* ned1.lex, ned2.lex, msg2.lex: accept UTF-8 BOM mark (EF BB BF).
	Note: NED only accepts international chars inside comments, but
	not within indentifiers

2008-07-01  Andras Varga

	* opp_msgc: doPacking/doUnpacking functions for arrays and primitive
	types moved out of the generated code into the simkernel headers
	include/packing.h

2008-06-16  Andras Varga

	* opp_msgc: added support for C99 integer types (int8_t, uint64_t, etc),
	also without "_t" suffix (int8, uint64), and for float.

	* opp_msgc: added support for @nopack field property ("don't include
	in netPack()/netUnpack()")  [requested by Ingmar Baumgart]

	* opp_msgc: for the record, supported properties are:

	class properties:
	- @customize(<bool>)
	- @omitGetVerb(<bool>)

	field properties:
	- @enum(<string>)
	- @nopack(<bool>)
	- @getter(<string>)
	- @setter(<string>)
	- @sizeGetter(<string>)
	- @sizeSetter(<string>)
	- @editable(<bool>)

	field properties recognized by Tkenv inspectors:
	- @label(<string>)
	- @group(<string>)
	- @hint(<string>)

	Note: by default, getter for a field named "isFoo" is going to be
	named "getIsFoo". To change this to "isFoo", specify @getter(isFoo)
	on the field.

2008-02-23  Andras Varga

	Summary of nedxml changes for omnetpp-4.0 (2006..2008):

	* major revision of the NED language. The most significant changes are:
	- changed to curly brace syntax
	- channels became first-class types
	- added module and channel interfaces, to formalize "like" relationships
	- added inheritance (may add/refine parametes, gates, submodules, connections)
	- added inner types (primarily to allow local channel definitions)
	- added Java-like package system and imports
	- split "numeric" parameter type to int and double
	- non-const parameters are now called volatile (const is no more)
	- expressions can now work with string and XML types as well
	- support for "like" submodule vectors where each module is of different
	  NED type (syntax: foo[5]: <> like IFoo; inifile: **.foo[*].typename = "Foo")  FIXME not implemented yet
	- added inout gates and bidirectional connections
	- the in/out "halves" of inout gates may connected independently
	- more flexible gate vectors (size can be set inside or outside the module type)
	- added conditional connection groups
	- added support for default display string (default icon, color etc) for module and channel types
	- added "properties" (@foo(value[s]) syntax; useful for various annotations)
	- display string turned into property (@display)
	- added handling of physical units and their conversion (@unit property)
	- added support for C++ namespaces (@namespace property)
	- added support for explicitly specifying C++ implementation class (@class property)
	- parameter prompt string became @prompt property
	- further usage of properties envisioned (gate labelling, statistics declaration, etc)
	- dropped feature: conditional parameters and gatesizes sections (?: can be used instead)
	- dropped feature: ancestor parameters (violates encapsulation principle)
	- dropped feature: ref keyword (parameters are now always taken by reference)
	- no more implicit conversion between bool and long/double
	- max NED function arg count is now 10

	The following changes were made to nedxml:

	* significant changes to ned2.dtd, which describes NED's XML binding
	and internal representation (AST).

	* there are now two parsers (ned1.y and ned2.y), for the old and the new
	syntax, and a heuristics decides which one to use. ned1.y produces the same
	(new) AST as ned2.y, so old NED files can be read and used without problems

	* there are two NED source generators as well (for NED1 and NED2), so
	it is possible to generate NED in the old syntax too (of course only
	a subset of the new NED language can be used, those compatible with the
	old syntax)

	* new classes: NEDResourceCache, NEDTypeInfo. They are used by the sim
	kernel's network builder as well.

	* nedtool convenience options for converting and reformatting (pretty-
	printing) NED source files: -k, -P, -Q

	* out-of-directory build, and other Makefile changes

	* not yet implemented: full NED validation (NEDCrossValidator); generating
	C++ code (_n.cc files) from NED files

2008-02-23  Andras Varga

	MERGED src/nedc ChangeLog in into this ChangeLog. The src/nedc source
	directory got deleted, after moving opp_msgc in here. (src/nedc used to
	contain the old nedc (aka jar), until it was removed in March 2005).

	Summary of opp_msgc changes for omnetpp-4.0 since 12/2007:

	* opp_msgc: fix: when msg file was given with full path, the #include
	in the generated _m.cc file also contained the full path

	* opp_msgc: eliminated "unused variable pp" warnings in generated code

	* opp_msgc: accepts wildcards as well as directories as arguments;
	directories will be interpreted as "<dir>/*.msg" (non-recursive)

	* opp_msgc: now accepts multiple files, and also does dependency
	check (does not overwrite _m.cc/h file if it's already up to date).
	The -A option to turns off timestamp check (ie will always overwrite
	the _m.cc/h files)

	* opp_msgc: added C++ namespace support (syntax: namespace foo;)

2006-12-14  Andras Varga

	* nedtool.cc moved to nedxml/

2006-11-06  Andras Varga

	* opp_msgc: alternative syntax for properties: @prop or @prop(value)

	* opp_msgc: class-level properties currently understood:
	  @customize (or: @customize(true))
	  @omitGetVerb (or: @omitGetVerb(true))

	* opp_msgc: field properties currently understood:
	  @enum(enumname);
	  @editable or @editable(true);
	  @getter(methodname),
	  @setter(methodname);
	  @sizeGetter(methodname),
	  @sizeSetter(methodname);
	  @label(some-text);
	  @hint(some-text)

	* see src/sim/sim_std.msg for an example usage of these properties

2006-10-22  Andras Varga

	* opp_msgc: added -Xnc, -Xnd, -Xns options, because we want to generate
	reflection info for simkernel built-in classes (see src/sim/sim_std.msg)

2006-10-13  Andras Varga

	* opp_msgc: generate covariant return types for dup(), replace
	findEnum() with cEnum::find().

2006-10-21  ------ omnetpp-3.3 released ------

2006-10-14  Andras Varga

	* opp_msgc: added version check into generated code

2006-10-04  Andras Varga

	* opp_msgc: don't accept reserved words as identifiers

2006-10-04  Andras Varga

	* ned.y: msg file syntax handling made more liberal: accept expressions
	as field initializers

2006-01-12  ------ omnetpp-3.2p1 released ------

2006-01-09  Andras Varga

	* nedtool, opp_msgc: return exit code 0 when called without args (just
	to print help)

2005-10-19  ------ omnetpp-3.2 released ------

2005-09-22  Andras Varga

	* nedtool.cc: reverted change on 2005-04-04, and implemented @listfile
	and @@listfile syntax:
	@listfile: listfile should contain one file per line (@ or @@ listfiles
	   also accepted). Files are interpreted as relative to the listfile.
	   @ listfiles can be invoked from anywhere, with the same effect.
	@@listfile: like @listfile, but contents is interpreted as relative to
	   the current working directory. @@ listfiles can be put anywhere,
	   including /tmp -- effect only depends on the working directory.
	@@listfile is primarily used by opp_neddoc.

2005-09-22  Andras Varga

	* nedbasicvalidator.cc: enabled parent module gates to get connected
	with "++". Parentmodgate++ connects the first unconnected gate, but
	it doesn't create new ones -- it is an error to exceed sizeof(gate).

2005-09-14  Andras Varga

	* opp_msgc: adapted to dup() return type change, see include/ChangeLog

2005-08-08  Andras Varga

	* cppgenerator.cc: assign submodule parameters, gatesizes etc
	in that submodule's context (use cContextSwitcher); same for network.
	This is mainly needed for ModNameParamResolver to work correctly
	($MODULE_NAME etc for XPath expressions are taken from the module
	in context).

2005-08-07  Andras Varga

	* cppgenerator.cc: don't look for module type if module vector size
	is zero.

2005-07-06 Andras Varga

	* ned.dtd, ned.y, etc: added support for message declarations in msg
	files (message-decl element, MessageDeclNode class)

2005-08-05  Andras Varga

	* opp_msgc: generate both const and non-const getter methods for
	fields of class or struct type.

	* opp_msgc: generate a protected and unimplemented operator==(),
	to prevent accidental usage of compiler-generated one

	* opp_msgc: added the possibility to set a base class field.
	E.g. kind=5 will generate the setKind(5) line into the constructor.
	Currently opp_msgc is not prepared to check if such field actually
	exists in the base class, so such errors may only be detected during
	C++ compilation.

2005-08-04  Andras Varga

	* opp_msgc: it is no longer required to write out "fields:" in an
	otherwise empty class definition

	* opp_msgc: added the possibility to declare generated classes to be
	dllexport/dllimport on Windows:
	   opp_msgc -P MY_EXPORT_DEFINE foo.msg

	* opp_msgc: generated C++ header now contains relevant part of the
	.msg files as Doxygen comment

2005-04-04  Andras Varga

	* nedtool.cc: fixed a bug introduced in 3.1: while it's true that
	name of an included list file should be understood as relative to
	location of list file which includes it, but names of NED files
	in them should be relative to current working directory.

2005-03-31  ------ omnetpp-3.1 released ------

2005-03-23  Andras Varga

	* main.cc renamed to nedtool.cc

2005-03-11  Andras Varga

	* opp_msgc: fix: with customize=true, opp_msgc generates a comment in
	the .h file containing the minimum code the user has to write -- dup()
	in that code was missing const modifier [reported by Kurtis Kredo]

2005-03-02  Andras Varga

	* nedc (old "jar") removed; replacement is NEDXML and nedtool

2005-01-10  Andras Varga

	* main.cc (nedtool): factored out platform dependencies to include/platdep

2004-12-29  ------ omnetpp-3.0 released ------

2004-12-06  Andras Varga

	* ned.y: negative int or real constants were parsed as -1*x, which
	caused problems for input() with negative default values

	* cppexprgenerator.cc/h: generate inline expression (not expression
	class) for const parameters

	* cppexprgenerator.cc/h: fixed handling of index, sizeof(), input()

2004-12-22  Andras Varga

	* opp_msgc: fix: in generated setArraySize(), avoid calling "new [0]"
	if size==0 is passed.

2004-12-19  Andras Varga

	* opp_msgc: fix: if a message was subclassed in another .msg file, base
	class fields were not visible in Tkenv [reported by Julien Cartigny]

2004-11-29  Andras Varga

	* ebnf.y: malloc.h changed to stdlib.h. Change needed for Mac OS/X
	[patch from Michael Tuexen]

2004-11-29  Andras Varga

	* ned.y: malloc.h changed to stdlib.h. Change needed for Mac OS/X
	[patch from Michael Tuexen]

2004-11-23  ------ omnetpp-3.0b1 released ------

2004-11-19  Andras Varga

	* main.cc (nedtool): implemented -h option [thanks Johnny]

2004-11-03  ------ omnetpp-3.0a9 released ------

2004-11-02  Andras Varga

	* Makefile.in/vc, nedgrammar.h: prefix ned parser symbols with "nedyy"
	(-p nedyy and -Pnedyy options to bison and flex) to avoid conflicts
	with parsers in other libraries. [Akaroa was reported by Ana Cristina
	Aguiar, TU Berlin]

2004-10-25  Andras Varga

	* cppgenerator.cc: updated for fullPath() signature change (see
	include/ChangeLog)

2004-10-04  ------ omnetpp-3.0a8 released ------

2004-09-25  Andras Varga

	* opp_msgc: added support for initializers in structs (generates
	constructor for structs now). Fields without initializer are
	initialized to zero.

	* opp_msgc: "message" keyword is also accepted in forward declarations

2004-09-24  ------ omnetpp-3.0a7 released ------

2004-09-13  Andras Varga

	* saxparser_libxml.cc: if document has DOCTYPE, validate document
	and complete attrs from DTD.

	* saxparser_expat.cc: error message if document has DOCTYPE declared,
	because we cannot validate it with Expat, nor complete default attrs
	from DTD

2004-09-24  Andras Varga

	* opp_msgc: adds some Doxygen comments to the generated classes

2004-07-27  Andras Varga

	* ned.lex: fixed "`yytext_ptr' undeclared" error with some flex
	versions

2004-07-22  ------ omnetpp-3.0a6 released ------

2004-07-20  Andras Varga

	* ned.dtd, ned.y: added source-code attribute to ned-file element,
	and code to fill it when parsing NED source

2004-06-24  Andras Varga

	* several files: added support for "xml" NED parameter type

2004-06-07  ------ omnetpp-3.0a5 released ------

2004-06-07  Andras Varga

	* cppgenerator.cc: wrong C++ code was generated for "const" parameters
	[reported by Julien Cartigny]

2004-05-27  Andras Varga

	* opp_msgc: generates netPack()/netUnpack() for parallel simulation

2004-05-26  Andras Varga

	* opp_msgc: prohibit using cObject fields in structs and non-cObject
	classes (ownership issues)

2004-05-16  Andras Varga

	* opp_msgc: fixed two bugs introduced since 2.3p1

2004-05-15  ------ omnetpp-3.0a4 released ------

2004-05-13  Andras Varga

	* ned.lex (nedxml): recognize hex numbers as INTCONSTANT

2004-03-22  ------ omnetpp-3.0a3 released ------

2004-03-06  Andras Varga

	* nedxml: added support for msg enum declarations <enum-decl>

2004-03-18  Andras Varga

	* opp_msgc: if a struct or class has operator<<, it is used for the
	getFieldAsString() function (and will be displayed in Tkenv)

2004-03-05  Andras Varga

	* opp_msgc: remove output files (_m.cc,_m.h) if translation fails

2004-03-03  ------ omnetpp-3.0a2 released ------

2004-03-03  Andras Varga

	* opp_msgc: uses cPolymorphic as default base class for classes.
	(There was no default base class before.) Using cPolymorphic for base
	class enables the class to be registered (Register_Class()), and
	doesn't cost anything because cPolymorphic has no data members only
	vptr, and opp_msgc-generated classes have vptr anyway (as some methods
	are virtual.)

2004-03-01  Andras Varga

	* opp_msgc: added omitGetVerb boolean property. If turned on, generates
	field getter methods without the "get" word, e.g. a field called
	destAddr can be read by method destAddr() and not getDestAddr().
	Example usage:
	   class Foo {
	       properties:
	           omitGetVerb=true;
	       ...
	   };

	* opp_msgc fixes:
	- added simtime_t to list of accepted types
	- accept symbolic constant for array size (before it could only be
	  numeric constant)
	- enums can be predeclared (needed if they come from another msg file)
	- fields can have an enum type and an initializer at the same time

2004-02-20  Andras Varga

	* cppgenerator.cc: implemented cChannel && cChannelType; several
	refinements in generated code

	* ned.dtd, ebnf.y: added support for "mod.out++ --> in++" connection
	syntax, where "++" causes the first, yet unconnected gate to be used,
	and (with submodule gate vectors) it also expands the vector if
	necessary, so "gatesizes:" is not needed. Gate vectors of the parent
	module cannot be expanded further (because network is built and
	connected top-down.)

	* cppgenerator.cc, cppexprgenerator.cc: several bugfixes in the
	generated code

2004-02-24  Andras Varga

	* main.cc: nedtool didn't understand -I without space [reported by
	Andreas Koepke]

2004-02-09  Andras Varga

	* main.cc: improved list file handling

2004-02-11  Andras Varga

	* ned.y: didn't accept negative numbers and symbolic constants in
	msg files as field and enum values

2004-02-04  ------ omnetpp-3.0pre1 released ------

2004-01-22  Andras Varga

	* opp_msgc: fix: didn't handle files in other directories (wrong
	#ifndef symbol was generated for the header file) [reported by
	Andreas Koepke]

2004-01-04  Andras Varga

	* opp_msgc: updated for changed ownership management rules

2003-12-10  Andras Varga

	* opp_msgc: removed sEnumBuilder usage

2003-12-06  Andras Varga

	* jar.c: removed check for zero-size module vectors

	* jar_expr.c: fixed buffer overrun introduced last time

2003-11-13  Andras Varga

	* jar_expr.c: added typecast when taking address of <math.h> functions
	in generated code. Needed for MSVC 7.0 compiler (it overloads some
	of these functions which caused ambiguities).

2003-11-13  Andras Varga

	* Checked in parallel simulation code that was developed March-May 2003,
	during my stay at Monash University. Changes:

	2003-03-25  Andras Varga
	* jar_mod.c: removed "islocal" stuff from module creation

	2003-11-11  Andras Varga
	* nedc (jar): removed "machines" and "on" sections from NED grammar

2003-10-07  Andras Varga

	* ebnf.y: fixed nedc bug, it didn't handle user-defined functions
	with 4 parameters properly. [Reported by Andreas Koepke]

2003-10-07  Johnny Lai

	* jar.c : nedc added -h support for intel compiler on Linux
	(__INTEL_COMPILER && __linux__)

2003-09-30  Andras Varga

	* opp_msgc: with customize=true, adds a default dup() function to the
	generated _Base class that throws an exception and warns the user.
	Also made assignment operator protected, to force the user overwrite
	it with a fresh one in the customized class.

2003-08-12  Andras Varga

	* opp_msgc: implemented -h option, meaning identical to nedc
	[patch by Johnny Lai]

2003-07-27  Andras Varga

	* nedtool: implemented -t option (store source code), needed for
	documentation generation

2003-10-19  Andras Varga

	* nedelement.cc/h: added userdata field which makes it possible
	to attach additional data to NEDElement objects (needed for GNED)

2003-08-30  Andras Varga

	* ned.dtd: storing of "like" parameters changed (attribute @like-param
	introduced)

	* ned.dtd: const/@value made optional (because we cannot distinguish
	empty attribute ("") and missing attribute, and "" string constant
	caused validation error).

2003-07-31  Andras Varga

	* updated for current syntax of message declarations (dtd change)

2003-07-27  Andras Varga

	* ned.dtd: added source-code attribute to top-level elements; this
	is useful for documentation generation.

2003-06-16  ------ omnetpp-2.3 released ------

2003-06-16  Andras Varga

	* opp_msgc: messages (cMessage subclasses) now accept message kind
	as second, optional parameter to constructor.

2003-05-01  Andras Varga

	* opp_msgc fix: perl in RedHat 9 (rpm 5.8.0-88) is broken, it doesn't
	recognize the [^\s] construct in regexps. Workaround: replaced [^\s]
	with [^ \t\r\n].

2003-03-19  Andras Varga

	* opp_msgc: accept, but (since imports are not yet supported) ignore
	the -I flag

2003-03-15  ------ omnetpp-2.3b2 released ------

2003-02-15  ------ omnetpp-2.3b1 released ------

2003-02-14  Andras Varga

	* nedc: no limit on ned file line length

2003-01-30  Andras Varga

	* added handling of new MathFunc4Args

2003-01-22  Andras Varga

	* jar_expr.c: adopted to increased type safety of cFunctionType

2003-01-04  Andras Varga

	* opp_msgc: added support for cplusplus {{ ... }} syntax

	* opp_msgc: 'cobject <classname>' syntax changed to 'class <classname>',
	'noncobject <classname>' changed to 'class noncobject <classname>'.

2002-12-22  Andras Varga

	* jar.c: zero module vector size crashed network setup code. Temprarily,
	check_module_count() changed to make zero size an error. This will
	be fixed in nedtool: zero size should be allowed and properly handled.

2002-12-07  Andras Varga

	* msgc.pl was renamed opp_msgc, and now it gets copied to the bin/
	directory; an opp_msgc.cmd was also added for Windows' sake

	* files for opp_msgc should now have .msg suffix -- nedcwrapper.sh
	removed

	* msgtest.ned renamed to example.msg

2002-11-30  Andras Varga

	* development of NEDXML is under way. Until the code reaches a stable
	state, I use a local CVS repository on my home PC for convenience,
	and periodically update the main OMNeT++ CVS from the local CVS.

2002-11-23  Andras Varga

	* jar_expr.c: fixed bug which caused generated code to crash if
	user-supplied math function (i.e. its cFunctionType object)
	was not found

2002-11-04  Andras Varga

	* ebnf.y: changed right-recursion to left-recursion (large files caused
	stack overflow)

2002-10-19  Andras Varga

	* adopted to kernel changes around buildInside(), see include/ChangeLog

2002-10-07  Andras Varga

	* jar_mod.c: changed Interface macro names to ModuleInterface (see also
	include/ChangeLog)

2002-10-04  Andras Varga

	* nedc: changed opp_error() calls in generated code to throw new cException

2002-06-09  Ulrich Kaage  <kaage@int.uni-karlsruhe.de>

	* Makefile.in (nedtool): use EXPAT_LIB when linking

2002-06-08  Ulrich Kaage  <kaage@int.uni-karlsruhe.de>

	* Makefile.in: new targets nedtool, main.o

2002-07-07  Andras Varga

	* added main.cc and nedtool target to MSVC makefile; unix makefile
	to be done

2002-06-09  Ulrich Kaage <kaage@int.uni-karlsruhe.de>

	* ned.y (swapAttributes) (nedc): compile fix for gcc 3.x: Ambiguous
	implicit conversion for NEDString::NEDString(NEDString)

2002-06-08  Ulrich Kaage  <kaage@int.uni-karlsruhe.de>

	* Makefile.in: created from Makefile.vc

2002-06-07  Andras Varga

	* INITIAL REVISION OF NEDXML. NEDXML is going to replace nedc
	(formerly called "jar") when it's ready.

2002-05-16  Ulrich Kaage  <kaage@int.uni-karlsruhe.de>

	* jar_mod.c (do_simp_or_comp): fixed declaration of className()
	[resolves bug report #14 by jiake]

2002-05-04  ------ omnetpp-2.2 released ------

2002-04-06  Andras Varga

	* jar.c: made text of "version mismatch" #error in generated code
	more intuitive

	* jar.c: version number upped to 2.2

2002-04-05  Ulrich Kaage  <kaage@int.uni-karlsruhe.de>

	* msgc.pl (generateClass): fixed compiler warnings about
	signed/unsigned comparison

2002-03-07  Andras Varga

	* bugfix (id 0004 in the bugtracker): nedc-generated code crashed if
	parameter specified in a 'like' clause didn't exist

	* bugfix: generated code didn't compile if a user-defined function
	(see Define_Function() macro) was used inside a channel definition

2002-02-11  Ulrich Kaage  <kaage@int.uni-karlsruhe.de>

	* Makefile.in (nedc): use CXX instead of CC for linking (gcc-3 patch)

2002-01-23  Ulrich Kaage  <kaage@int.uni-karlsruhe.de>

	* msgc.pl (generateClass): Calls to setOwner() for cObjects and
	cObject arrays inside of constructors.

2002-01-22  Ulrich Kaage  <kaage@int.uni-karlsruhe.de>

	* msgc.pl (generateDescriptorClass): when generating
	getFieldStructPointer(): use getter function of message class,
	implies to get the pointer to the message class first.

2002-01-17  Ulrich Kaage  <kaage@int.uni-karlsruhe.de>

	* msgc.pl: added surrounding #ifndef/#define/#endif construct to
	_n.h file generation to avoid multiple inclusion. Therefore
	introduced new variable $hdef that holds the macro string

2002-01-16  Ulrich Kaage  <kaage@int.uni-karlsruhe.de>

	* nedcwrapper.sh: strip all command line arguments except the last
	one so that only the ned file name is left. Use this for running
	grep and perl.

2001-10-26 Andras Varga

	* ebnf.y, jar_expr.c, jar_lib.c, jar_func.h, jar_lib.h: implemented
	that an expression may refer to a submodule parameter. Syntax:
	submod.par or submod[index].par. Limitations: index may not be
	an expression itself (must be constant, for-variable or (submodule)
	parameter); the generated expression is of 'anytype' (no type-check).

2001-10-06 Andras Varga

	* msgc.pl msgtest.ned msgdoc.txt nedcwrapper.sh: checked in files for
	experimental message subclassing. Read msgdoc.txt for instructions on
	how to try it.

2001-07-11 Andras Varga

	* ebnf.y: Eric Wu's Tru64/MPI port. Tru64 needs extra #includes.

2001-03-10  Andras Varga

	* ------ omnetpp-2.1 released ------

	* Borland C++ support removed: I deleted the project files
	(*.ide). I added equivalent Makefile.bc files (generated from the
	BC IDE), but they are completely unsupported at the moment. If
	there's interest, it's possible that later I'll add makefiles for
	the free command-line bc5.5 compiler.

2001-01-16  Andras Varga

	* ------ omnetpp-2.0p1 released ------

	* ------ omnetpp-2.0 released ------

	* disabled heapcheck in jar_mem.c (this makes nedc a lot faster if
	compiled with Borland C++)

	* added version mismatch check to generated _n.cc files

2000-11-19  Andras Varga

	* ebnf.y updated from GNED (no effect on nedc)

2000-09-30  Andras Varga

	* improvement just for Cygwin: lexer now explicitly ignores '\r'
	(=CR) chars

2000-05-22  Andras Varga

	* ------ omnetpp-2.0b5 released ------

	* ------ omnetpp-2.0b4 released ------

	* const-correctness fix on get_expression() arg list [reported by
	Frank Paehlke]

2000-05-07  Andras Varga

	* Makefile.vc improvements [from Balazs Kelemen]

2000-04-13  Andras Varga

	* Changed operator precedence to bind ||,&& thighter than ?:
	[suggested by Niko]

2000-04-10  Andras Varga

	* TRUE/FALSE (defines) replaced by true/false (C++ keywords)

	* in printf() statements, all "%lf","%lg","%le" was replaced by
	"%f","%g","%e"

2000-04-05  Andras Varga

	* bugfix: nedc hung if last line was a comment and it was
	incomplete (without LF) [reported by Roland Bless]

2000-03-27  Andras Varga

	* bugfix: conditional (?:) operator caused parse error [reported
	by Niko]

2000-03-26  Andras Varga

	* 'char *' --> 'const char *' changes in generated code

2000-03-12  Andras Varga

	* added lines to generated code to disable compiler warnings about
	unused vars under MSVC and Borland C++. I have no solution for gcc
	(gcc doesn't seem to have #pragma or any other mechanism to
	disable warnings from the source).

2000-03-07  Andras Varga

	* bugfix for distributed execution: corrected handling of machine
	parameters at network level

	* changed test12.ned and test13.ned

2000-01-13  Andras Varga

	* ------ omnetpp-2.0b3 released ------

	* "-s" option (output file suffix) was added

2000-01-04  Andras Varga

	* corrected '*new cPar = (char *)something' lines in the generated
	code to '*new cPar() = (char *)something', because in the first
	case, the cPar(char *) constructor was called (wrongly) instead of
	cPar() and operator=(char *).

1999-12-19  Andras Varga

	* changes in generated code due to cPar interface change (see
	sim/ChangeLog)

1999-12-18  Andras Varga

	* changed isA() to className() in generated code (see
	sim/ChangeLog)

	* macro names in module interface declarations (Interface...End)
	changed to reduce chance of name clashes

1999-12-05  Andras Varga

	* Makefile.vc added

1999-12-05  Andras Varga

	* compiled with MSVC. enbf.h added.

	* added generated files enbf.tab.c and lex.yy.c to CVS to make it
	possible to build GNED where flex/bison is not available

1999-08-15  Andras Varga

	* ------ omnetpp-2.0b2 released ------

	* bugfix: with "like", simulation crashed if the actual module
	type didn't have all parameters. (Brent's bug)

1999-07-17  Andras Varga

	* help text changed

1999-07-10  Andras Varga

	* ebnf.y fixed, nedc works fine again.

1999-06-30  Andras Varga

	* ebnf.y ported back from GNED

	* added nedc.ide and b.bat

	* doesn't work yet!

1999-06-21  Andras Varga

	* all sources checked in under CVS

	* makefile.in modified for use with GNU Autoconf; also renamed to
	Makefile.in

	* version.log renamed to ChangeLog

	* removed support for DOS with BC3.1

	* portability change: ebnf.y now includes malloc.h

1999-02-07  Andras Varga

	* updated for sim174

1999-01-25  Andras Varga

	* updated for sim172b: simulation.error() --> simError()

1998-12-27  Andras Varga

	* #include <malloc.h> changed to <stdlib.h>

	* makefile renamed to makefile.in

1998-08-17  Andras Varga

	* in the generated code, added check_error() to the 'if (isInput)
	read' lines

1998-08-15  Andras Varga

	* error message format changed to Borland-like for easy
	integration into the BC IDE ($CAP MSG(BORL2MSG) transfer macro can
	be used)

1998-07-15  Andras Varga

	* small fixes

1998-07-02  Andras Varga

	* some error messages made more clear

1998-06-09  Andras Varga

	* upgraded for sim162

1998-06-05  Andras Varga

	* minor bug (with display strings) fixed

1998-05-11  Andras Varga

	* shared ebnf.y/ebnf.lex files updated from GNED package

	* minor grammar change: made a bit more tolerant with semicolons

	* new: synonyme for `include' keyword: `import'.  I feel that
	'importing' is closer to what really happens (thanks Geza!)

1998-05-04  Andras Varga

	* ebnfcfg.h added, ebnf.lex/ebnf.y modified so that grammar source
	can be shared with GNED

1998-04-14  Andras Varga

	* "display:" phrase added to NED language; it is to support
	visualization/animation in Tkenv and other GUI simulation tools.
	See SIM's version.log for info on setDisplayString(type).

1998-02-14  Andras Varga

	* "generate vs not generate code from include files" problem:
	reverted back to pre-98 versions (98-103 were never released).

	* improved error msg format

	* JAR was renamed to NEDC.  This was necessary to reduce
	confusion: ARJ software has an archiver called jar; on Sun, Java
	archiver is also called jar; and JAR compiles NED files anyway.
	So this version is NEDC104.

1998-02-10  Andras Varga

	* bugfixes on #102; output code cleaned up around 'if' sections

1998-02-08  Andras Varga

	* typed parameters and type checking added to NED language and Jar compiler.
	  Parameters can be declared: numeric, const numeric, string, bool, anytype.
	    Syntax:
	           module Foo
	              parameters:
	                nn1,
	                nn2: numeric,
	                nn3: numeric const,
	                bb: bool,
	                ss: string,
	                aa: anytype;
	                ...

	Default type is numeric (as for nn1).  Anytype turns off type
	checking for the parameter, it will be compatible with any other
	type.  In computations, bool is treated as numeric.

	* C-style expressions completed with NEW bitwise operators:
	   & and, | or, # xor (Note that ^ is reserved for power!)
	   ~ complement, << >> shift

	    Bitwise operators raised to one rank higher precedence than in C
	    (just above ==,!=,<,>,<=,>=). Conditional (?:) is also at higher
	    level than in C, just above &&,||,##.

	* notation of logical operators changed:
	   && and, || or, ## xor (does not exist in C), ! not

	* compatibility: requires sim154 or above

1998-02-05  Andras Varga

	* development version

1998-01-01  Andras Varga

	* initial version of typed parameters added; still bogus

	* testNN.ned files cleaned up a bit

1997-12-13  Andras Varga

	* check for unset submodule parameters have been disabled. Now all
	parameters not explicitly set will be 'Input'.

	* known problem: if the same module gets included more than once
	in a ned file, C++ compiler will report duplicated symbols. This
	could be eliminated if Jar kept track what has been written out.

1997-12-13  Andras Varga

	* now generates code from include files too

	* uses Register_Module() macro

	* compatible with: sim150 and up

1997-10-02  Andras Varga

	* cleaned up & renamed several member functions; compatible with
	sim147

1997-07-10  Andras Varga

	* changes to makefile; #ifdefs in source to get it compiled with
	Cygnus gcc

1997-07-06  Andras Varga

	* handling of CONST parameters changed

	* support for consistency check of module interface declarations

1997-06-30  Andras Varga

	* INPUT now can be used without specifying default value

	* fixed bug with the NOT operator

1997-04-18  Andras Varga

	* bug with 'ancestor ref' parameters fixed

1997-04-12  Andras Varga

	* Change in generated source: 'value.cancelindirection()' placed
	before each setting of 'value' (otherwise, ref parameters would
	cause problems)

1997-04-06  Andras Varga

	* small changes to makefile

	* copyright msg changed; a typo corrected

1997-03-10  Andras Varga

	* bugfixes

1997-03-07  Andras Varga

	* new feature: submodule type can be parameter. Syntax:
	modulename : parametername LIKE moduletype

1997-03-03  Andras Varga

	* updated for sim108: knows about genk_xxxx functions

1997-02-25  Andras Varga

	* bugfixes

	* after submodule parameters sections, "if (isinput()) read()"
	added for each parameter

	* time units can be used as constants (e.g. 10ms, 1h 2m .001s)

1997-02-24  Andras Varga

	* makejar.bat added

1997-02-21  Andras Varga

	* internal expression handling totally rewritten; now it goes with
	sim103

	* keyword 'system' changed to 'network'

	* small additional modifications

1997-02-15  Andras Varga

	* data rate support added

1997-01-16  Andras Varga

	* jar_mod.c: bug with "inline connection delay specification"
	('mm1.gg1 --> delay a --> mm2.gg2') fixed

1997-01-16  Andras Varga

	* jar.c: '-i' option corrected to '-I'

1997-01-10  Andras Varga

	* loop connection: 'start_index<=end_index' check removed from
	generated code

1996-12-15  Andras Varga

	* added support for delay, error phrases in connections

	* made case-sensitive

1996-12-01  Andras Varga

	* modified makefile for use with yacc

1996-11-01  Andras Varga

	* added oparators: == != < <= > >= and or ..

	* now recognizes external C++ functions

	* `sizeof()' and `index' operators

	* support for <-- (not only -->)

	* implemented conditional sections, conditional connections

	* `nocheck' operator

	* changed the implementation of links

	* removed "Mapping:" section (that info was moved into omnet.ini)

	* bug fixes etc

1996-09-29  Andras Varga

	* changed global "Machines:" keyword to "Mapping:" and implemented
	it

	* inserted adding of "default" machine to modules with no
	"machines:" definition

	* added opt_semicolon to make compiler more tolerant

	* fixed small bugs

	* to do: implement the I/O interfaces

1996-05-01  Andras Varga

	* PVM, machine, on

	* to do: system module: host.domain, only the defined formal
	machines can be used

1996-03-29  Andras Varga

	* increased buffer sizes....

1996-03-29  Andras Varga

	* under MSDOS, limit output filenames to 8+3 chars

	* stop processing if there's parse error in ANY file

1996-03-29  Andras Varga

	* totally rewritten parameter handling mechanism, for example
	changed implementation of REF to parentmodpar() mechanism.

1996-03-29  Andras Varga

	* simplified the grammar: functionvalue eliminated, inputvalue
	simplified

	* discovered that expressions cannot be nested (because code uses
	global variables). This way, one cannot write "-uniform(0,1)^2"!!!

1996-03-29  Andras Varga (15-29)

	* finished rewriting the grammar. Now the simple modules can have
	different gate vector sizes for each occurrence in the NED file;

	* deleted keywords `EndSubmodules', `EndConnections' etc;

	* added `GateSizes' section to compound module definition

	* added `sizeof(gate_vector_name)' phrase to NED

	* added several `check_xxx()' macros to generated code

	* changed the generated code for the `input' parameters

	* in the generated code, changed addgate()/addpar() calls to
	setgatesize()/setpar() -- addgate()/addpar() was moved to cMod's
	constructor

	* commented how expressions work

1996-03-15  Andras Varga

	* changed the grammar!!!  Not finished yet.

1996-03-15  Andras Varga

	* changed var names in generated code etc.

1996-03-15  Andras Varga

	* begun porting to DOS/Borland C++

	* moved global variable definitions from jar.h to jar.c

	* added function prototypes and changed empty funtion arg list
	'()' to '(void)' to enable arg list checks in C

	* several small modifications to make source portable between
	yacc/bison, lex/flex and between different platforms

	* reorganized header files and renamed jar.h to jar_func.h; added
	several comments

	* added banners and comments to src files

	* added jar_yyrestart() function for compatibility with flex

	* added jar_mem.c to help debugging memory allocation problems

	* fixed a bug in jar_mod.c (pointer deallocated twice)

	* eliminated the source of several null pointer
	assignments/segmentation faults by adding jar_strcpy(),
	jar_strcat(), jar_strdup() etc.

	* begun tailoring generated code: changed format of channel
	creation function in generated C++ src

	* JAR now compiles and works under DOS/Borland C++ 3.1, DOS/DJGPP
	V1, Linux/Gnu C++

1995
	Initial version of JAR (the NED-to-C++ compiler) was written by
	Alex Paalvast, Jan Heijmans and Robert van der Leij, during summer 1995.
