2024-10-08  ------ omnetpp-6.1.0 released ------

2024-07-11  Rudolf Hornig

	* build: scave bindings now link directly with the created .o files
	instead of the common and scave shared libs

	This avoids depending on the common and scave shared libs which in turn
	allows us to use the scave bindings module even if omnet++ is not
	installed on the machine. This opens the possibility to submit the
	library to pypi.

	Additionally, there was a shared library loading issue on recent versions
	of msys2 systems that prevented the loading of the model. Avoiding the
	use of shared libs works around this issue.

	NOTE: probably it would be even better to build both static and shared
	libraries from OMNeT++ at the same time (instead of choosing at
	configuration time) and then link specifically with the static libs
	(instead of enumerating all the .o files directly)

2024-07-08  Rudolf Hornig

	* build: fix nanobind build process on Windows

2024-07-08  Rudolf Hornig

	* nanobind upgrade 1.7 -> 2.0

2024-06-04  Rudolf Hornig

	- build: Fix several issues while building scave Python bindings.
	Introduced WITH_SCAVE_PYTHON_BINDINGS variable to control whether
	Python scave bindings are built.

2024-04-05  Andras Varga

	* IndexFileWriter: change version number written into vci to version=3, to
	be consistent with vci files written by simulations.

2023-10-19  Attila Torok

	* Use the new nb::ndim in scave_bindings.

2023-10-19  Attila Torok

	* Update nanobind to v1.7.0.

2023-10-05  Attila Torok

	* Build: Don't skip building opp_scavetool in default target.

2023-08-16  Attila Torok

	* Extend scave_bindings.cc with new functions, to support changes in the
	omnetpp.scave Python package.

2023-03-30  Attila Torok

	* Add scave_bindings.cc to hold Python bindings to make the scave library
	accessible from omnetpp.scave Python package. Uses nanobind.

2023-04-06  Attila Torok

	* Add nanobind (v1.5.0) and robin_map (v1.2.1) as bundled 3rdparty
	code.

	Sources: https://github.com/wjakob/nanobind/releases/tag/v1.5.0
	https://github.com/Tessil/robin-map/releases/tag/v1.2.1

2022-05-16  Attila Torok

	* Use C++ headers instead of C ones, e.g. <cstdlib> instead of <stdlib.h>

2024-02-01  ------ omnetpp-6.0.3 released ------

2023-10-06  ------ omnetpp-6.0.2 released ------

2023-09-22  Attila Torok

	* Fix ResultItem::getDataType(): Support type="bool", for displaying vectors
	with bool data type (fixes #1041).

2023-04-25  Attila Torok

	* Fix GCC warning -Wformat-zero-length in ResultFileFormatException

2023-04-25  Attila Torok

	* Fix "variable set but not used" warnings

2023-04-26  Levente Mészáros

	* StatisticsResult, HistogramResult: getAvailableFields(): Removed SUM
	fields from list of available fields, because the SUM field is meaningless
	and therefore not supported in the weighted case.

2023-02-08  Andras Varga

	* IDList: prevent crash if sort functions are called with wrong item types

2023-02-05  Andras Varga

	* resultitems.h: Clarify the meaning of ResultItem::getDataType(), and let
	ParameterItem's method return NA to indicate that it is not meaningful for
	parameter items.

2023-07-27  Rudolf Hornig

	* Fix a build error (removed function) when building with c++20 enabled

2022-05-18  Attila Torok

	* build: Disable implicit make rules by setting .SUFFIXES to empty

2022-05-16  Attila Torok

	* Fix build by including <memory> for std::unique_ptr

2022-09-01  ------ omnetpp-6.0.1 released ------

2022-05-18  Attila Torok

	* build: Disable implicit make rules by setting .SUFFIXES to empty

	* Fix build by including <memory> for std::unique_ptr

2022-04-11  ------ omnetpp-6.0 released ------

2022-04-06  Andras Varga

	* Fix various memory leaks found by AddressSanitizer

2021-11-24  Andras Varga

	* OmnetppResultFileLoader: fix double-unquoting of tokens. As LineTokenizer
	already strips one layer of quotes, an additional unquoteString() is not
	needed (and in fact it causes an error if token itself starts with
	quotation mark).

2021-10-12  Andras Varga

	* OmnetppResultFileLoader: Allow loading histograms with equal bin edges.
	Such thing can happen if nearly-equal bin edges are printed with
	insufficient precision, generating the same character sequence in the
	file. The workaround is to merge such bins.

2021-10-05  Andras Varga

	* opp_scavetool: add "--allow-nonmatching" option, for the benefit of our
	omnetpp.scave.results Python package.

2021-06-07  Attila Torok

	* Add a READER_MUTEX on the RFM to IDList::filterByRun()

2021-06-03  Attila Torok

	* JsonExporter: fix: properly filter results by run when exporting,
	to avoid one result incorrectly showing up for multiple runs [reported
	by Daniel Stolpmann]

2021-06-03  Attila Torok

	* Add IDList::filterByRun()

2021-06-03  Attila Torok

	* Add missing #include <algorithm>

2021-06-03  Attila Torok

	* Run::getProperty(): fix: compare run properties to prefixes using strncmp,
	instead of requiring the prefix to be the entire compared string.

2021-05-13  Andras Varga

	* Cosmetics on '// namespace' comments

2021-05-11  Andras Varga

	* Use opp_splitandtrim() instead of StringTokenizer; follow other changes
	in common/stringutil.h.

2021-03-08  Attila Torok

	* Fix grammar in the XSWT config form of the JSON exporter

2021-02-25  Andras Varga

	* opp_scavetool: remove obsolete info from help text

2021-02-16  Andras Varga

	* opp_scavetool: allow -T '' (currently exports empty data set)

2021-02-16  Andras Varga

	* opp_scavetool: small fix in processing '-T'

2021-02-17  Attila Torok

	* CSV export: Fill the "sumweights" column for unweighted statistics too
	in the output.

2021-02-16  Andras Varga

	* opp_scavetool: added -t / --list-paramassignments option

2020-11-13  Attila Torok

	* Modernizing: Use in-class member initializers wherever possible;
	use "=default" syntax for copy constructors where appropriate.
	Tool: clang-tidy plus manual editing where needed.

2020-05-28  Attila Torok

	* Add "isfield" result filter attribute

2020-05-28  Andras Varga

	* opp_scavetool: updated the output of "opp_scavetool help filter";
	added more examples.

2020-05-04  Andras Varga

	* fields.h/cc: Removed redundant filter classes.

2020-05-21  Andras Varga

	* Added ResultFileManager::getItemProperty(), ResultItem::getProperty(),
	use them in Matchables.

2020-05-05  Andras Varga

	* MatchableResultItem: speed up by delaying getItem() which is costly
	for field scalars.

2020-05-15  Andras Varga

	* ResultFileManager: added new getItems() overload.

2020-05-12  Andras Varga

	* Added ResultItem::getItemTypeString() and related string constants

2020-05-14  Andras Varga

	* ResultFileManager: fix crash on file reloading

2020-05-05  Andras Varga

	* ResultFileManager: added getSerial().

2020-05-05  Attila Torok

	* vectorutils: Don't crash in readVectorsIntoArrays if no InterruptedFlag
	was given.

2020-05-04  Andras Varga

	* Compile fix and addendum to recent paramassignments-related commit

2020-05-03  Andras Varga

	* ResultFileManager: IDList getter methods: no need for template

2020-05-03  Andras Varga

	* ResultFileManager: changes towards eliminating IDList::append().
	We prefer IDList to be immutable (makes it easier to write correct UI
	code)

2020-05-02  Andras Varga

	* ResultFileManager: remove redundancy in IDList getter methods

2020-05-02  Andras Varga

	* Reduce paramvalues-paramassignments confusion; remove "param:"
	prefix (use "config:" instead)

	Reason: "param:" is easy for users to confuse with accessing the saved
	parameters (ParameterResult), and "config:" already lets you access those
	config lines

2020-05-01  Andras Varga

	* IDList sorting: update selection indices while sorting.
	Important when IDList is used within a DataTable.

2020-04-30  Andras Varga

	* IDList sorting: new/renamed methods

2020-04-28  Andras Varga

	* IDList sorting refactored (~20x speedup for 1.5 million items, ~30s->1.5s)

	Idea: since accessing result items (whose fields act as sort key) is
	relatively expensive, extract and store keys prior to sorting. This
	reduces the number of result item accesses from n*log(n) to just n. The
	log(n) gain matters a lot when n is a million or more.

	Using lambda+template, stable_sort, InterruptedFlag.

2020-04-28  Andras Varga

	* IDList sort methods: added interruptedflag; changed from const
	InterruptedFlag& to ptr everywhere

2020-04-22  Andras Varga

	* Reduce field ScalarResult construction time.
	- spare ctor call and copying
	- spare stringpooling of module ptr
	- cache the result of suffixed names (spare string concatenation)

2020-04-22  Andras Varga

	* Use pooling for result attribute sets too.

	Two advantages: 1. saves memory (as attr sets of results are repeated all
	over) 2. reduces field scalar construction time (no need to copy the
	StringMap)

2020-04-20  Andras Varga

	* Proper "field scalars"

	Before, we stored the fields of statistics/histograms/vector as proper
	scalars as well, with an "isField" bit set, in addition to inside
	StatisticsResult/VectorResult items.

	This patch removes this redundancy of storage. Instead, we extend IDs so
	that they represent a scalar as "field x or statistics or vector y". In
	getItem() and getScalar() of such an ID, we fabricate a temporary
	ScalarResult object, and return that by value.

	One trick to simplify usage is to pass a "buffer" ScalarResult into
	getItem()/getScalar(), so it can return a simple pointer no matter
	whether the ID identifies a field scalar or a normal result item.

2020-04-20  Andras Varga

	* Modernize more for() loops

2020-04-18  Andras Varga

	* Return result items as pointers (to reduce confusion w/ coming
	field scalars)

2020-04-14  Andras Varga

	* More unused stuff deleted from fields.cc/h, reduce number of
	classes.

2020-04-14  Andras Varga

	* Added Scave class with name constants; use everywhere

2020-04-20  Andras Varga

	* Remove "Ptr" suffix from method names; introduce RunAndValueList
	typedef for readability

2020-04-20  Andras Varga

	* Fix: opp_scavetool: when listing run attrs, runs were not sorted

2020-04-13  Andras Varga

	* Split resultitems.cc/h from resultfilemanager.cc/h

2020-04-11  Andras Varga

	* IDList: remove some stuff we no longer need

2020-04-14  Andras Varga

	* Speed up runattr, itervar and config matching.

	Don't copy the string in each iteration when looping through an IDList.

2020-04-10  Andras Varga

	* IDList: make IDList immutable (remove mutator member functions)

	Motivation: it makes it easier to write correct code in Java.

	IDLists are often cached at various places in Java, in the assumption
	that its contents never changes. Now it is guaranteed.

	An op=() still exists in C++ for technical reasons, but it's not
	accessible from Java.

	For building IDLists one should use std::vector<ID>, which goes by the
	name IDListBuffer in Java.

2020-03-27  Attila Torok

	* Minor error message improvement in CSV "spreadsheets" exporter.

2020-04-08  Andras Varga

	* ResultFileManager: getUniqueAttributeNames()->getUniqueResultAttributeNames(), etc.

2020-04-04  Andras Varga

	* IDList: hashCode64() added, dup() removed

2020-04-02  Attila Torok

	* Replace deprecated std::ptr_fun with std::ref.

2020-03-31  Andras Varga

	* IDList: copy ctor and move ctor to work as they are supposed to.

	Old code pre-dated C++11 move constructors.

	SWIG doesn't do std::move by itself when constructing the return value,
	it needs a little convincing, in the form of %typemap(out).

2020-03-31  Andras Varga

	* IDList: do not dynamically allocate the vector

2020-03-31  Andras Varga

	* ResultFileManager: remove getAllItems() includeFields option, and
	related -y/--add-itervars-as-scalars option from opp_scavetool

	It was not used/working, because we no longer add itervars as "fake"
	scalars to the data at load time.

2020-03-31  Andras Varga

	* ResultFileManager: rename: getUniqueNames() -> getUniqueResultNames(), etc.

2020-03-31  Andras Varga

	* ResultFileManager: optimize getUniqueNames()

2020-03-31  Andras Varga

	* ResultFileManager: partition to use filerunids (faster due to
	fewer pointer dereferences)

2020-03-31  Andras Varga

	* ResultFileManager: more 'for' loops converted

2020-03-30  Andras Varga

	* ResultFileManager: refactoring (use collectIDs where possible)

2020-03-30  Andras Varga

	* ResultFileManager: added getPartitionByFile(); compile fix for
	earlier commit

2020-03-05  Andras Varga

	* ResultFileManager: refactoring: store results with FileRun not
	with ResultFile

	Result IDs now contain FileRun index instead of ResultFile index.

	Many methods became more natural this way, and both getUniqueRuns(idlist)
	and getUniqueFiles(idlist) are much more efficient.

	Some auxiliary std::maps could be removed.

	More 'for' loops modernized.

2020-03-29  Andras Varga

	* ResultFileManager: return StringSet and other STL containers by
	value not by pointer. Return-by-pointer was old code, written before
	C++ had move constructors.

2020-03-28  Andras Varga

	* ResultFileManager: added getPartitionByRun()

2020-03-28  Andras Varga

	* ResultFileManager: performance boost of getUnique methods

2020-03-27  Andras Varga

	* IDList: added unchecked append() operation

2020-03-26  Attila Torok

	* Fix CSV-R exporting of PARAMETER type results.

2020-03-18  Andras Varga

	* ResultFileManager: added "limit" argument to filterIDList()

2020-03-17  Andras Varga

	ide/* ResultFileManagerEx: some cleanup

2020-03-14  Andras Varga

	* loadFile(): no exception on interruption

	On the Java side, InterruptedException arrives as normal
	java.lang.RuntimeException, so it cannot be distinguished from actual
	errors. Better not throw it. retval=null + InterruptedFlag also indicates
	that interruption occurred.

2020-03-14  Andras Varga

	* Remove inputName from loadFile() arg list

	Issue: when loadFile() detects that a file is already loaded and up to
	date, but its inputName field is different, should it update? In the IDE,
	it should, but this decision should not be built into the API.

	So in the new code, we call setFileInput(file,inputName) separately after
	the loadFile() call.

2020-03-12  Andras Varga

	* ResultFileManager: added unloadFile(const char *displayName)

2020-03-11  Andras Varga

	* ResultFile: added getFileSize(), getModificationDate(), etc.

2020-03-11  Andras Varga

	* Added ResultFileManager::clear()

2020-03-11  Andras Varga

	* ResultFileManager, OmnetppResultFileLoader: rename fileName to displayName,
	to reduce chance of bug from mixing it up with fileSystemFileName.
	Plus fixes to some bugs where they *were* actually mixed up.

2020-03-09  Andras Varga

	* Result file loading: support for RELOAD_IF_CHANGED, using file
	fingerprints (filesize+date/time)

2020-03-09  Andras Varga

	* Logging during result file loading (if verbose)

2020-03-09  Andras Varga

	* Make result file loading interruptible

2020-03-07  Andras Varga

	* ResultFileManager::loadFile() interface redesigned (takes option
	flags and interruption flag)

2020-03-06  Andras Varga

	* opp_scavetool: Initial attempt to directory and glob/globstar
	loading. Will be replaced by later commits.

2020-03-03  Levente Mészáros

	* Added support for recursively loading scalar and vector files from
	a directory (1st iteration).

2020-03-07  Andras Varga

	* OmnetppResultFileLoader: doLoadFile() factored out.

2020-03-04  Andras Varga

	* ResultFileManager: added several "getNum..." methods, for use in the Inputs page.

2020-03-02  Levente Mészáros

	* Added a number of maps to ResultFileManager for files, runs and fileruns
	for performance reasons.

	Replaces linear search at a number of places with map lookup.
	This significantly speeds up loading a large number of files (>10,000) in
	both opp_scavetool and the Analysis Tool in the IDE.

2020-03-02  Levente Mészáros

	* OmnetppResultFileLoader: Fixed memory issues during result file loading.

2020-01-15  Attila Torok

	* Add "parameter" as a result item type to MatchableResultItem.

2019-10-28  Attila Torok

	* Simplification, cleanup, return nullptr instead of throwing in
	SqliteVectorDataReader.

2019-10-21  Attila Torok

	* scavetool: Don't reorder the runs with a multimap when querying metadata.

2019-10-16  Attila Torok

	* Implement vector data loading from files in SQLite format.

2019-10-16  Attila Torok

	* SQLite result loading: Don't forget to actually load parameter "results".

2019-10-16  Andras Varga

	* Remove obsolete SQLite schema file schema-sqlite.sql. Definitive schema is
	in common/sqliteresultfileschema.cc

2019-10-03  Andras Varga

	* Fix vector file indexing bug that caused certain blocks to be left
	out from the index.

	If there was a vector declaration mid-file, the data block that
	immediately precedes it was not included in the index.

	Added Assert() to ensure this does not happen again.

2019-10-01  Attila Torok

	* Comment fix for new metadata querying functions.

2019-09-26  Attila Torok

	* opp_charttool: Add get_config_entries to results.py.

2019-09-26  Attila Torok

	* Add list config entries option to the query command of
	opp_scavetool, WIP usage in charttool

2019-09-24  Attila Torok

	* opp_scavetool: When querying metadata, apply the filter to those, not
	always to the results.

2019-09-05  Attila Torok

	* Improve quoting in result files.

2019-08-02  Attila Torok

	* Fix: Don't add config entries multiple times when loading results of
	the same run from multiple files, like a .sca and a .vec.

2019-07-30  Attila Torok

	* IDList: added parameter-related methods: areAllParameters(),
	sortParametersByValue().

	* ResultFileManager: handling of results of type PARAMETER

2019-09-02  Attila Torok

	* Accept both "version 2" and "version 3" signatures for .vec files

2019-08-01  Andras Varga

	* opp_scavetool: assist user by printing available export formats
	when needed

2019-07-30  Andras Varga

	* Result file version number bumped from 2 to 3.

	Reason: "par" and "config" lines added, "param" lines removed.

2019-07-30  Andras Varga

	* opp_scavetool: accept exporter options via the --<key>=<value>
	notation as well

2019-07-30  Andras Varga

	* Exporters: export separate underflow/overflow values instead of
	underflow/overflow "bins"

	In the exported files, now, len(binEdges) == len(binValues)+1

2019-07-18  Attila Torok

	* ResultFileManager: Added param assignment (config entry) and value querying:
	getUniqueParamAssignmentKeys(), getMatchingConfigEntries(),
	getMatchingParamAssignments(), getMatchingNonParamAssignmentConfigEntries()

2017-07-16  Andras Varga

	* Follow changes: common::Histograms now store binEdges, binValues plus
	underflow/overflow instead of bins.

	New representation is more correct (underflow/overflow are not really
	bins because they are infinite width), and also more inline with Python's
	histogram representation.

2019-07-23  Andras Varga

	* CSV-S (spreadsheet) exporter to support exporting parameters too;
	some features removed.

	- Remove scalarsGroupBy option (all spreadsheet programs have pivoting
	  functionality);
	- Remove DataSorter and DataTable (ScalarDataTable, etc) classes that
	  were only used by CsvSpreadExporter.

2019-07-23  Andras Varga

	* Updated exporters to save parameters too (except CSV-S)

2019-07-18  Andras Varga

	* opp_scavetool updated to deal with parameters as well

2019-07-18  Andras Varga

	* "par" loading from scalar files into ResultFileManager

2019-07-18  Andras Varga

	* Load "config" lines, also from SQLite files

	* Treat "param" lines as "config"'s obsolete, more restricted synonym.

	* ResultFileManager: paramAssignment -> configValue rename

2018-07-09  Andras Varga

	* Result files: save full config, not only param assignment lines

	Essentially, "param" -> "config" rename in the result file format.

2019-06-13  Attila Torok

	* scavetool: Add options to limit vector data by simulation time:
	--start-time <time>, --end-time <time>.

2019-06-06  Attila Torok

	* IDList: subtract() changed to take const ref; added getDifference().

2019-05-30  Attila Torok

	* Added memoryutils.cc/h to contain getAvailableMemoryBytes().

2019-06-13  Attila Torok

	* scavetool: Fix: Filter expression can no longer be empty, defaults to '*'.

2019-06-12  Rudolf Hornig

	* Removed unimplemented method XYArray::sortByX().

2019-06-12  Rudolf Hornig

	* Compile fix: malloc_trim() is available only on Linux.

2019-05-29  Attila Torok

	* One fewer vector data conversion, add includePreciseX
	parameter for loading.

2019-05-28  Attila Torok

	* Call malloc_trim (and call GC) after loaded vector data is no longer
	needed.

2019-05-28  Attila Torok

	* readVectorsIntoArrays(): Add memory limit and simtime range to vector data
	loading.

2019-05-27  Attila Torok

	* Refactoring of memory handling during vector loading.

2019-05-26  Andras Varga

	* Allow interrupting the result loading process.

2019-05-25  Andras Varga

	* IDList: implemented equals(), bulkAdd() etc.

2019-05-25  Andras Varga

	* Exporters: tweak descriptions: remove "Export results in..." prefix.

2019-04-30  Attila Torok

	* ResultFileManager: Do not allow empty or null filter expressions

2019-04-23  Attila Torok

	* Remove vector operations functionality from opp_scavetool and exporters,
	as the underlying functionality was gone with the removal of DataflowManager
	and filter nodes. The recommended way of processing output vectors is with
	Python (NumPy).

2019-04-23  Attila Torok

	* Add includeEventNumbers parameter to IndexedVectorFileReader.

2019-04-23  Attila Torok

	* Cleanup: Move vector data loading functions into its own source
	files.

2019-04-23  Attila Torok

	* Add a note about IDList's "copy" constructor.

2019-04-23  Attila Torok

	* Remove vector file rebuilding (while indexing).

2019-04-23  Attila Torok

	* Cleanup: Delete DataflowManager, its Nodes, and commented out all
	usages.

	Motivation:	Vector operations can be more easily and more efficiently done
	from Python, using NumPy, because vectors are expected to fit into memory
	nowadays. DataflowManager was designed ~20 years ago, when memory was a much
	more scarce resource.

2019-04-23  Attila Torok

	* Fix crashes by storing the Blocks in the VectorIndex by pointer
	(on the heap).

2019-04-18  Attila Torok

	* Rework how IndexedVectorFileReader works, load data using a new
	Adapter.

	Also rename OutputVectorEntry to VectorDatum. Drop unnecessary ~Ex class.

2019-04-18  Attila Torok

	* Blocks are now stored in VectorFileIndex, VectorInfo points into
	this.

2019-04-18  Attila Torok

	* Cleanup: Rework how vector file fingerprints are checked; rename
	indexfile.[h|cc] to vectorfileindex.[h|cc].

2019-04-18  Attila Torok

	* Cleanup: Make RunData an internal class of VectorFileIndex.

2019-04-18  Attila Torok

	* Cleanup: Separate IndexFileUtils into its own files.

2019-04-17  Attila Torok

	* Cleanup: Rename indexedvectorfile.[h|cc] to
	indexedvectorfilereader.[h|cc].

2019-04-17  Attila Torok

	* Cleanup: Separate IndexFileReader and IndexFileWriter from
	indexfile.[h|cc]

2019-04-17  Attila Torok

	* Cleanup: Put Block and VectorInfo into VectorFileIndex and
	separated IndexedVectorFileWriterNode into its own file.

2019-04-17  Attila Torok

	* Cleanup: Remove a now useless typedef, rename a C++ class:
	Blocks -> std::vector<Block>, VectorData -> VectorInfo.

2019-04-17  Attila Torok

	* Cleanup: Renaming of several C++ classes and files

	- Files renamed to match names of contained classes
	- Add Node to end of VectorFileReader Node class names.
	- Rename IndexFile to IndexFileUtils.

2019-02-14  Attila Torok

	* The "attr:" prefix CHANGED MEANING in filter expressions. It is now used
	for result attributes only, and not for run attributes. Run attributes can
	be accessed with the new "runattr:" prefix.

	* Follow "attr:" -> "runattr:" rename in filter expressions.

2019-01-25  Attila Torok

	* Implement the new results API. Itervars are no longer added as
	scalars.

2019-02-14  Attila Torok

	* Small cosmetic changes in ResultFileManager.

2019-04-11  Andras Varga

	* Ported ExpressionFilterNode to the new Expression class

2019-04-04  Rudolf Hornig

	* More Makefile improvement.

2019-03-22  Andras Varga

	* Rename scavetool to opp_scavetool (we'd like all our tools to begin with opp_)

	* opp_scavetool: 'help' command refined; break long paragraphs in help

2019-01-16  Rudolf Hornig

	* Makefile improved.

2018-11-21  Attila Torok

	* Delete everything related to computed results.

2018-10-25  Attila Torok

	* CsvRecordsExporter: Do not emit a "value" column if there are no scalars exported.

2017-04-25  Andras Varga

	* ResultItem: added getItemType(); filter now understands 'type(scalar)' etc

2017-04-25  Andras Varga

	* ResultItem: Type renamed to DataType, getType() renamed to getDataType()

2018-11-05  Attila Torok

	* Fix build with C++17. Contribution by tomasz.jankowski.mail@gmail.com

2020-01-06  ------ omnetpp-5.6 released ------

2019-10-03  Andras Varga

	* Fix vector file indexing bug that caused certain blocks to be left
	out from the index.

2019-05-15  ------ omnetpp-5.5 released ------

2018-09-21  Attila Torok

	* Replace $* with "$@" in a couple of scripts.

2018-11-05  Attila Torok

	* Fix build with C++17. Contribution by tomasz.jankowski.mail@gmail.com.

2018-06-25  ------ omnetpp-5.4.1 released ------

2018-06-20  Rudolf Hornig

	* Added opp_scavetool as an alias for scavetool

2018-06-11  ------ omnetpp-5.4 released ------

2018-04-11  ------ omnetpp-5.3 released ------

2018-01-17  Andras Varga

	* SQLite result file loader: follow schema changes in common/ (column
	renames in "histogramBin" table)

2017-01-16  Andras Varga

	* scaveutils.h: remove unused TIME() macro; use the new(ish)
	opp_get_monotonic_clock_usecs() function as replacement when necessary.

2017-12-08  ------ omnetpp-5.2.1 released ------

2017-12-04  Attila Torok

	* ResultFileManager: crash fix: Prevent creating duplicate Run objects
	when only a computed File referred to it.

2017-09-18  ------ omnetpp-5.2 released ------

2017-08-27  Andras Varga

	* CSVRecExporter refinements:
	- remove underflow/overflow counts from exported binvalues arrays
	- drop initial -inf from exported binedges
	- move attr/runattr/param/itervar values into separate column 'attrvalue'

2017-04-06  Andras Varga

	* Modernizing: use C++11's range-based for loops where applicable, using
	clang-tidy's modernize-loop-convert.

	* Modernizing: replace INT64_PRINTF_FORMAT and LL with C++11's PRId64.
	Note: PRId64 includes the "d" that was not part of INT64_PRINTF_FORMAT
	alias LL.

2017-07-12  Andras Varga

	* Proper loading and exporting of weighted statistics
	- OmnetppResultFileLoader, SqliteResultFileLoader: updated
	- JsonExporter, CsvRecordsExporter, CsvForSpreadsheetExporter: export
	  fields related to weighted statistics

2017-06-27  Andras Varga

	* scavetool: do not export itervars as scalars by default; added -y,
	--add-itervars-as-scalars option to turn exporting itervars back on

2017-07-13  Andras Varga

	* ResultFileManager: follow change: itervars are no longer saved as
	scalars too, instead we add them (as scalars) from at load time.

	Added itervar-scalars can now be identified (ScalarResult contains an
	isItervar flag) and filtered out if as necessary. Corresponding
	ResultFileManager methods now accept an includeItervars flag.

2017-06-22  Andras Varga

	* scavetool: edits in verbose-mode output

2017-06-22  Andras Varga

	* Remove unused class IndexedVectorFileReaderNode2

2017-06-22  Andras Varga

	* IndexedVectorFileReaderNode: remove gettimeofday() calls once inserted
	for profiling purposes

2017-06-22  Andras Varga

	* OmnetppResultFileLoader: minor improvements:
	- better support for merging multiple instances of the same run in various files
	- fixes for extracting itervars from run attrs

2017-06-21  Andras Varga

	* ResultFileManager: do not store run number explicitly, as it no longer
	has much significance. It is still available as the 'runnumber' attribute.

2017-07-12  Andras Varga

	* Exporter refinements
	- verify that selected item types are a subset of supported item types
	- prevent accidentally appending to existing file

2017-04-06  Andras Varga

	* JSON and CSV exporter changes:
	- Python export changed to JSON export with optional Python flavour
	- CSV export renamed to "CSV for spreadsheet" and significantly improved
	 (also saves iteration variables for better run identification, etc)
	- another CSV export added ("CSV Records"), provenly suitable as input
	  for the read_csv() of Python PANDAS

2017-04-06  Andras Varga

	* Remove old export code:
	- removed export.cc/h and octaveexport.cc/h
	- scavetool: removed obsolete export commands 'vector' and 'scalar'

2017-04-04  Andras Varga

	* Follow change: iteration variables are now saved in result files
	separately from run attrs, e.g. into 'itervar' lines. Partial list
	of changes:
	- Run class: added getIterationVariables() method
	- ResultFileManager: added methods like getUniqueIterationVariableNames()
	- OmnetppResultFileLoader, SqliteResultFileLoader: updated
	- scavetool: added --list-itervars option

2017-03-31  Andras Varga

	* ResultFileManager, OmnetppResultFileLoader, etc: preserve order of
	paramAssignment entries, i.e. "param" lines in the result file.

2017-03-30  Andras Varga

	* SqliteResultFileLoader: updated: histBin table was renamed to histogramBin

2017-07-13  Andras Varga

	* scavetool: sort runs by runId, for consistent query output

2017-04-04  Andras Varga

	* scavetool: use opp_formatTable() for all -q output

2017-03-30  Andras Varga

	* Added StatisticsResult (HistogramResult sans histogram). Until now,
	statistic results in scalar files were loaded as several unrelated
	scalars, and were not available as a single object.

	* OmnetppResultFileLoader: refactoring

	* SqliteResultFileLoader: observe newly added isHistogram column

2017-03-28  Andras Varga

	* OmnetppResultFileLoader: fix: 'run' line is mandatory since version 4.0

2017-03-29  Andras Varga

	* SqliteResultFileLoader: loading of vector attrs and run params was missing

2017-03-28  Andras Varga

	* SqliteResultFileLoader: refactoring

2017-03-28  Andras Varga

	* SqliteResultFileLoader: use camelized names in SQL queries. Note:
	sqlite is case insensitive.

2017-03-21  Andras Varga

	* ResultItem classes: wrap access of naked data members into getter.
	This provides more flexibility in implementing data members, e.g.
	name strings and attribute sets can be pooled. Affects ScalarResult,
	VectorResult, HistogramResult, Run, FileRun, etc.

2017-03-20  Andras Varga

	* ResultFileManager, OmnetppResultFileLoader: remove fields numLines
	and numUnrecognizedLines (they were unused since introduction of sqlite
	readers)

2017-03-17  Andras Varga

	* DataTable classes: throw instead of ignoring errors

2017-05-25  Rudolf Hornig

	* Updated makefiles for speeding up the build:
	- generated files are created only once, even when using parallel build
	- binaries are copied to their final destination using proper makefile
	  targets

2017-05-08  ------ omnetpp-5.1.1 released ------

2017-03-31  ------ omnetpp-5.1 released ------

2017-03-16  Andras Varga

	* New Exporter framework and exporters: CSV, Python Source, OMNeT++ and
	SQLite Scalar/Vector exporter. The new exporter interface allows much more
	flexibility (arbitrary formats, not only table-based ones), and also allows
	for defining new exporters (including their UI) without any change to
	scavetool or the Analysis Tool in the IDE.

	In scavetool, the new 'export' command replaces the now-deprecated the
	'vector' and 'scalar' commands.

	New classes: Exporter, ExporterFactory (framework); CsvExporter,
	PythonExporter, OmnetppScalarFileExporter, OmnetppVectorFileExporter,
	SqliteScalarFileExporter, SqliteVectorFileExporter (concrete exporters)

2017-03-04  Andras Varga

	* Refactoring: the Statistics class has been moved the common library,
	so it can also be used by the result file writers.

2017-03-16  Andras Varga

	* IDList, XYArray: new methods; return BigDecimal by const ref

2017-02-20  Andras Varga

	* Fix: Scalar export crashed for empty result set

2017-02-17  Andras Varga

	* CSV export: use space as separator within table column names instead of "_"

2017-02-17  Andras Varga

	* Prefix class names of obsolete exporter classes with "Old".
	Old exporter class interface is completely broken, we'll make
	a fresh start.

2017-02-17  Andras Varga

	* Removed Octave and Matlab export.

	Reasons:

	1. poor data representation chosen in the output file, esp. for vector
	  (one time vector, and one value vector per OMNeT++ output vector,
	  where most values were NaN due to the common T vector!
	  2-column matrices for each vector would have been a better choice.)

	2. We don't want to promote Matlab/Octave use for result analysis.
	  Matlab/Octave users should use CSV export.

	Note: octaveexport.cc/h were unused (not in build).

2017-02-14  Andras Varga

	* Code style: Statistics: refactoring: drop "_" from data member names

2017-02-10  Andras Varga

	* Refactoring: less conversion between std::string and const char*

2017-02-10  Andras Varga

	* fields.h: reindent switch statements

2017-02-10  Andras Varga

	* Refactoring: spare some more unnecessary copying

2017-02-10  Andras Varga

	* Refactoring: use typedef for shorthand

2017-02-10  Andras Varga

	* Refactoring: methods moved out of line; return Statistics as const ref

2017-02-10  Andras Varga

	* Refactoring: pass around ResultItemFields as const ref

2017-02-10  Andras Varga

	* Refactoring: Take std::strings by const ref

2017-02-10  Andras Varga

	* Code formatting ('&' to gravitate left)

2017-02-10  Andras Varga

	* datatable.cc/h split from export.cc/h

2017-03-10  Andras Varga

	* scavetool: "query" subcommand's mode switches changed to lowercase

2017-02-06  ------ omnetpp-5.1pre3 released ------

2016-12-23  Andras Varga

	* scavetool: added "query -f" option (add statistics fields as
	scalars)

2016-12-22  Andras Varga

	* scavetool refinements:
	- -r (list runs) to respect -D (run display format)
	- issue warning when no input files are given
	- understand "scavetool <command> -h/--help"

2016-12-23  ------ omnetpp-5.1pre2 released ------

2016-12-12  Andras Varga

	* scavetool: added query functionality, reorganized help into pages,
	autoindex vector files, etc.

	Details:
	- added 'query' subcommand
	- reorganized help into pages ('scavetool help <topic>')
	- 'info' subcommand merged into help (use 'help filters')
	- 'list' subcommand merged into 'query'
	-  default output file name changed to 'out.<ext>'

2016-12-12  Andras Varga

	* scavetool: internal refactoring
	- use exceptions for error handling
	- use C++ I/O instead of printf
	- turned into a class

2016-12-12  Andras Varga

	* export.cc: ScalarDataTable: fix NPE

2016-12-13  Andras Varga

	* ResultFileManager: added new methods filterIDList() and
	getUniqueModuleAndResultNamePairs()

2016-11-30  Rudolf Hornig

	* build: Makefile refactored. Added clang-c2 support and optimized
	the build process.

	* build: removed Makefile.vc, as Visual C++ builds are now handled
	by the standard Makefiles.

2016-11-25  Andras Varga

	* Revised SQLite-related code: error handling, internal logic,
	refactoring, etc.

	SQLite result files are mostly automatically detected and used by
	the library and scavetool.

	Implementation: result file loading was factored out of
	ResultFileManager, and done via two loaders: OmnetppResultFileLoader
	and SqliteResultFileLoader. For processing output vector data,
	an SqliteVectorReader class was added. There are two new node types:
	"sqlitevectorreader" and "vectorreaderbyfiletype"; the latter
	looks at the result file given to it, and instantiates either
	an OMNeT++ vector file reader or an SQLite vector file reader.

2016-11-23  Andras Varga

	* Added initial support for SQLite-based result files [Zoltan Bojthe]

2016-12-06  Andras Varga

	* DEFAULT_PRECISION renamed to DEFAULT_RESULT_PRECISION

2016-12-05  Andras Varga

	* isVectorFile() renamed to isExistingVectorFile(), and made it check
	file contents too. This is necessary so that the code can tell OMNeT++
	result files from SQLite result files.

2016-11-10  Andras Varga

	* Error messages refined (start with capital letter, use apostrophes
	for quoting, etc.)

2016-09-01  Rudolf Hornig

	* scavetool: include run attributes in scalar data exports

2016-06-23  Rudolf Hornig

	* The makefile now uses compiler-generated dependency files.

2016-04-13  ------ omnetpp-5.0 released ------

2016-03-10  ------ omnetpp-5.0rc released ------

2015-12-07  ------ omnetpp-5.0b3 released ------

2015-10-16  Andras Varga

	* omnetpp namespace made permanent (cannot be turned off):
	- removed configure option and preprocessor symbol USE_NAMESPACE
	- removed related macros: NAMESPACE_BEGIN, NAMESPACE_END,
	  USING_NAMESPACE, OPP, OPP_STR, OPP_PREFIX etc.

2015-07-20  ------ omnetpp-5.0b2 released ------

2015-06-16  Andras Varga

	* Cleanup: prefer ++it to it++ (less copying)

2015-06-08  Andras Varga

	* Cleanup: longer header guards

2015-06-08  Andras Varga

	* Cleanup: code formatting

2015-05-15  Andras Varga

	* Cleanup: use per-folder nested namespaces: omnetpp::envir, omnetpp::tkenv,
	omnetpp::layout, omnetpp::common, omnetpp::eventlog, etc.

2015-05-22  Andras Varga

	* Modernizing: added the 'override' keyword (C++11) to overridden methods;
	it becomes blank when using with an older compiler.

2015-05-21  Rudolf Hornig

	* Modernizing: replaced NULLs by 'nullptr' (C++11); it is defined as 0
	when using an older compiler.

2015-05-11  Andras Varga

	* Cleanup: data members renamed to camelCase

2015-04-20  Andras Varga

	* Cleanup: use C++ names of C headers (e.g. <cstdio> instead of <stdio.h>)

2015-04-12  Andras Varga

	* Cleanup: copyright years updated

2015-04-08  Andras Varga

	* Modernizing:

	- Use a fixed include path (-Iinclude -Isrc) for all source folders
	  under src/, and qualify cross-folder #includes with the folder
	  name (e.g. change #include "stringutil.h" to #include "common/stringutil.h").
	  This increases readbility and reduces the chance of including a wrong
	  header.

	- In source files, sort #include statements by folder.

2015-03-04  ------ omnetpp-5.0b1 released ------

2014-11-27  ------ omnetpp-4.6 released ------

2014-06-30  ------ omnetpp-4.5 released ------

2014-02-13  ------ omnetpp-4.4.1 released ------

2013-12-20  ------ omnetpp-4.4 released ------

2013-11-14  Rudolf Hornig

	* Fixes for compiling with clang

2013-09-12  ------ omnetpp-4.3.1 released ------

2013-04-02  ------ omnetpp-4.3 released ------

2013-02-08  ------ omnetpp-4.3rc1 released ------

2012-07-17  Tamas Borbely

	* Changes to allow implementing computed scalars in the IDE

2012-03-28  Andras Varga

	* scaveutils.cc: fixed #546: parseDouble() now understands
	MSVC's 1.#INF syntax (as well as all other sane syntaxes for
	infinity and NaN)

2012-03-13  ------ omnetpp-4.2.2 released ------

2012-01-17  ------ omnetpp-4.2.1 released ------

2011-12-08  Rudolf Hornig

	* implemented export function for histograms

2011-10-28  ------ omnetpp-4.2 released ------

2011-09-11  ------ omnetpp-4.2rc1 released ------

2011-05-05  ------ omnetpp-4.2b2 released ------

2011-02-23  ------ omnetpp-4.2b1 released ------

2011-01-21  Tamas Borbely

	* added -g option to 'scavetool scalar' command. The user can specify
	how the scalars are grouped into columns/variables. The default is also changed:
	each scalar value is written into one column (csv) or variable. This
	allows the user to import the csv into a spreadsheet and use the
	'pivot table' functionality to group the scalars as he likes.
	Old behaviour can be obtained by '-g name'.

2010-07-13  Tamas Borbely

	* added "substractFirstValue" filter, it substracts the first finite value
	  from the first and all subsequent values.

2010-06-11  ------ omnetpp-4.1 released ------

2010-05-31  ------ omnetpp-4.1rc2 released ------

2010-04-20  ------ omnetpp-4.1b4 released ------

2010-04-20  Andras Varga

	* fixed "timeavg" filter not to assume an initial (0,0) data point,
	and to suppress potential initial 0/0 = NaN (or NaNs)

	* fixed "integrate" filter not to assume an initial (0,0) data point

2010-03-14  ------ omnetpp-4.1b3 released ------

2009-09-04  Tamas Borbely

	* added 'sum' function to 'aggregator' node.

2009-05-15  Tamas Borbely

	* added 'aggregator' node for computing average/minimum/maximum of
	several vectors. It simply aggregates the values at the same simulation
	time (i.e. ignores interpolation-mode of the vectors).

2009-05-11  Tamas Borbely

	* added 'timewinavg' node. It computes the average of data points
	in fixed, equal length time intervals.

2009-03-12  ------ omnetpp-4.0 released ------

2009-02-27  ------ omnetpp-4.0rc2 released ------

2009-02-22: Andras Varga

	* added descriptions to the examples in the scavetool help text.

	* documented the "scalar" filter in the scavetool help text.

2009-02-19 Tamas Borbely

	* Renamed 'summary' command of scavetool to 'list'.

2009-02-19  Tamas Borbely

	* The new 'scalar' command can apply processing operations too.
	Currently only the 'scatter' operation accepted, and it creates
	a scatter plot dataset from the scalars. Its format is:
	"scatter(module,scalar,...)" where
	  - module,scalar: identifies the scalar selected for the X axis
	  - additional arguments identifies the iso attributes, they are
	    module, scalar pairs or names of run attributes

2009-02-19  Tamas Borbely

	* 'filter' command of scavetool had been split into 'vector' and
	'scalar' commands.

2008-12-12  ------ omnetpp-4.0rc1 released ------

2008-11-26  Andras Varga

	* library renamed to oppscave

2008-02-23  Andras Varga

	* Started the ChangeLog. The Scave library was added in omnetpp-4.0.
	It implements reading and processing of result files (output vector
	files .vec, and output scalar files .sca) and it is used by the
	Analysis tool in IDE. A command-line tool scavetool is also provided.
	Initial code was taken from the 3.x Plove and Scalars tools, then
	it was significantly expanded by Tamas Borbely.
