//==========================================================================
//  QTENVAPP.CC - part of
//
//                     OMNeT++/OMNEST
//            Discrete System Simulation in C++
//
//  contains:  Qtenv member functions
//
//==========================================================================

/*--------------------------------------------------------------*
  Copyright (C) 1992-2017 Andras Varga
  Copyright (C) 2006-2017 OpenSim Ltd.

  This file is distributed WITHOUT ANY WARRANTY. See the file
  `license' for details on this and other legal matters.
*--------------------------------------------------------------*/

#include "qtenvapp.h"

#include <cassert>
#include <cstring>
#include <cstdarg>
#include <cstdlib>
#include <csignal>
#include <cstdio>
#include <string>

#include <QtWidgets/QApplication>
#include <QtWidgets/QProxyStyle>
#include <QtWidgets/QTreeView>
#include <QtCore/QDir>
#include <QtCore/QDebug>
#include <QtWidgets/QMessageBox>
#include <QtWidgets/QVBoxLayout>
#include <QtWidgets/QDialogButtonBox>
#include <QtWidgets/QCheckBox>
#include <QtGui/QFontDatabase>
#include <QtCore/QThread>
#include <QtCore/QEventLoop>
#include <QtGui/QPainter>

#include "common/stringutil.h"
#include "common/stringtokenizer.h"
#include "common/fileutil.h"
#include "common/ver.h"
#include "common/unitconversion.h"
#include "envir/appreg.h"
#include "envir/speedometer.h"
#include "envir/matchableobject.h"
#include "envir/debuggersupport.h"
#include "omnetpp/csimplemodule.h"
#include "omnetpp/cmessage.h"
#include "omnetpp/cscheduler.h"
#include "omnetpp/ccomponenttype.h"
#include "omnetpp/csimulation.h"
#include "omnetpp/cconfigoption.h"
#include "omnetpp/regmacros.h"
#include "omnetpp/ceventlooprunner.h"
#include "omnetpp/cproperties.h"
#include "omnetpp/cproperty.h"
#include "omnetpp/cfutureeventset.h"
#include "omnetpp/platdep/platmisc.h"
#include "omnetpp/ccontextswitcher.h"
#include "sim/netbuilder/cnedloader.h"
#include "qtenvdefs.h"
#include "inspector.h"
#include "inspectorfactory.h"
#include "inspectorutil.h"
#include "moduleinspector.h"
#include "loginspector.h"
#include "genericobjectinspector.h"
#include "figurerenderers.h"
#include "watchinspector.h"
#include "mainwindow.h"
#include "timelineinspector.h"
#include "objecttreeinspector.h"
#include "canvasinspector.h"
#include "iosgviewer.h"
#include "messageanimator.h"
#include "displayupdatecontroller.h"
#include "messageanimator.h"
#include "qtenvenvir.h"
#include "runselectiondialog.h"

using namespace omnetpp::common;
using namespace omnetpp::envir;
using namespace omnetpp::internal;

//TODO use this code:
//va_list va2;
//va_copy(va2, va);  // see bug #107
//AppBase::componentMethodBegin(fromComp, toComp, methodFmt, va2, silent);
//va_end(va2);


// The icons and icons_dark resources contain the exact same resource aliases, with slightly different content.
//  - In a static library build, resources are not initialized automatically, so one of them has to be initialized manually.
//  - In a dynamic library build, all resources are automatically initialized, causing a collision, so one of them has to be cleaned up.
// As the resource initializers/cleanuppers generated by rcc are declared in the global namespace, these calls to
// Q_INIT_RESOURCE()/Q_CLEANUP_RESOURCE() also need to be done outside of any namespace.
void selectLightThemeIcons()
{
    Q_CLEANUP_RESOURCE(icons_dark);
    Q_INIT_RESOURCE(icons);
}

void selectDarkThemeIcons()
{
    Q_CLEANUP_RESOURCE(icons);
    Q_INIT_RESOURCE(icons_dark);
}

void initFontsResource()
{
    Q_INIT_RESOURCE(fonts);
}

namespace omnetpp {

extern cConfigOption *CFGID_NETWORK;
extern cConfigOption *CFGID_SIM_TIME_LIMIT;
extern cConfigOption *CFGID_REAL_TIME_LIMIT;
extern cConfigOption *CFGID_CPU_TIME_LIMIT;
extern cConfigOption *CFGID_DEBUG_STATISTICS_RECORDING;

namespace envir {
extern cConfigOption *CFGID_WARNINGS;
}

namespace qtenv {

//
// Register the Qtenv user interface
//
Register_OmnetApp("Qtenv", QtenvApp, 30, "Qt-based graphical user interface");

//
// The following function can be used to force linking with Qtenv; specify
// -u _qtenv_lib (gcc) or /include:_qtenv_lib (vc++) in the link command.
//
extern "C" QTENV_API void qtenv_lib() {}
// on some compilers (e.g. linux gcc 4.2) the functions are generated without _
extern "C" QTENV_API void _qtenv_lib() {}

Register_GlobalConfigOptionU(CFGID_QTENV_EXTRA_STACK, "qtenv-extra-stack", "B", "80KiB", "Specifies the extra amount of stack that is reserved for each `activity()` simple module when the simulation is run under Qtenv.");
Register_GlobalConfigOption(CFGID_QTENV_DEFAULT_CONFIG, "qtenv-default-config", CFG_STRING, nullptr, "Specifies which config Qtenv should set up automatically on startup. The default is to ask the user.");
Register_GlobalConfigOption(CFGID_QTENV_DEFAULT_RUN, "qtenv-default-run", CFG_STRING, nullptr, "Specifies which run (of the default config, see `qtenv-default-config`) Qtenv should set up automatically on startup. A run filter is also accepted. The default is to ask the user.");


// According to: https://doc.qt.io/qt-5/qproxystyle.html#details
class QtenvProxyStyle : public QProxyStyle
{
  public:
    QPixmap generatedIconPixmap(QIcon::Mode iconMode, const QPixmap &pixmap, const QStyleOption *opt) const override {
        // Override the disabled tool icon pixmap generator to make it simpler; dividing its alpha channel by 4 to
        // (hopefully) make it blend into the background better. Alternatively, we could keep the alpha as is, and
        // instead adjust the colors to be 1/4 part the pixel color and 3/4 parts the Active Window color of the Palette.
        // The original generator is at:
        // https://github.com/qt/qtbase/blob/ba3b53cb501a77144aa6259e48a8e0edc3d1481d/src/widgets/styles/qcommonstyle.cpp#L6402

        if (iconMode == QIcon::Disabled) {
            QImage im = pixmap.toImage().convertToFormat(QImage::Format_ARGB32);
            for (int y = 0; y < im.height(); ++y) {
                QRgb *scanLine = (QRgb*)im.scanLine(y);
                for (int x = 0; x < im.width(); ++x) {
                    QRgb pixel = *scanLine;
                    *scanLine = qRgba(qRed(pixel), qGreen(pixel), qBlue(pixel), qAlpha(pixel) / 4);
                    ++scanLine;
                }
            }
            return QPixmap::fromImage(im);
        }
        else
            return QProxyStyle::generatedIconPixmap(iconMode, pixmap, opt);
    }
};


// utility function
static bool moduleContains(cModule *potentialparent, cModule *mod)
{
    while (mod) {
        if (mod == potentialparent)
            return true;
        mod = mod->getParentModule();
    }
    return false;
}

static void checkQSettingsStatus(QSettings *settings)
{
    switch (settings->status()) {
        case QSettings::NoError:
            // nothing
            break;
        case QSettings::FormatError:
            std::cerr << "Qtenv: Format error with settings file: " << settings->fileName().toStdString() << std::endl;
            std::cerr << "Check that said file is valid INI." << std::endl;
            break;
        case QSettings::AccessError:
            std::cerr << "Qtenv: Access error with settings file: " << settings->fileName().toStdString() << std::endl;
            std::cerr << "Check that you have full read/write/create permissions on said file." << std::endl;
            break;
    }
}

bool QtenvApp::isLocalPrefKey(const QString& key)
{
    return (key == "last-configname") || (key == "last-runnumber") || key.startsWith("RunModeProfiles");
}

void QtenvApp::storeOptsInPrefs()
{
    setPref("updatefreq_express_ms", QVariant::fromValue<int>(opt->updateFreqExpress));
    setPref("event_banners", opt->printEventBanners);
    setPref("init_banners", opt->printInitBanners);
    setPref("short_banners", opt->shortBanners);
    setPref("allow_backward_arrows", opt->allowBackwardArrowsForHops);
    setPref("messagelog_digitgrouping", opt->messageLogDigitGrouping);
    setPref("no_logging_refreshdisplay", opt->noLoggingRefreshDisplay);
    setPref("animation_enabled", opt->animationEnabled);
    setPref("nexteventmarkers", opt->showNextEventMarkers);
    setPref("senddirect_arrows", opt->showSendDirectArrows);
    setPref("animation_methodcalls", opt->animateMethodCalls);
    setPref("methodcalls_duration", opt->methodCallAnimDuration);
    setPref("concurrent-anim", messageAnimator->getBroadcastAnimation());
    setPref("animation_msgnames", opt->animationMsgNames);
    setPref("animation_msgclassnames", opt->animationMsgClassNames);
    setPref("animation_msgcolors", opt->animationMsgColors);
    setPref("silent_event_filters", getSilentEventFilters());
    setPref("penguin_mode", opt->penguinMode);
    setPref("showlayouting", opt->showLayouting);

    QString layouterChoiceString;
    switch (opt->layouterChoice) {
        case LAYOUTER_FAST:     layouterChoiceString = "fast";     break;
        case LAYOUTER_ADVANCED: layouterChoiceString = "advanced"; break;
        case LAYOUTER_AUTO:     layouterChoiceString = "auto";     break;
    }
    setPref("layouterchoice", layouterChoiceString);

    setPref("arrangevectorconnections", opt->arrangeVectorConnections);
    setPref("bubbles", opt->showBubbles);
    setPref("expressmode_autoupdate", opt->autoupdateInExpress);

    QString stripNamespaceString;
    switch (opt->stripNamespace) {
        case STRIPNAMESPACE_NONE:    stripNamespaceString = "none";    break;
        case STRIPNAMESPACE_OMNETPP: stripNamespaceString = "omnetpp"; break;
        case STRIPNAMESPACE_ALL:     stripNamespaceString = "all";     break;
    }
    setPref("stripnamespace", stripNamespaceString);

    setPref("logformat", opt->logFormat.c_str());
    setPref("loglevel", cLog::getLogLevelName(opt->logLevel));

    setPref("logbuffer_maxnumevents", logBuffer.getMaxNumEntries());

    globalPrefs->sync();
    checkQSettingsStatus(globalPrefs);
    localPrefs->sync();
    checkQSettingsStatus(localPrefs);
}

void QtenvApp::restoreOptsFromPrefs()
{
    auto pref = getPref("updatefreq_express_ms");
    if (pref.isValid())
        opt->updateFreqExpress = pref.toLongLong();

    pref = getPref("event_banners");
    if (pref.isValid())
        opt->printEventBanners = pref.toBool();

    pref = getPref("init_banners");
    if (pref.isValid())
        opt->printInitBanners = pref.toBool();

    pref = getPref("short_banners");
    if (pref.isValid())
        opt->shortBanners = pref.toBool();

    pref = getPref("allow_backward_arrows");
    if (pref.isValid())
        opt->allowBackwardArrowsForHops = pref.toBool();

    pref = getPref("messagelog_digitgrouping");
    if (pref.isValid())
        opt->messageLogDigitGrouping = pref.toBool();

    pref = getPref("no_logging_refreshdisplay");
    if (pref.isValid())
        opt->noLoggingRefreshDisplay = pref.toBool();

    pref = getPref("animation_enabled");
    if (pref.isValid())
        opt->animationEnabled = pref.toBool();

    pref = getPref("nexteventmarkers");
    if (pref.isValid())
        opt->showNextEventMarkers = pref.toBool();

    pref = getPref("senddirect_arrows");
    if (pref.isValid())
        opt->showSendDirectArrows = pref.toBool();

    pref = getPref("animation_methodcalls");
    if (pref.isValid())
        opt->animateMethodCalls = pref.toBool();

    pref = getPref("methodcalls_duration");
    if (pref.isValid())
        opt->methodCallAnimDuration = pref.toInt();

    pref = getPref("concurrent-anim");
    if (pref.isValid())
        messageAnimator->setBroadcastAnimation(pref.toBool());

    pref = getPref("animation_msgnames");
    if (pref.isValid())
        opt->animationMsgNames = pref.toBool();

    pref = getPref("animation_msgclassnames");
    if (pref.isValid())
        opt->animationMsgClassNames = pref.toBool();

    pref = getPref("animation_msgcolors");
    if (pref.isValid())
        opt->animationMsgColors = pref.toBool();

    pref = getPref("silent_event_filters");
    if (pref.isValid())
        setSilentEventFilters(pref.toString().toStdString().c_str());

    pref = getPref("penguin_mode");
    if (pref.isValid())
        opt->penguinMode = pref.toBool();

    pref = getPref("showlayouting");
    if (pref.isValid())
        opt->showLayouting = pref.toBool();

    pref = getPref("layouterchoice");
    if (pref.isValid()) {
        QString layouterChoiceString = pref.toString();
        if (layouterChoiceString == "fast") {
            opt->layouterChoice = LAYOUTER_FAST;
        }
        else if (layouterChoiceString == "advanced") {
            opt->layouterChoice = LAYOUTER_ADVANCED;
        }
        else if (layouterChoiceString == "auto") {
            opt->layouterChoice = LAYOUTER_AUTO;
        }
    }

    pref = getPref("arrangevectorconnections");
    if (pref.isValid())
        opt->arrangeVectorConnections = pref.toBool();

    pref = getPref("bubbles");
    if (pref.isValid())
        opt->showBubbles = pref.toBool();

    pref = getPref("expressmode_autoupdate");
    if (pref.isValid())
        opt->autoupdateInExpress = pref.toBool();

    pref = getPref("stripnamespace");
    if (pref.isValid()) {
        QString stripNamespaceString = pref.toString();
        if (stripNamespaceString == "none") {
            opt->stripNamespace = STRIPNAMESPACE_NONE;
        }
        else if (stripNamespaceString == "omnetpp") {
            opt->stripNamespace = STRIPNAMESPACE_OMNETPP;
        }
        else if (stripNamespaceString == "all") {
            opt->stripNamespace = STRIPNAMESPACE_ALL;
        }
    }

    // overriding opts from prefs, but using the current ones (factory defaults) as fallback if no pref was stored yet
    opt->logFormat = getPref("logformat", opt->logFormat.c_str()).toString().toStdString();
    try { // level is stored as string, so we have to convert there and back. also have to store in opt, also forward to cLog via setter
        opt->logLevel = cLog::resolveLogLevel(getPref("loglevel", cLog::getLogLevelName(opt->logLevel)).toByteArray());
    } catch (cRuntimeError &) { } // resolveLogLevel might throw, but we can ignore it, and not change the factory default

    pref = getPref("logbuffer_maxnumevents");
    if (pref.isValid())
        logBuffer.setMaxNumEntries(pref.toInt());
}

void QtenvApp::storeInspectors(bool closeThem)
{
    // erasing the previously stored inspectors from the rc file
    QStringList groups = localPrefs->childGroups();
    for (auto group : groups) {
        if (group.startsWith("Inspector"))
            localPrefs->remove(group);
    }

    std::vector<Inspector *> toBeClosed;

    int index = 0;  // no particular meaning, just a unique identifier
    for (Inspector *insp : inspectors) {
        if (insp->isToplevelInspector()) {
            cObject *obj = insp->getObject();

            if (!obj || obj->getFullPath().empty())
                continue;

            localPrefs->beginGroup(QString("Inspector-") + QString::number(index));
            localPrefs->setValue("object", obj->getFullPath().c_str());
            localPrefs->setValue("classname", getObjectShortTypeName(obj, STRIPNAMESPACE_NONE));
            localPrefs->setValue("id", QVariant::fromValue(getObjectId(obj)));
            // TODO use qRegisterMetaTypeStreamOperators to set operator which can serialize InspectorType
            localPrefs->setValue("type", insp->getType());
            localPrefs->setValue("geom", insp->geometry());
            localPrefs->setValue("fullscreen", insp->windowState().testFlag(Qt::WindowFullScreen));
            localPrefs->endGroup();

            if (closeThem)
                toBeClosed.push_back(insp);

            index++;
        }
    }

    for (auto i : toBeClosed)
        deleteInspector(i);
}

void QtenvApp::updateStoredInspector(cObject *newObject, cObject *oldObject)
{
    if (!newObject || !oldObject)
        return;

    Inspector *inspector = dynamic_cast<Inspector *>(sender());
    ASSERT(inspector);

    QStringList groups = localPrefs->childGroups();
    for (auto group : groups) {
        if (group.startsWith("Inspector")) {
            bool ok = true;

            localPrefs->beginGroup(group);

            QVariant v = localPrefs->value("object");
            ok = ok && v.canConvert<QString>();
            QString object = v.value<QString>();

            v = localPrefs->value("classname");
            ok = ok && v.canConvert<QString>();
            QString classname = v.value<QString>();

            v = localPrefs->value("id");
            ok = ok && v.canConvert<long>();
            long objectId = v.value<long>();

            v = localPrefs->value("type");
            ok = ok && v.canConvert<int>();
            InspectorType type = (InspectorType)v.value<int>();

            if (!ok) {
                localPrefs->endGroup();
                continue;
            }

            if (object == oldObject->getFullPath().c_str()
                    && classname == getObjectShortTypeName(oldObject, STRIPNAMESPACE_NONE)
                    && objectId == getObjectId(oldObject)
                    && type == inspector->getType()) {
                localPrefs->setValue("object", newObject->getFullPath().c_str());
                localPrefs->setValue("classname", getObjectShortTypeName(newObject, STRIPNAMESPACE_NONE));
                localPrefs->setValue("id", QVariant::fromValue(getObjectId(newObject)));
            }

            localPrefs->endGroup();
        }
    }
}

void QtenvApp::restoreInspectors()
{
    QStringList groups = localPrefs->childGroups();
    for (auto group : groups) {
        if (group.startsWith("Inspector")) {
            bool ok = true;

            localPrefs->beginGroup(group);

            QVariant v = localPrefs->value("object");
            ok = ok && v.canConvert<QString>();
            QString object = v.value<QString>();

            v = localPrefs->value("classname");
            ok = ok && v.canConvert<QString>();
            QString classname = v.value<QString>();

            v = localPrefs->value("id");
            ok = ok && v.canConvert<int>();
            int objectId = v.value<int>();

            v = localPrefs->value("type");
            ok = ok && v.canConvert<int>();
            InspectorType type = (InspectorType)v.value<int>();

            v = localPrefs->value("geom");
            ok = ok && v.canConvert<QRect>();
            QRect geom = v.value<QRect>();

            v = localPrefs->value("fullscreen");
            ok = ok && v.canConvert<bool>();
            bool fullscreen = v.value<bool>();

            if (!ok) {
                localPrefs->endGroup();
                continue;
            }

            auto o = object.toUtf8();  // we have to save these to variables
            auto c = classname.toUtf8();  // otherwise they are temporary
            cFindByPathVisitor visitor(o, c, objectId);
            visitor.process(getSimulation());

            for (int i = 0; i < visitor.getArraySize(); ++i) {
                if (!findFirstInspector(visitor.getArray()[i], type, true)) {
                    Inspector *insp = inspect(visitor.getArray()[i], type, true);

                    if (!insp)
                        continue;

                    if (fullscreen)
                        insp->setWindowState(insp->windowState() | Qt::WindowFullScreen);
                    else {
                        insp->setWindowState(insp->windowState() & ~Qt::WindowFullScreen);
                        insp->setGeometry(geom);
                    }
                }
            }

            localPrefs->endGroup();
        }
    }
}

double QtenvApp::computeModelAnimationSpeedRequest()
{
    double animSpeed = DBL_MAX;

    for (auto i : inspectors) {
        if (auto mi = dynamic_cast<ModuleInspector *>(i))
            if (auto mod = dynamic_cast<cModule *>(mi->getObject()))
                if (auto canv = mod->getCanvasIfExists())
                    animSpeed = std::min(animSpeed, canv->getMinAnimationSpeed());

        // TODO
        //if (auto ci = dynamic_cast<CanvasInspector *>(i)) {
        //
        //}
    }

    if (animSpeed == DBL_MAX)
        animSpeed = 0.0; // or DBL_MAX, or NAN?

    return animSpeed;
}

double QtenvApp::computeModelHoldEndTime()
{
    double holdEndTime = -1;

    for (auto i : inspectors) {
        if (auto mi = dynamic_cast<ModuleInspector *>(i))
            if (auto mod = dynamic_cast<cModule *>(mi->getObject()))
                if (auto canv = mod->getCanvasIfExists())
                    holdEndTime = std::max(holdEndTime, canv->getAnimationHoldEndTime());

        // TODO
        //if (auto ci = dynamic_cast<CanvasInspector *>(i)) {
        //
        //}
    }

    return holdEndTime;
}

QtenvApp::QtenvApp() : icons(out)
{
    // Note: ctor should only contain trivial initializations, because
    // the class may be instantiated only for the purpose of calling
    // printUISpecificHelp() on it

    // set the name here, to prevent warning from StringPool on shutdown when Cmdenv runs
    inspectorfactories.getInstance()->setName("inspectorfactories");
}

QtenvApp::~QtenvApp()
{
    if (globalPrefs) {
        globalPrefs->sync();
        checkQSettingsStatus(globalPrefs);
        delete globalPrefs;
    }
    if (localPrefs) {
        localPrefs->sync();
        checkQSettingsStatus(localPrefs);
        delete localPrefs;
    }

    delete messageAnimator;
    for (auto & silentEventFilter : silentEventFilters)
        delete silentEventFilter;
    delete opt;
}

static void signalHandler(int signum)
{
    cStaticFlag::setExiting();

    QtenvApp *qtenv = getQtenv();

    // The DisplayUpdateController loops check for this flag:
    if (qtenv)
        qtenv->setStopSimulationFlag();

    QApplication::exit(2);
}

int QtenvApp::doRunApp()
{
    //
    // SETUP
    //
    QtenvEnvir *envir = new QtenvEnvir(this);
    envir->setIsGUI(true);
    envir->setExpressMode(runMode == RUNMODE_EXPRESS);
    envir->setArgs(args);

    activeCfg = ini->extractGlobalConfig();

    cINedLoader *nedLoader = createConfiguredNedLoader(activeCfg, args);
    nedLoader->loadNedFiles();

    cSimulation *simulation = new cSimulation("simulation", envir, nedLoader);  //TODO: finally: delete simulation
    cSimulation::setActiveSimulation(simulation);

    readOptions(activeCfg);

    if (getAttachDebuggerOnErrors())
        installCrashHandler();

    // set signal handler
    signal(SIGINT, signalHandler);
    signal(SIGTERM, signalHandler);

    std::string imagePath = envir->extractImagePath(activeCfg, args);
    icons.setVerbose(AppBase::verbose);
    icons.loadImages(imagePath.c_str());

    // we need to flush streams, otherwise output written from Tcl tends to overtake
    // output written from C++ so far, at least in the IDE's console view
    fflush(stdout);
    fflush(stderr);

    // these three have to be available for the whole lifetime of the application
    static int argc = 1;
    static char arg[] = { 'Q', 't', 'e', 'n', 'v', '\0' };
    static char *argv[] = { arg, nullptr };

    QApplication::setAttribute(Qt::AA_UseHighDpiPixmaps, true);
    QApplication::setAttribute(Qt::AA_EnableHighDpiScaling, true);

    app = new QApplication(argc, argv);

    // our icon color levels are #40 and #F0, halfway between those is 152, which is close to 0.6 * 255
    if (app->palette().window().color().lightnessF() < 0.6)
        selectDarkThemeIcons();
    else
        selectLightThemeIcons();

    initFontsResource();

    QFontDatabase::addApplicationFont(":/fonts/FiraCode-Regular");
    QFontDatabase::addApplicationFont(":/fonts/FiraCode-Bold");

    app->setStyle(new QtenvProxyStyle());

    pauseEventLoop = new QEventLoop(app);

    messageAnimator = new MessageAnimator(&logBuffer);

    globalPrefs = new QSettings(QDir::homePath() + "/.qtenvrc", QSettings::IniFormat);
    checkQSettingsStatus(globalPrefs);
    localPrefs = new QSettings(".qtenvrc", QSettings::IniFormat);
    checkQSettingsStatus(localPrefs);

    restoreOptsFromPrefs();
    setLogLevel(opt->logLevel); // we have to tell cLog the level we want
    displayUpdateController = new DisplayUpdateController();

    // create windowtitle prefix
    if (simulation->getParsimNumPartitions() > 0) {
        char tmp[32];
        sprintf(tmp, "Proc %d/%d - ", simulation->getParsimPartitionId(), simulation->getParsimNumPartitions());
        windowTitlePrefix = tmp;
    }

    mainWindow = new MainWindow(this);

    initFonts();
    updateQtFonts();

    moduleLayouter.loadSeeds();

    mainInspector = static_cast<GenericObjectInspector *>(addEmbeddedInspector(InspectorFactory::get("GenericObjectInspectorFactory"), mainWindow->getObjectInspectorArea()));
    mainNetworkView = static_cast<ModuleInspector *>(addEmbeddedInspector(InspectorFactory::get("ModuleInspectorFactory"), mainWindow->getMainInspectorArea()));
    mainLogView = static_cast<LogInspector *>(addEmbeddedInspector(InspectorFactory::get("LogInspectorFactory"), mainWindow->getLogInspectorArea()));
    mainTimeLine = static_cast<TimeLineInspector *>(addEmbeddedInspector(InspectorFactory::get("TimeLineInspectorFactory"), mainWindow->getTimeLineArea()));
    mainObjectTree = static_cast<ObjectTreeInspector *>(addEmbeddedInspector(InspectorFactory::get("ObjectTreeInspectorFactory"), mainWindow->getObjectTreeArea()));
    mainObjectTree->setObject(getSimulation());

    connect(mainNetworkView, SIGNAL(inspectedObjectChanged(cObject *,cObject *)), mainLogView, SLOT(setObject(cObject *)));
    connect(mainNetworkView, SIGNAL(inspectedObjectChanged(cObject *,cObject *)), mainInspector, SLOT(setObject(cObject *)));

    connect(&moduleLayouter, &ModuleLayouter::layoutVisualisationStarts, mainWindow, &MainWindow::enterLayoutingMode);
    connect(&moduleLayouter, &ModuleLayouter::layoutVisualisationEnds, mainWindow, &MainWindow::exitLayoutingMode);
    connect(mainWindow, &MainWindow::closed, &moduleLayouter, &ModuleLayouter::stop);
    connect(mainWindow->getStopAction(), &QAction::triggered, &moduleLayouter, &ModuleLayouter::stop);

    QApplication::processEvents(); // Part of the hack for Apple Menu functionality, see a few lines up.

    mainWindow->show();
    mainWindow->raise(); // Part of the hack for Apple Menu functionality, see a few lines up.

    mainWindow->restoreGeometry();
    mainInspector->setFocus();
    mainWindow->activateWindow();

    // We have to wait a bit for the window manager to process the trauma of having to show a window,
    // and only then pop up the RunSelectionDialog. If done instantly, our request to place it
    // centered over the MainWindow might get ignored/overridden.
    QTimer::singleShot(500, this, &QtenvApp::initialSetUpConfiguration);

    // needs to be set here too, the setting in the Designer wasn't enough on Mac
    QApplication::setWindowIcon(QIcon(":/logo/logo128m"));


    try {
        setLogFormat(opt->logFormat.c_str());
    }
    catch (std::exception&) {
        // ignore
    }

    CodeFragments::executeAll(CodeFragments::STARTUP); // app setup is complete

    //
    // RUN
    //
    int exitCode = QApplication::exec();

    //
    // SHUTDOWN
    //

    if (getSimulation()->getState() == cSimulation::SIM_PAUSED && callFinishOnExitFlag)
        finishSimulation();

    // saving the open toplevel inspectors to the .qtenvrc file
    storeInspectors(false);

    // delete network if not yet done
    getSimulation()->deleteNetwork();

    // close all inspectors before exiting,
    // making a copy of the list to avoid iterator invalidation
    // (inspectors will be removed from the main list when tey are deleted)
    InspectorList inspectorsCopy = inspectors;
    for (auto insp : inspectorsCopy)
        delete insp;
    inspectors.clear();

    IOsgViewer::uninit();

    // clear log
    logBuffer.clear();

    moduleLayouter.saveSeeds();

    storeOptsInPrefs();

    delete messageAnimator;
    messageAnimator = nullptr;
    delete displayUpdateController;
    displayUpdateController = nullptr;

    // pull down inspector factories
    inspectorfactories.clear();

    FigureRenderer::clearRendererCache();

    mainWindow->storeGeometry();
    saveFonts();

    delete mainWindow;
    mainWindow = nullptr;

    delete globalPrefs;
    globalPrefs = nullptr;
    delete localPrefs;
    localPrefs = nullptr;

    delete pauseEventLoop;
    pauseEventLoop = nullptr;

    delete nedLoader;

    delete app;
    app = nullptr;

    return exitCode;
}

void QtenvApp::printUISpecificHelp()
{
    out << "\n";
    out << "Qtenv-specific information:\n";
    out << "    Qtenv allows the user to select a simulation run interactively.\n";
    out << "    The -c and -r options only serve as hints or default values for\n";
    out << "    the GUI.\n";
}

void QtenvApp::rebuildSim()
{
    if (isConfigRun)
        newRun(getConfig()->getActiveConfigName(), getConfig()->getActiveRunNumber());
    else if (getSimulation()->getNetworkType() != nullptr)
        newNetwork(getSimulation()->getNetworkType()->getName());
    else
        confirm(INFO, "Choose File|New Network or File|New Run.");
}

class QtenvEventLoopRunner : public cIEventLoopRunner
{
    private:
        QtenvApp *qtenv;
    public:
        QtenvEventLoopRunner(QtenvApp *qtenv) : cIEventLoopRunner(cSimulation::getActiveSimulation()), qtenv(qtenv) {}
        virtual void configure(cConfiguration *cfg) override {}
        virtual void runEventLoop() override;
};

void QtenvEventLoopRunner::runEventLoop()
{
    // initial, "cheap" version of a Qtenv runner -- just delegates back to Qtenv
    // TODO move out to its own file, and move Qtenv's running-related functionality into it
    bool cont = true;
    while (cont) {
        if (qtenv->getSimulationRunMode() == RUNMODE_EXPRESS)
            cont = qtenv->doRunSimulationExpress();
        else
            cont = qtenv->doRunSimulation();
    }
}

cINedLoader *QtenvApp::createConfiguredNedLoader(cConfiguration *cfg, ArgList *args)
{
    cINedLoader *nedLoader = new cNedLoader("nedLoader");
    nedLoader->removeFromOwnershipTree();
    std::string nArg = args == nullptr ? "" : opp_join(args->optionValues('n'), ";", true);
    std::string xArg = args == nullptr ? "" : opp_join(args->optionValues('x'), ";", true);
    nedLoader->configure(cfg, nArg.c_str() , xArg.c_str());
    return nedLoader;
}

void QtenvApp::runSimulation(RunMode mode, simtime_t until_time, eventnumber_t until_eventnum, cMessage *until_msg, cModule *until_module,
                          bool stopOnMsgCancel)
{
    if (!isPaused())
        ASSERT(getSimulation()->getState() == cSimulation::SIM_INITIALIZED || getSimulation()->getState() == cSimulation::SIM_PAUSED);

    prepareForRunningInMode(mode);
    setRunMode(mode);

    runUntil.time = until_time;
    runUntil.eventNumber = until_eventnum;
    runUntil.msg = until_msg;
    runUntil.module = until_module;  // Note: this is NOT supported with RUNMODE_EXPRESS
    runUntil.stopOnMsgCancel = stopOnMsgCancel;

    stopSimulationFlag = false;
    // if there's some animating to do before the event, only do that if stepping.

    if (isPaused()) {
        requestQuitFromPausePointEventLoop(mode);
        return;
    }

    doNextEventInStep = getSimulation()->isTrapOnNextEventRequested() || displayUpdateController->rightBeforeEvent();

    updateStatusDisplay();
    QApplication::processEvents();

    startClock();
    try {
        QtenvEventLoopRunner runner(this);
        bool paused = getSimulation()->run(&runner, false);

        if (runMode != RUNMODE_NORMAL) { // in NORMAL mode, doRunSimulation() already calls refreshDisplay() after each event
            if (runMode != RUNMODE_FAST)
                messageAnimator->updateAnimations();
            callRefreshDisplay();
        }

        if (!paused) {
            cTerminationException *e = getSimulation()->getTerminationReason();
            printException(*e);
        }

    }
    catch (std::exception& e) {
        printException(e);
    }
    stopClock();
    stopSimulationFlag = false;

    messageAnimator->setShowAnimations(true);
    cLog::setLoggingEnabled(true);
    runUntil.msg = nullptr;

    setRunMode(RUNMODE_NOT_RUNNING);
    displayUpdateController->setRunMode(runMode);
    if (!messageAnimator->isHoldActive())
        messageAnimator->setMarkedModule(getSimulation()->guessNextModule());

    if (getSimulation()->getState() == cSimulation::SIM_TERMINATED) {
        // call wrapper around simulation.callFinish() and simulation.endRun()
        //
        // NOTE: if the simulation is in SIM_ERROR, we don't want endRun() to be
        // called yet, because we want to allow the user to force finish() from
        // the GUI -- and finish() has to precede endRun(). endRun() will be called
        // just before a new network gets set up, or on Qtenv shutdown.
        //
        finishSimulation();
    }

    updateStatusDisplay();
    callRefreshInspectors();
}

void QtenvApp::setRunMode(RunMode mode)
{
    ASSERT(getEnvir()->isExpressMode() == (runMode == RUNMODE_EXPRESS));
    runMode = mode;
    getEnvir()->setExpressMode(runMode == RUNMODE_EXPRESS);
}

void QtenvApp::prepareForRunningInMode(RunMode mode)
{
    // We want to skip even in STEP mode, because we want the
    // next event to be executed immediately.
    skipHoldAnimations();

    if (mode == RUNMODE_STEP) { // if the user wants to step,
        // then if we are in between events, not stopped right before the next event, jumping there
        displayUpdateController->skipToNextEvent();
        // finally we indicate that the next event should be executed, and we should not stop before that
        doNextEventInStep = true;
    }

    setRunMode(mode);
}

void QtenvApp::setSimulationRunUntil(simtime_t until_time, eventnumber_t until_eventnum, cMessage *until_msg, bool stopOnMsgCancel)
{
    runUntil.time = until_time;
    runUntil.eventNumber = until_eventnum;
    runUntil.msg = until_msg;
    runUntil.stopOnMsgCancel = stopOnMsgCancel;
}

void QtenvApp::setSimulationRunUntilModule(cModule *until_module)
{
    runUntil.module = until_module;
}

// note: if restart is true and the interval did elapse, also updates "since" (sets it to the current time)
inline bool elapsed(long millis, int64_t& since, bool restart)
{
    int64_t now = opp_get_monotonic_clock_usecs();

    bool ret = (now - since) >= millis * 1000;
    if (ret && restart)
        since = now;
    return ret;
}

void QtenvApp::prepareForRun()
{
    resetClock();
    cSimulation *simulation = getSimulation();
    if (opt->simtimeLimit >= SIMTIME_ZERO)
        simulation->setSimulationTimeLimit(opt->simtimeLimit);
    stopwatch.setCPUTimeLimit(opt->cpuTimeLimit);
    stopwatch.setRealTimeLimit(opt->realTimeLimit);
    simulation->callInitialize();
}

bool QtenvApp::doRunSimulation()
{
    //
    // IMPORTANT:
    // The following variables may change during execution (as a result of user interaction
    // during QApplication::processEvents()
    //  - runmode, runUntil.time, runUntil.eventNumber, runUntil.msg, runUntil.module;
    //  - stopsimulation_flag
    //
    cSimulation *sim = getSimulation();
    speedometer.start(sim->getSimTime());
    cLog::setLoggingEnabled(true);
    bool firstevent = true;

    while (true) {
        if (runMode == RUNMODE_EXPRESS)
            return true;  // should continue, but in a different mode

        displayUpdateController->setRunMode(runMode);
        bool stoppedBeforeEventReached = !displayUpdateController->animateUntilNextEvent();

        if (runMode != RUNMODE_FAST)
            performHoldAnimations();

        // if there is no event, we have to let the control through to
        // takeNextEvent, and it will terminate the simulation with an exception.
        if (stoppedBeforeEventReached && sim->guessNextEvent())
            break;

        // if there is no event, we have to let the control through to
        // takeNextEvent, and it will terminate the simulation with an exception.
        if (runMode == RUNMODE_STEP && !doNextEventInStep && sim->guessNextEvent())
            break;

        // query which module will execute the next event
        cEvent *event = sim->takeNextEvent();
        if (!event)
            break;  // takeNextEvent() interrupted (parsim)

        // "run until message": stop if desired event was reached
        if (runUntil.msg && event == runUntil.msg) {
            sim->putBackEvent(event);
            break;
        }

        // if stepping locally in module, we stop both immediately
        // *before* and *after* executing the event in that module,
        // but we always execute at least one event
        cModule *mod = event->isMessage() ? static_cast<cMessage *>(event)->getArrivalModule() : nullptr;
        bool untilmodule_reached = runUntil.module && moduleContains(runUntil.module, mod);
        if (untilmodule_reached && !firstevent) {
            sim->putBackEvent(event);
            break;
        }
        firstevent = false;

        ASSERT(simTime() <= event->getArrivalTime());
        sim->setSimTime(event->getArrivalTime());

        messageAnimator->setShowAnimations((runMode == RUNMODE_NORMAL || runMode == RUNMODE_STEP || runMode == RUNMODE_FAST) || untilmodule_reached);

        speedometer.addEvent(sim->getSimTime());

        doNextEventInStep = false;

        // do a simulation step
        sim->executeEvent(event);

        inspectorsFresh = false;
        pausePointNumber = 0;

        if (messageAnimator->getShowAnimations() && runMode != RUNMODE_FAST)
            performHoldAnimations();

        messageAnimator->setMarkedModule(sim->guessNextModule());

        // flush so that output from different modules don't get mixed
        cLogProxy::flushLastLine();

        // exit conditions
        if (stopSimulationFlag)
            break;

        if (runUntil.time > SIMTIME_ZERO && sim->guessNextSimtime() >= runUntil.time)
            break; // TODO: animate until the target simtime

        if (untilmodule_reached // run until module or message reached:
                || (runUntil.eventNumber > 0 && sim->getEventNumber() + 1 >= runUntil.eventNumber)) {
            displayUpdateController->animateUntilNextEvent();
            callRefreshInspectors();
            break;
        }

        checkTimeLimits();
    }
    return false;
}

bool QtenvApp::doRunSimulationExpress()
{
    //
    // IMPORTANT:
    // The following variables may change during execution (as a result of user interaction
    // during QApplication::processEvents():
    //  - runMode, runUntil.time, runUntil.eventNumber, runUntil.msg, runUntil.module;
    //  - stopSimulationFlag
    //  - opt->autoupdateInExpress
    //
    // EXPRESS does not support runUntil.module!
    //

    char info[128];
    sprintf(info, "** Running in Express mode from event #%" PRId64 "  t=%s ...\n",
            getSimulation()->getEventNumber(), SIMTIME_STR(getSimulation()->getSimTime()));
    logBuffer.addInfo(info);

    // update, just to get the above notice displayed
    callRefreshInspectors();
    QApplication::processEvents();

    // OK, let's begin
    speedometer.start(getSimulation()->getSimTime());
    cLog::setLoggingEnabled(false);

    messageAnimator->setShowAnimations(false);
    messageAnimator->clear();

    int64_t last_update = opp_get_monotonic_clock_usecs();

    bool result = false;
    do {
        cEvent *event = getSimulation()->takeNextEvent();
        if (!event)
            break;  // takeNextEvent() interrupted (parsim)

        // "run until message": stop if desired event was reached
        if (runUntil.msg && event == runUntil.msg) {
            getSimulation()->putBackEvent(event);
            break;
        }

        speedometer.addEvent(getSimulation()->getSimTime());

        getSimulation()->executeEvent(event);
        pausePointNumber = 0;

        // only on every 256. event to make it fast
        if ((getSimulation()->getEventNumber() & 0xff) == 0) {
            // to make the stopDialog more responsive
            if (elapsed(100, last_update, false)) {
                inspectorsFresh = false;
                QApplication::processEvents();
            }

            if (elapsed(opt->updateFreqExpress, last_update, true)) {
                inspectorsFresh = false;
                speedometer.beginNewInterval();  // should precede updateStatusDisplay()
                if (opt->autoupdateInExpress) {
                    callRefreshDisplay();
                    callRefreshInspectors();
                }
                updateStatusDisplay();
                QApplication::processEvents();
                last_update = opp_get_monotonic_clock_usecs();  // exclude UI update time [bug #52]
                if (runMode != RUNMODE_EXPRESS) {
                    result = true;  // should continue, but in a different mode
                    break;
                }
            }
        }

        checkTimeLimits();
    } while (!stopSimulationFlag &&
             (runUntil.time <= SIMTIME_ZERO || getSimulation()->guessNextSimtime() < runUntil.time) &&
             (runUntil.eventNumber <= 0 || getSimulation()->getEventNumber() + 1 < runUntil.eventNumber)
             );

    inspectorsFresh = false;

    sprintf(info, "** Leaving Express mode at event #%" PRId64 "  t=%s\n",
            getSimulation()->getEventNumber(), SIMTIME_STR(getSimulation()->getSimTime()));
    logBuffer.addInfo(info);

    return result;
}

void QtenvApp::startAll()
{
    confirm(INFO, "Not implemented.");
}

void QtenvApp::finishSimulation()
{
    // strictly speaking, we shouldn't allow callFinish() after SIM_ERROR, but it comes handy in practice...
    ASSERT(getSimulation()->getState() != cSimulation::SIM_NONETWORK && getSimulation()->getState() != cSimulation::SIM_FINISHCALLED);

    logBuffer.addInfo("** Calling finish() methods of modules\n");

    // now really call finish()
    try {
        getSimulation()->callFinish();
        callRefreshDisplaySafe();
    }
    catch (std::exception& e) {
        printException(e);
    }

    updateStatusDisplay();
    callRefreshInspectors();
}

bool QtenvApp::checkRunning()
{
    const char *warningText = nullptr;

    if (getSimulation()->getStage() == cSimulation::STAGE_EVENT) {
        if (isPaused())
            warningText = "The simulation is paused in the middle of an event -- press STOP to finish processing it.";
        else
            warningText = "Sorry, you cannot do this while the simulation is running. Please stop it first.";
    }
    else if (insideIdle) {
        warningText = "The simulation is waiting for external synchronization -- press STOP to interrupt it.";
    }

    if (warningText != nullptr) {
        QMessageBox::warning(mainWindow, "Warning", warningText, QMessageBox::Ok);
        return true;
    }
    else
        return false;
}

void QtenvApp::loadNedFile(const char *fname, const char *expectedPackage, bool isXML)
{
    try {
        getSimulation()->loadNedFile(fname, expectedPackage, isXML);
    }
    catch (std::exception& e) {
        printException(e);
    }
}

// XXX too similar to newRun
void QtenvApp::newNetwork(const char *networkname)
{
    try {
        // finish & cleanup previous run if we haven't done so yet
        if (getSimulation()->getState() != cSimulation::SIM_NONETWORK) {
            storeInspectors(true);
            getSimulation()->deleteNetwork();
        }

        refreshDisplayCount = 0;
        messageAnimator->clear();
        displayUpdateController->reset();
        answers.clear();
        logBuffer.clear();
        componentHistory.clear();

        cModuleType *network = getSimulation()->resolveNetwork(networkname, opt->inifileNetworkDir.c_str());
        ASSERT(network);

        // set up new network with config General.
        isConfigRun = false;
        activeCfg = getInifileContents()->extractConfig("General", 0); //TODO leak
        readPerRunOptions(activeCfg);
        opt->networkName = network->getName();  // override config setting
        setupNetwork(network);
        prepareForRun();

        callRefreshDisplay(); // the one without exception handling!

    }
    catch (std::exception& e) {
        printException(e);
    }

    // update GUI
    auto module = getSimulation()->getSystemModule();
    mainNetworkView->setObject(module);
    mainInspector->setObject(module);

    messageAnimator->setShowAnimations(true);  // affects how network graphics is drawn!
    messageAnimator->redrawMessages();
    messageAnimator->setMarkedModule(getSimulation()->guessNextModule());
    updateNetworkRunDisplay();
    updateStatusDisplay();
    callRefreshInspectors();
}

// XXX too similar to newNetwork
void QtenvApp::newRun(const char *configname, int runnumber)
{
    try {
        // finish & cleanup previous run if we haven't done so yet
        if (getSimulation()->getState() != cSimulation::SIM_NONETWORK) {
            storeInspectors(true);
            getSimulation()->deleteNetwork();
        }

        refreshDisplayCount = 0;
        messageAnimator->clear();
        displayUpdateController->reset();
        answers.clear();
        logBuffer.clear();
        componentHistory.clear();

        // set up new network
        isConfigRun = true;
        activeCfg = getInifileContents()->extractConfig(configname, runnumber); //TODO leak
        readPerRunOptions(activeCfg);

        if (opt->networkName.empty()) {
            confirm(ERROR, "No network specified in the configuration.");
            return;
        }

        cModuleType *networkType = getSimulation()->resolveNetwork(opt->networkName.c_str(), opt->inifileNetworkDir.c_str());
        ASSERT(networkType);

        setupNetwork(networkType);
        prepareForRun();

        callRefreshDisplay(); // the one without exception handling!

        // update GUI
        auto module = getSimulation()->getSystemModule();
        mainNetworkView->setObject(module);
        mainInspector->setObject(module);
     }
    catch (std::exception& e) {
        printException(e);
    }

    messageAnimator->setShowAnimations(true);  // affects how network graphics is drawn!
    messageAnimator->redrawMessages();
    messageAnimator->setMarkedModule(getSimulation()->guessNextModule());
    updateNetworkRunDisplay();
    updateStatusDisplay();
    callRefreshInspectors();
}

void QtenvApp::setupNetwork(cModuleType *networkType)
{
    cSimulation::getActiveSimulation()->setupNetwork(networkType);

    // collapsing all nodes in the object tree, because even if a new network is
    // loaded, there is a chance that some objects will be on the same place
    // (have the same pointer) as some of the old ones, so random nodes may
    // be expanded in the new tree depending on what was expanded before
    // TODO this should be done in the tree view inspector
    // mainwindow->getObjectTree()->collapseAll();
}

Inspector *QtenvApp::inspect(cObject *obj, InspectorType type, bool ignoreEmbedded)
{
    // first, try finding and displaying existing inspector
    Inspector *inspector = findFirstInspector(obj, type, ignoreEmbedded);
    if (inspector) {
        if (inspector->isToplevelInspector())
            inspector->showWindow();
        return inspector;
    }

    InspectorFactory *factory = findInspectorFactoryFor(obj, type);
    if (!factory) {
        confirm(ERROR, opp_stringf("Class '%s' has no associated inspectors.", obj->getClassName()).c_str());
        return nullptr;
    }

    InspectorType actualType = factory->getInspectorType();
    inspector = findFirstInspector(obj, actualType, ignoreEmbedded);
    if (inspector) {
        if (inspector->isToplevelInspector())
            inspector->showWindow();
        return inspector;
    }

    // create inspector
    inspector = factory->createInspector(mainWindow, true);
    if (!inspector) {
        // message: object has no such inspector
        confirm(ERROR, opp_stringf("Class '%s' has no '%s' inspector.", obj->getClassName(), insptypeNameFromCode(type)).c_str());
        return nullptr;
    }

    connect(inspector, SIGNAL(selectionChanged(cObject *)), this, SLOT(onSelectionChanged(cObject *)));
    connect(inspector, SIGNAL(objectDoubleClicked(cObject *)), this, SLOT(onObjectDoubleClicked(cObject *)));
    connect(inspector, SIGNAL(inspectedObjectChanged(cObject *,cObject *)), this, SLOT(updateStoredInspector(cObject *,cObject *)));

    // everything ok, finish inspector
    inspectors.push_back(inspector);

    try {
        inspector->setObject(obj);
    }
    catch (std::exception& e) {
        printException(e);
    }
    return inspector;
}

Inspector *QtenvApp::addEmbeddedInspector(InspectorFactory *factory, QWidget *parent)
{
    Inspector *insp = factory->createInspector(parent, false);
    inspectors.push_back(insp);

    connect(insp, SIGNAL(selectionChanged(cObject *)), this, SLOT(onSelectionChanged(cObject *)));
    connect(insp, SIGNAL(objectDoubleClicked(cObject *)), this, SLOT(onObjectDoubleClicked(cObject *)));

    insp->refresh();
    return insp;
}

Inspector *QtenvApp::findFirstInspector(const cObject *obj, InspectorType type, bool ignoreEmbedded)
{
    for (auto insp : inspectors) {
        if (insp->getObject() == obj && insp->getType() == type && (!ignoreEmbedded || insp->isToplevelInspector()))
            return insp;
    }
    return nullptr;
}

void QtenvApp::deleteInspector(Inspector *insp)
{
    ASSERT(insp->isToplevelInspector());
    ASSERT(insp->testAttribute(Qt::WA_DeleteOnClose));
    ASSERT(std::find(inspectors.begin(), inspectors.end(), insp) != inspectors.end());

    // this will also make Qt call delete on it later, because of the Qt::WA_DeleteOnClose attribute
    delete insp;
}

void QtenvApp::inspectorDeleted(Inspector *insp)
{
    // this should be idempotent, because of Inspector::closeEvent()
    inspectors.remove(insp);
}

void QtenvApp::callRefreshDisplay()
{
    ASSERT(getSimulation()->getState() != cSimulation::SIM_ERROR && getSimulation()->getState() != cSimulation::SIM_NONETWORK);

    LogLevel oldLogLevel = cLog::logLevel;
    if (opt->noLoggingRefreshDisplay)
        setLogLevel(LOGLEVEL_OFF);

    try {
        getSimulation()->callRefreshDisplay();
        ++refreshDisplayCount;
    } catch (std::exception&) {
        inspectorsFresh = false;
        setLogLevel(oldLogLevel);
        throw;
    }

    inspectorsFresh = false;
    setLogLevel(oldLogLevel);
}

void QtenvApp::callRefreshDisplaySafe()
{
    try { // if we are _in_ a callback, inside deleteNetwork, the state might not have been updated yet...
        if (getSimulation()->getState() != cSimulation::SIM_ERROR && getSimulation()->getState() != cSimulation::SIM_NONETWORK)
            callRefreshDisplay();
    }
    catch (std::exception& e) {
        ASSERT(getSimulation()->getState() != cSimulation::SIM_ERROR); // the exception must have come from refreshDisplay calls in the model
        printException(e);
    }
}

void QtenvApp::refreshInspectors()
{
    // update inspectors
    for (auto it : inspectors)
        it->refresh();

    messageAnimator->updateNextEventMarkers();
    messageAnimator->redrawMessages();

    // clear the change flags on all inspected canvases
    for (auto it : inspectors)
        it->postRefresh();

    // try opening "pending" inspectors
    restoreInspectors();

    inspectorsFresh = true;
}

void QtenvApp::callRefreshInspectors()
{
    try {
        refreshInspectors();
    }
    catch (std::exception& e) {
        printException(e);
    }
}

void QtenvApp::createSnapshot(const char *label)
{
    getSimulation()->snapshot(getSimulation(), label);
}

void QtenvApp::performHoldAnimations()
{
    displayUpdateController->setRunMode(runMode);
    messageAnimator->updateAnimations();
    displayUpdateController->animateUntilHoldEnds();
}

void QtenvApp::skipHoldAnimations()
{
    // TODO

    messageAnimator->skipCurrentHoldingAnims();
    displayUpdateController->skipHold();
    messageAnimator->updateAnimations();
}

std::string QtenvApp::getWindowTitle()
{
    const char *configName = getConfig()->getActiveConfigName();
    int runNumber = getConfig()->getActiveRunNumber();
    const char *inifile = getInifileContents()->getFileName();

#ifdef NDEBUG
    bool ndebug = true;
#else
    bool ndebug = false;
#endif

    std::stringstream os;
    os << OMNETPP_PRODUCT "/Qtenv (" << (ndebug ? "release" : "debug") << ") - " << getWindowTitlePrefix();
    if (opp_isempty(configName))
        os << "No network";
    else
        os << configName << " #" << runNumber;
    if (!opp_isempty(inifile))
        os << " - " << inifile;
    os << " - " << getWorkingDir();
    return os.str();
}

void QtenvApp::updateNetworkRunDisplay()
{
    mainWindow->updateNetworkRunDisplay();
    mainWindow->setWindowTitle(getWindowTitle().c_str());
}

void QtenvApp::updateSimtimeDisplay()
{
    mainWindow->updateSimtimeDisplay();
}

void QtenvApp::updateStatusDisplay()
{
    mainWindow->updateStatusDisplay();
}

void QtenvApp::addEventToLog(cEvent *event)
{
    cObject *target = event->getTargetObject();
    cMessage *msg = event->isMessage() ? static_cast<cMessage *>(event) : nullptr;
    cModule *module = msg ? msg->getArrivalModule() : nullptr;

    char banner[2*MAX_OBJECTFULLPATH+2*MAX_CLASSNAME+60];
    banner[0] = '\0';

    // produce banner text if enabled
    if (opt->printEventBanners) {
        char *p = banner;
        p += sprintf(p, "** Event #%" PRId64 "  t=%s  ",
                    getSimulation()->getEventNumber(),
                    SIMTIME_STR(getSimulation()->getSimTime()));

        if (opt->shortBanners) {
            // just object names
            if (target)
                p += sprintf(p, "%s ", target->getFullPath().c_str());
            p += sprintf(p, "on %s", event->getFullName());
        }
        else {
            // print event and module type names and IDs, too
            if (module)
                p += sprintf(p, "%s (%s, id=%d) ",
                            module->getFullPath().c_str(),
                            module->getComponentType()->getName(),
                            module->getId());
            else if (target)
                p += sprintf(p, "%s (%s) ",
                            target->getFullPath().c_str(),
                            target->getClassName());
            if (msg)
                p += sprintf(p, " on %s%s (%s, id=%" PRId64 ")",
                            msg->isSelfMessage() ? "selfmsg " : "",
                            msg->getFullName(),
                            msg->getClassName(),
                            msg->getId());
            else
                p += sprintf(p, " on %s (%s)",
                            event->getFullName(),
                            event->getClassName());
        }
        strcpy(p, "\n");
    }

    // insert into log buffer
    logBuffer.addEvent(getSimulation()->getEventNumber(), getSimulation()->getSimTime(), module, banner);
}

void QtenvApp::resetClock()
{
    stopwatch.resetClock();
}

void QtenvApp::startClock()
{
    stopwatch.startClock();
}

void QtenvApp::stopClock()
{
    stopwatch.stopClock();
    simulatedTime = getSimulation()->getSimTime();
}

double QtenvApp::getElapsedSecs()
{
    return stopwatch.getElapsedSecs();
}

void QtenvApp::checkTimeLimits()
{
    if (!stopwatch.hasTimeLimits())
        return;
    if (isExpressMode() && (getSimulation()->getEventNumber() & 1023) != 0)  // optimize: in Express mode, don't read the clock on every event
        return;
    stopwatch.checkTimeLimits();
}

void QtenvApp::printException(std::exception& ex)
{
    // print exception text into main window
    cException *e = dynamic_cast<cException *>(&ex);
    if (e && e->getSimulationStage() != cSimulation::STAGE_NONE) {
        std::string txt = opp_stringf("<!> %s\n", e->getFormattedMessage().c_str());
        logBuffer.addInfo(txt.c_str());
    }

    showException(ex);
}

void QtenvApp::componentInitBegin(cComponent *component, int stage)
{
    auto logLevel = getPref(QString("ComponentLogLevels/") + component->getFullPath().c_str());
    if (logLevel.isValid() && logLevel.canConvert(QVariant::Int))
        setComponentLogLevel(component, (LogLevel)logLevel.toInt());

    if (!opt->printInitBanners || runMode == RUNMODE_EXPRESS)
        return;

    // produce banner text
    char banner[MAX_OBJECTFULLPATH+60];
    sprintf(banner, "Initializing %s %s, stage %d\n",
            component->isModule() ? "module" : "channel", component->getFullPath().c_str(), stage);

    // insert into log buffer
    logBuffer.addInitialize(component, banner);
}

void QtenvApp::setSilentEventFilters(const char *filterLines)
{
    // parse into tmp
    MatchExpressions tmp;
    try {
        StringTokenizer tokenizer(filterLines, "\n");
        while (tokenizer.hasMoreTokens()) {
            const char *line = tokenizer.nextToken();
            if (!opp_isblank(line)) {
                tmp.push_back(new MatchExpression());
                tmp.back()->setPattern(line, false, true, true);
            }
        }
    }
    catch (std::exception& e) {  // parse error
        for (auto & i : tmp)
            delete i;
        throw;
    }
    // parsing successful, store the result
    for (auto & silentEventFilter : silentEventFilters)
        delete silentEventFilter;
    silentEventFilterLines = opp_trim(filterLines) + "\n";
    silentEventFilters = tmp;
}

bool QtenvApp::isSilentEvent(cMessage *msg)
{
    MatchableObjectAdapter wrappedMsg(MatchableObjectAdapter::FULLNAME, msg);
    for (auto & silentEventFilter : silentEventFilters)
        if (silentEventFilter->matches(&wrappedMsg))
            return true;

    return false;
}

//=========================================================================

void QtenvApp::readOptions(cConfiguration *cfg)
{
    // note: this is read per run as well, but Qtenv needs its value on startup too
    opt->inifileNetworkDir = cfg->getConfigEntry(CFGID_NETWORK->getName()).getBaseDirectory();

    opt->extraStack = (size_t)cfg->getAsDouble(CFGID_QTENV_EXTRA_STACK);
    getEnvir()->setExtraStackForEnvir(opt->extraStack);

    const char *s = args->optionValue('c');
    opt->defaultConfig = s ? s : cfg->getAsString(CFGID_QTENV_DEFAULT_CONFIG);

    const char *r = args->optionValue('r');
    opt->runFilter = r ? r : cfg->getAsString(CFGID_QTENV_DEFAULT_RUN);
}

void QtenvApp::readPerRunOptions(cConfiguration *cfg)
{
    bool origDebugOnErrors = getDebugOnErrors();

    getSimulation()->configure(cfg);  // includes envir->configure()

    // don't let the configuration turn off a debug-on-errors setting that the user (presumably) turned
    // on manually, using the menu
    if (origDebugOnErrors == true && getDebugOnErrors() == false)
        setDebugOnErrors(true);

    opt->networkName = cfg->getAsString(CFGID_NETWORK);

    // note: this is read per run as well, but Qtenv needs its value on startup too
    opt->inifileNetworkDir = cfg->getConfigEntry(CFGID_NETWORK->getName()).getBaseDirectory();

    // make time limits effective
    opt->simtimeLimit = cfg->getAsDouble(CFGID_SIM_TIME_LIMIT, -1);
    opt->realTimeLimit = cfg->getAsDouble(CFGID_REAL_TIME_LIMIT, -1);
    opt->cpuTimeLimit = cfg->getAsDouble(CFGID_CPU_TIME_LIMIT, -1);

    opt->debugStatisticsRecording = cfg->getAsBool(CFGID_DEBUG_STATISTICS_RECORDING);
    opt->warnings = cfg->getAsBool(CFGID_WARNINGS);

}

void QtenvApp::initialSetUpConfiguration()
{
    if (checkRunning())
        return;

    std::string config;
    int run = -1;

    auto ini = getInifileContents();

    if (ini->getConfigNames().empty()) {
        mainWindow->configureNetwork();
        return;
    }
    else {
        try {
            // defaultConfig and runFilter are what were specified in either the omnetpp.ini file or as a command line argument
            RunSelectionDialog dialog(ini, opt->defaultConfig, opt->runFilter, mainWindow);

            // only show if needed, but if cancelled, stop.
            if (dialog.needsShowing() && !dialog.exec())
                return;

            config = dialog.getConfigName();
            run = dialog.getRunNumber();
        }
        catch (std::exception& e) {
            // if nonexistent config was given as argument or the run filter couldn't be applied, etc...
            printException(e);
            return;
        }
    }

    mainWindow->busy("Setting up run...");
    newRun(config.c_str(), run);
    mainWindow->busy();
    mainWindow->reflectConfigOnUi();

    QTimer::singleShot(0, mainWindow, &MainWindow::activateWindow);
}

void QtenvApp::askParameter(cPar *par, bool unassigned)
{
    // use a value entered by the user earlier ("[x] use this value for similar parameters")
    std::string key = std::string(((cComponent *)par->getOwner())->getNedTypeName()) + ":" + par->getName();
    if (answers.find(key) != answers.end()) {
        std::string answer = answers[key];
        par->parse(answer.c_str());
        return;
    }

    // really ask
    bool success = false;
    bool useForAll = false;
    while (!success) {
        cProperties *props = par->getProperties();
        cProperty *prop = props->get("prompt");
        std::string prompt = prop ? prop->getValue(cProperty::DEFAULTKEY) : "";
        if (prompt.empty())
            prompt = std::string("Enter parameter '") + par->getFullPath() + "':";

        std::string reply;
        std::string title = unassigned ? "Unassigned Parameter" : "Requested to Ask Parameter";
        std::string defaultValue = par->str();
        bool ok = inputDialog(title.c_str(), prompt.c_str(),
                    "Use this value for all similar parameters",
                    defaultValue.c_str(), reply, useForAll);
        if (!ok)
            throw cRuntimeError(E_CANCEL);

        try {
            par->parse(reply.c_str());
            success = true;
            if (useForAll)
                answers[key] = reply;
        }
        catch (std::exception& e) {
            alertf("%s -- please try again.", e.what());
        }
    }
}

bool QtenvApp::idle()
{
    // set the insideIdle flag for the duration of this call
    struct FlagSwitcher {
        bool& flag;
        FlagSwitcher(bool& flag) : flag(flag) {flag = true;}
        ~FlagSwitcher() {flag = false;}
    };
    FlagSwitcher tmp(insideIdle);
    (void)tmp;

    // process UI events
    displayUpdateController->idle();

    return stopSimulationFlag;
}

void QtenvApp::pausePoint()
{
    ASSERT(!pauseEventLoop->isRunning());

    if (runMode == RUNMODE_STEP && !stopSimulationFlag) {
        ++pausePointNumber;
        // pop out all the "play" buttons
        mainWindow->setGuiForRunmode(RUNMODE_PAUSED);
        updateSimtimeDisplay();
        callRefreshInspectors();

        // have to do it _before_ the blocking event loop,
        // and this will also process GUI events anyway
        performHoldAnimations();

        displayUpdateController->pause();
        pauseEventLoop->exec();
        displayUpdateController->resume();

        mainWindow->setGuiForRunmode(runMode);
        updateSimtimeDisplay();
    }
}

void QtenvApp::requestQuitFromPausePointEventLoop(RunMode continueIn)
{
    ASSERT(pauseEventLoop->isRunning());
    pauseEventLoop->quit();

    setRunMode(continueIn);
}

bool QtenvApp::ensureDebugger(cRuntimeError *error)
{
    bool debuggerPresent = debuggerSupport->detectDebugger() == DebuggerPresence::PRESENT;

    QString title;
    QString message;

    if (error) {
        title = "Runtime Error";
        message = QString("A runtime error occurred:\n\n") +
                error->getFormattedMessage(false).c_str();
        error->displayed = true;

        if (debuggerPresent)
            message += "\n\nDebug now?";
    }
    else if (!debuggerPresent) {
        title = "Debugging Requested";
        message = "You requested debugging.";
    }

    if (!debuggerPresent) {
        std::string debuggerCommand = debuggerSupport->getDebuggerCommand();
        if (!debuggerCommand.empty())
            message += QString("\n\nLaunch a debugger with the following command?\n\n") + debuggerCommand.c_str();
    }

    QMessageBox messageBox(QMessageBox::Icon::Critical, title, message, QMessageBox::NoButton, getMainWindow());

    QPushButton *acceptButton;

    if (debuggerPresent)
        acceptButton = messageBox.addButton("Break into debugger", QMessageBox::AcceptRole);
    else {
        acceptButton = messageBox.addButton("Launch debugger then break", QMessageBox::AcceptRole);
        messageBox.addButton("Just break (likely crash)", QMessageBox::DestructiveRole);
    }

    messageBox.addButton(error ? "Ignore" : "Cancel", QMessageBox::RejectRole);

    messageBox.setDefaultButton(acceptButton);

    QMessageBox::ButtonRole clickedRole = QMessageBox::AcceptRole;

    if (!message.isEmpty()) {
        messageBox.exec();
        clickedRole = messageBox.buttonRole(messageBox.clickedButton());
    }

    if (clickedRole == QMessageBox::RejectRole)
        return false; // the user doesn't want to debug now
    else if (debuggerPresent || clickedRole == QMessageBox::DestructiveRole)
        return true; // either we can safely TRAP, or the user told us to do it (even if we didn't detect a debugger)
    else if (debuggerSupport->debuggerAttachmentPermitted() != DebuggerAttachmentPermission::DENIED) {
        try {
            debuggerSupport->attachDebugger();
        }
        catch (opp_runtime_error& ex) {
            QMessageBox(QMessageBox::Icon::Critical, "Debugger Attachment Failed", ex.what(),
                        QMessageBox::StandardButton::Close, getMainWindow()).exec();
        }
    }
    else { // no debugger, and can't attach either
        QMessageBox(QMessageBox::Icon::Critical, "Debugger Attachment Blocked",
                    "No attached debugger was detected, and your current system setup does not "
                    "permit attaching a debugger to a non-child process.\nStart your simulation "
                    "in a debugger, or see this for how to allow on-demand attachment:\n\n"
                    "https://askubuntu.com/questions/41629/after-upgrade-gdb-wont-attach-to-process/41656#41656",
                    QMessageBox::StandardButton::Close, getMainWindow()).exec();

        // The user might have allowed attachment and attached a debugger
        // while the dialog was up, so let's check again.
    }

    return debuggerSupport->detectDebugger() != DebuggerPresence::NOT_PRESENT;
}

void QtenvApp::objectDeleted(cObject *object)
{
    if (object == runUntil.msg) {
        // message to "run until" deleted -- stop the simulation by other means
        runUntil.msg = nullptr;
        runUntil.eventNumber = getSimulation()->getEventNumber();
        if (getSimulation()->getState() == cSimulation::SIM_RUNNING)
            confirm(INFO, "Message to run until has just been deleted.");
    }

    if (messageAnimator && object == messageAnimator->getMarkedModule())
        messageAnimator->setMarkedModule(nullptr);

    Q_EMIT objectDeletedSignal(object);

    // TODO: use signals
    for (InspectorList::iterator it = inspectors.begin(); it != inspectors.end(); ) {
        InspectorList::iterator next = it;
        ++next;
        Inspector *insp = *it;

        insp->objectDeleted(object);

        it = next;
    }
}

void QtenvApp::simulationEvent(cEvent *event)
{
    if (cLog::isLoggingEnabled())
        addEventToLog(event);  // must be done here, because eventnum and simtime are updated inside executeEvent()

    displayUpdateController->simulationEvent();

    if (messageAnimator->getShowAnimations() && opt->animationEnabled) {
        if (event->isMessage()) {
            cMessage *msg = static_cast<cMessage *>(event);
            cGate *arrivalGate = msg->getArrivalGate();
            if (!arrivalGate)
                return;

            if (cLog::isLoggingEnabled())
                logBuffer.delivery(msg);

            if (!isSilentEvent(msg)) {
                // if arrivalgate is connected, msg arrived on a connection, otherwise via sendDirect()
                if (arrivalGate->getPreviousGate())
                    messageAnimator->delivery(msg);
                else
                    messageAnimator->deliveryDirect(msg);
            }

            // deliveries must be played immediately, since we
            // are right before the processing of the message,
            // and it would disappear otherwise
            if (runMode != RUNMODE_FAST)
                performHoldAnimations();
        }
    }
}

void QtenvApp::messageScheduled(cMessage *msg)
{
}

void QtenvApp::messageCancelled(cMessage *msg)
{
    if (msg == runUntil.msg && runUntil.stopOnMsgCancel) {
        if (getSimulation()->getState() == cSimulation::SIM_RUNNING)
            confirm(INFO, opp_stringf("Run-until message '%s' got cancelled.", msg->getFullName()).c_str());
        runUntil.msg = nullptr;
        runUntil.eventNumber = getSimulation()->getEventNumber();  // stop the simulation using the event number limit
    }
}

void QtenvApp::beginSend(cMessage *msg, const SendOptions& options)
{
    if (cLog::isLoggingEnabled())
        logBuffer.beginSend(msg, options);

    if (messageAnimator->getShowAnimations() && opt->animationEnabled && !isSilentEvent(msg))
        messageAnimator->beginSend(msg, options);
}

void QtenvApp::messageSendDirect(cMessage *msg, cGate *toGate, const ChannelResult& result)
{
    if (cLog::isLoggingEnabled())
        logBuffer.messageSendDirect(msg, toGate, result);

    if (messageAnimator->getShowAnimations() && opt->animationEnabled && !isSilentEvent(msg))
        messageAnimator->sendDirect(msg, msg->getSenderModule(), toGate, result);
}

void QtenvApp::messageSendHop(cMessage *msg, cGate *srcGate)
{
    if (cLog::isLoggingEnabled())
        logBuffer.messageSendHop(msg, srcGate);

    if (messageAnimator->getShowAnimations() && opt->animationEnabled && !isSilentEvent(msg)) {
        bool isLastHop = srcGate->getNextGate() == msg->getArrivalGate();
        messageAnimator->sendHop(msg, srcGate, isLastHop);
    }
}

void QtenvApp::messageSendHop(cMessage *msg, cGate *srcGate, const cChannel::Result& result)
{
    if (cLog::isLoggingEnabled())
        logBuffer.messageSendHop(msg, srcGate, result);

    if (messageAnimator->getShowAnimations() && opt->animationEnabled && !isSilentEvent(msg)) {
        bool isLastHop = srcGate->getNextGate() == msg->getArrivalGate();
        messageAnimator->sendHop(msg, srcGate, isLastHop, result);
    }
}

void QtenvApp::endSend(cMessage *msg)
{
    if (cLog::isLoggingEnabled())
        logBuffer.endSend(msg);

    if (messageAnimator->getShowAnimations() && opt->animationEnabled && !isSilentEvent(msg))
        messageAnimator->endSend(msg);
}

void QtenvApp::messageDeleted(cMessage *msg)
{
    if (messageAnimator)
        messageAnimator->removeMessagePointer(msg);
}

void QtenvApp::componentMethodBegin(cComponent *fromComp, cComponent *toComp, const char *methodFmt, va_list va, bool silent)
{
    if (messageAnimator->getShowAnimations() && opt->animateMethodCalls && messageAnimator) {
        static char methodText[MAX_METHODCALL];
        vsnprintf(methodText, MAX_METHODCALL, opp_nulltoempty(methodFmt), va);
        methodText[MAX_METHODCALL-1] = '\0';

        messageAnimator->methodcallBegin(fromComp, toComp, methodText, silent);
    }
}

void QtenvApp::componentMethodEnd()
{
    if (messageAnimator->getShowAnimations() && opt->animateMethodCalls && messageAnimator)
        messageAnimator->methodcallEnd();
}

void QtenvApp::moduleCreated(cModule *newmodule)
{
    cModule *mod = newmodule->getParentModule();

    for (auto & inspector : inspectors) {
        ModuleInspector *insp = isModuleInspectorFor(mod, inspector);
        if (insp)
            insp->submoduleCreated(newmodule);
    }
}

void QtenvApp::moduleDeleted(cModule *module)
{
    componentHistory.componentDeleted(module);

    moduleLayouter.clearLayout(module);
    moduleLayouter.forgetPosition(module);

    cModule *mod = module->getParentModule();

    for (auto & inspector : inspectors) {
        ModuleInspector *insp = isModuleInspectorFor(mod, inspector);
        if (insp)
            insp->submoduleDeleted(module);
    }
}

void QtenvApp::moduleReparented(cModule *module, cModule *oldParent, int oldId)
{
    componentHistory.componentReparented(module, oldParent, oldId);

    // pretend it got deleted from under the 1st module, and got created under the 2nd
    for (auto & inspector : inspectors) {
        ModuleInspector *insp = isModuleInspectorFor(oldParent, inspector);
        if (insp)
            insp->submoduleDeleted(module);
    }

    cModule *mod = module->getParentModule();
    for (auto & inspector : inspectors) {
        ModuleInspector *insp = isModuleInspectorFor(mod, inspector);
        if (insp)
            insp->submoduleCreated(module);
    }
}

void QtenvApp::connectionCreated(cGate *srcgate)
{
    // notify compound module where the connection (whose source is this gate) is displayed
    cModule *notifymodule = nullptr;
    if (srcgate->getType() == cGate::OUTPUT)
        notifymodule = srcgate->getOwnerModule()->getParentModule();
    else
        notifymodule = srcgate->getOwnerModule();

    for (auto & inspector : inspectors) {
        ModuleInspector *insp = isModuleInspectorFor(notifymodule, inspector);
        if (insp)
            insp->connectionCreated(srcgate);
    }
}

void QtenvApp::connectionDeleted(cGate *srcgate)
{
    if (srcgate->getChannel())
        componentHistory.componentDeleted(srcgate->getChannel());

    // notify compound module where the connection (whose source is this gate) is displayed
    // note: almost the same code as above
    cModule *notifymodule;
    if (srcgate->getType() == cGate::OUTPUT)
        notifymodule = srcgate->getOwnerModule()->getParentModule();
    else
        notifymodule = srcgate->getOwnerModule();

    for (auto & inspector : inspectors) {
        ModuleInspector *insp = isModuleInspectorFor(notifymodule, inspector);
        if (insp)
            insp->connectionDeleted(srcgate);
    }
}

void QtenvApp::displayStringChanged(cComponent *component)
{
    if (cModule *module = dynamic_cast<cModule *>(component))
        moduleDisplayStringChanged(module);
    else if (cChannel *channel = dynamic_cast<cChannel *>(component))
        channelDisplayStringChanged(channel);
}

void QtenvApp::getImageSize(const char *imageName, double& outWidth, double& outHeight)
{
    auto size = icons.getImage(imageName)->size();
    outWidth = size.width();
    outHeight = size.height();
}

void QtenvApp::getTextExtent(const cFigure::Font& font, const char *text, double& outWidth, double& outHeight, double& outAscent)
{
    if (!*text) {
        outWidth = outHeight = outAscent = 0;
        return;
    }

    std::string typeFace = font.typeface.c_str();
    if (typeFace.empty())
        typeFace = canvasFont.family().toStdString();

    int pointSize = font.pointSize;
    if (pointSize <= 0)
        pointSize = canvasFont.pointSize();

    QFont f(typeFace.c_str(), pointSize);

    f.setBold(font.style & cFigure::FONT_BOLD);
    f.setItalic(font.style & cFigure::FONT_ITALIC);
    f.setUnderline(font.style & cFigure::FONT_UNDERLINE);

    QFontMetricsF metrics(f);

    QStringList lines = QString(text).split(QChar('\n'));

    double w = 0;
    for (const auto &l : lines)
        w = std::max(metrics.width(l), w);

    outWidth = w;
    // No need to account for interline leading, or use lineSpacing,
    // as the default QGraphicsSimpleTextItem (wrongly) uses line
    // height to advance the baseline, so this is "correct".
    outHeight = lines.length() * metrics.height();
    outAscent = metrics.ascent();
}

void QtenvApp::appendToImagePath(const char *directory)
{
    icons.loadImages(directory);
}

void QtenvApp::loadImage(const char *fileName, const char *imageName)
{
    icons.loadImage(fileName, imageName);
}

cFigure::Rectangle QtenvApp::getSubmoduleBounds(const cModule *submodule)
{
    cObject *parentObject = static_cast<cObject*>(submodule->getParentModule());

    // If no inspector inspects the parent of submodule, will fall back to these, which is reasonable methinks.
    double zoomFactor = 1.0;
    double iconScale = 1.0;

    // This is the inspector (if any) that will convert the submodule rectangle
    // into canvas coordinates. It will only be guaranteed to be correct when
    // viewed in this inspector, since the zoom level and the icon scaling
    // both affect the submodule rectangle relative to the canvas, and they
    // are not shared among different inspector instances viewing the same
    // module, in contrast with the layout, which is global (now...).
    // All other inspectors will display the canvas the same way as this one,
    // except the submodule boundary in those will not necessarily match up with
    // the rectangle on the canvas that we're going to return from here right now.
    // The one embedded module inspector takes precedence, but if it's not
    // suitable, we try finding another one, a top-level.
    ModuleInspector *primaryInsp = (mainNetworkView->getObject() == parentObject)
            ? mainNetworkView
            : dynamic_cast<ModuleInspector*>(findFirstInspector(parentObject, INSP_GRAPHICAL, true));

    if (primaryInsp) {
        zoomFactor = primaryInsp->getZoomFactor();
        iconScale = primaryInsp->getImageSizeFactor();
    }

    // If we passed these two parameters directly to the layouter, it would return the rectangle in scene
    // coordinates. (This is really useful for us to draw the non-canvas parts of the network, like
    // connections and messages, but not quite for the model.) Those are the ones that get bigger when
    // zoomed in, unlike canvas coords, which stay the same, only the "output" is transformed with zoom.
    // So to make both the size and the position match perfectly, we have to pretend that there is no zoom.
    // This way when the rectangle is mapped back again from canvas coordinates into scene coordinates with a
    // simple scaling by the zoom factor (in both position and size of course), everyone will be happy.
    // Note though that the ratio of the icon factor and the zoom factor is still important, because the submodule
    // can have the appearance of one or both of an icon and a shape (box or oval). The shape scales only with
    // zoom, so dividing that with the zoom level obviously gives one, but the icon is scaled independently,
    // with the icon size factor, so that's why the division is there.
    QRectF r = moduleLayouter.getModuleRectangle(const_cast<cModule *>(submodule), 1.0, iconScale / zoomFactor);
    return cFigure::Rectangle(r.x(), r.y(), r.width(), r.height());
}

std::vector<cFigure::Point> QtenvApp::getConnectionLine(const cGate *sourceGate)
{
    const cGate *nextGate = sourceGate ? sourceGate->getNextGate() : nullptr;
    if (!nextGate)
        return {};

    cModule *parentObject = (sourceGate->getType() == cGate::OUTPUT)
        ? sourceGate->getOwnerModule()->getParentModule()
        : sourceGate->getOwnerModule();

    ModuleInspector *primaryInsp = (mainNetworkView->getObject() == parentObject)
            ? mainNetworkView
            : dynamic_cast<ModuleInspector*>(findFirstInspector(parentObject, INSP_GRAPHICAL, true));

    if (!primaryInsp)
        return {};

    double zoomFactor = primaryInsp->getZoomFactor();

    QLineF line = primaryInsp->getConnectionLine(const_cast<cGate *>(sourceGate));

    if (line.isNull())
        return {};

    return {cFigure::Point(line.x1(), line.y1()) / zoomFactor, cFigure::Point(line.x2(), line.y2()) / zoomFactor };
}

double QtenvApp::getZoomLevel(const cModule *module)
{
    const cObject *object = static_cast<const cObject*>(module);

    // This is the inspector (if any) which we will ask for the zoom level.
    // It will only be guaranteed to be correct in this inspector, since the
    // zoom level is not shared among different inspector instances viewing the
    // same module. The one embedded module inspector takes precedence, but if
    // it's not suitable, we try finding another one, a top-level.
    ModuleInspector *primaryInsp = (mainNetworkView->getObject() == object)
            ? mainNetworkView
            : dynamic_cast<ModuleInspector*>(findFirstInspector(object, INSP_GRAPHICAL, true));

    return primaryInsp ? primaryInsp->getZoomFactor() : NAN;
}

double QtenvApp::getAnimationTime() const
{
    return displayUpdateController->getAnimationTime();
}

double QtenvApp::getAnimationSpeed() const
{
    return displayUpdateController->getAnimationSpeed();
}

double QtenvApp::getRemainingAnimationHoldTime() const
{
    return std::max(0.0, displayUpdateController->getAnimationHoldEndTime() - displayUpdateController->getAnimationTime());
}

void QtenvApp::channelDisplayStringChanged(cChannel *channel)
{
    cGate *gate = channel->getSourceGate();

    // notify module inspector which displays connection
    cModule *notifymodule;
    if (gate->getType() == cGate::OUTPUT)
        notifymodule = gate->getOwnerModule()->getParentModule();
    else
        notifymodule = gate->getOwnerModule();

    for (auto & inspector : inspectors) {
        ModuleInspector *insp = isModuleInspectorFor(notifymodule, inspector);
        if (insp)
            insp->displayStringChanged(gate);
    }
}

void QtenvApp::moduleDisplayStringChanged(cModule *module)
{
    // refresh inspector where this module is a submodule
    cModule *parentmodule = module->getParentModule();

    for (auto & inspector : inspectors) {
        ModuleInspector *insp = isModuleInspectorFor(parentmodule, inspector);
        if (insp)
            insp->displayStringChanged(module);
    }

    // refresh inspector where this module is the parent (i.e. this is a
    // background display string change)
    for (auto & inspector : inspectors) {
        ModuleInspector *insp = isModuleInspectorFor(module, inspector);
        if (insp)
            insp->displayStringChanged();
    }
}

void QtenvApp::onSelectionChanged(cObject *object)
{
    mainInspector->setObject(object);
}

void QtenvApp::onObjectDoubleClicked(cObject *object)
{
    if (cModule *module = dynamic_cast<cModule *>(object)) {
        mainNetworkView->setObject(module);
    }
    else {
        inspect(object, INSP_DEFAULT, true);
    }
}

void QtenvApp::bubble(cComponent *component, const char *text)
{
    if (!opt->showBubbles)
        return;

    if (component->getParentModule()) {
        cModule *enclosingmod = component->getParentModule();
        for (auto & inspector : inspectors) {
            ModuleInspector *insp = isModuleInspectorFor(enclosingmod, inspector);
            if (insp)
                insp->bubble(component, text);
        }
    }
}

void QtenvApp::confirm(DialogKind kind, const char *msg)
{
    if (!mainWindow) {
        // fallback in case Qt didn't fire up correctly
        const char *prefix = kind==ERROR ? "Error: " : kind==WARNING ? "Warning: " : "";
        out << "\n<!> " << prefix << msg << endl << endl;
    }
    else {
        switch (kind) {
        case INFO: QMessageBox::information(mainWindow, "Confirm", msg, QMessageBox::StandardButton::Ok); break;
        case WARNING: QMessageBox::warning(mainWindow, "Confirm", msg, QMessageBox::StandardButton::Ok); break;
        case ERROR: QMessageBox::critical(mainWindow, "Confirm", msg, QMessageBox::StandardButton::Ok); break;
        }
    }
}

void QtenvApp::alert(const char *msg)
{
    confirm(WARNING, msg);
}

void QtenvApp::log(cLogEntry *entry)
{
    if (!cLog::isLoggingEnabled())
        return;

    std::string prefix = getLogFormatter().formatPrefix(entry);
    const char *s = entry->text;
    int n = entry->textLength;

    // rough guard against forgotten "\n"'s in the code
    const int maxLen = 5000;
    if (n > maxLen) {
        const char *ellipsis = "... [line too long, truncated]\n";
        strcpy(const_cast<char *>(s) + maxLen - strlen(ellipsis), ellipsis);  // khmm...
        n = maxLen;
    }

    // insert into log buffer
    cModule *module = getSimulation()->getContextModule();
    if (module)
        logBuffer.addLogLine(entry->logLevel, prefix.c_str(), s, n);
    else
        logBuffer.addInfo(s, n);
}

bool QtenvApp::inputDialog(const char *title, const char *prompt,
        const char *checkboxLabel, const char *defaultValue,
        std::string& outResult, bool& inoutCheckState)
{
    QDialog *dialog = new QDialog(mainWindow);
    dialog->setFont(boldFont);
    dialog->setWindowTitle(title);

    QVBoxLayout *layout = new QVBoxLayout();
    layout->addWidget(new QLabel(prompt));
    QLineEdit *edit = new QLineEdit(opp_nulltoempty(defaultValue));
    layout->addWidget(edit);

    QCheckBox *checkBox = nullptr;
    if (checkboxLabel) {
        checkBox = new QCheckBox(checkboxLabel);
        layout->addWidget(checkBox);
    }

    QDialogButtonBox *buttonBox = new QDialogButtonBox(QDialogButtonBox::Ok | QDialogButtonBox::Cancel, Qt::Horizontal);
    connect(buttonBox, SIGNAL(accepted()), dialog, SLOT(accept()));
    connect(buttonBox, SIGNAL(rejected()), dialog, SLOT(reject()));
    layout->addWidget(buttonBox);

    dialog->setLayout(layout);

    if (dialog->exec() == QDialog::Rejected)
        return false;

    outResult = edit->text().toStdString();
    if (checkBox)
        inoutCheckState = checkBox->isChecked();

    delete dialog;
    return true;
}

void QtenvApp::showException(std::exception& e)
{
    if (cRuntimeError *runtimeError = dynamic_cast<cRuntimeError*>(&e))
        // do not pop up dialog if this error was already displayed
        // (by the dialog that asks the user if they want a debugger)
        if (runtimeError->displayed)
            return;

    confirm(ERROR, cException::getFormattedMessage(e,false).c_str());
}

std::string QtenvApp::gets(const char *prompt, const char *defaultReply)
{
    cModule *mod = getSimulation()->getContextModule();
    std::string title = mod ? mod->getFullPath() : getSimulation()->getNetworkType()->getName();
    std::string result;
    bool dummy;
    bool ok = inputDialog(title.c_str(), prompt, nullptr, defaultReply, result, dummy);
    if (!ok)
        throw cRuntimeError(E_CANCEL);
    return result;
}

bool QtenvApp::askYesNo(const char *question)
{
    cModule *mod = getSimulation()->getContextModule();
    std::string title = mod ? mod->getFullPath() : getSimulation()->getNetworkType()->getName();

    switch (QMessageBox::question(getMainWindow(), title.c_str(), question,
                                  QMessageBox::Yes | QMessageBox::No)) { // XXX: should allow cancel?
        case QMessageBox::Yes: return true;
        case QMessageBox::No:  return false;
        default: throw cRuntimeError(E_CANCEL);
    }
}

QPoint QtenvApp::getDefaultStopDialogCorner(const QPoint& offset)
{
    auto insp = getMainModuleInspector();
    return insp->mapToGlobal(insp->contentsRect().topRight() + offset);  // not covering the toolbar
}

void QtenvApp::setPref(const QString& key, const QVariant& value)
{
    QSettings *settings = (isLocalPrefKey(key) ? localPrefs : globalPrefs);
    if (value.isValid())
        settings->setValue(key, value);
    else
        settings->remove(key);
}

QVariant QtenvApp::getPref(const QString& key, const QVariant& defaultValue)
{
    QSettings *settings = (isLocalPrefKey(key) ? localPrefs : globalPrefs);
    return settings->value(key, defaultValue);
}

QStringList QtenvApp::getKeysInPrefGroup(const QString &prefGroup)
{
    globalPrefs->beginGroup(prefGroup);
    auto keys = globalPrefs->allKeys();
    globalPrefs->endGroup();
    return keys;
}

void QtenvApp::runSimulationLocal(RunMode runMode, cObject *object, Inspector *insp)
{
    MainWindow *mainWindow = getMainWindow();
    if (mainWindow->isRunning()) {
        mainWindow->setGuiForRunmode(runMode, true);
        prepareForRunningInMode(runMode);
        setRunMode(runMode);
        mainWindow->setRunUntilModule(insp);
    }
    else {
        if (!mainWindow->networkReady())
            return;
        mainWindow->setGuiForRunmode(runMode, true);
        if (object == nullptr && insp)
            object = insp->getObject();

        cModule *mod = dynamic_cast<cModule *>(object);
        if (!mod) {
            // TODO log "object is not a module"
            return;
        }
        runSimulation(runMode, 0, 0, nullptr, mod);
        mainWindow->setGuiForRunmode(RUNMODE_NOT_RUNNING);
    }
}

void QtenvApp::refOsgNode(osg::Node *scene)
{
    IOsgViewer::refNode(scene);
}

void QtenvApp::unrefOsgNode(osg::Node *scene)
{
    IOsgViewer::unrefNode(scene);
}

void QtenvApp::inspect()
{
    QVariant variant = static_cast<QAction *>(QObject::sender())->data();
    if (variant.isValid()) {
        auto data = variant.value<InspectActionData>();
        inspect(data.object, data.type, true);
    }
}

void QtenvApp::runUntilModule()
{
    QVariant variant = static_cast<QAction *>(QObject::sender())->data();
    if (variant.isValid()) {
        RunUntilNextEventActionData data = variant.value<RunUntilNextEventActionData>();
        runSimulationLocal(data.runMode, data.object, data.insp);
    }
}

void QtenvApp::runUntilMessage()
{
    QVariant variant = static_cast<QAction *>(QObject::sender())->data();
    if (variant.isValid()) {
        auto data = variant.value<RunUntilActionData>();
        mainWindow->runUntilMsg(static_cast<cMessage *>(data.object), data.runMode);
    }
}

void QtenvApp::excludeMessage()
{
    QVariant variant = static_cast<QAction *>(QObject::sender())->data();
    if (variant.isValid())
        mainWindow->excludeMessageFromAnimation(variant.value<cObject *>());
}

void QtenvApp::utilitiesSubMenu()
{
    auto action = dynamic_cast<QAction *>(sender());
    if (action) {
        auto variant = action->data();
        if (variant.isValid()) {
            CopyActionData data = variant.value<CopyActionData>();
            InspectorUtil::copyToClipboard(static_cast<cMessage *>(data.object), data.copy);
        }
    }
}

void QtenvApp::setComponentLogLevel()
{
    auto action = dynamic_cast<QAction *>(sender());
    if (action) {
        auto variant = action->data();
        if (variant.isValid() && variant.canConvert<ComponentLogActionData>()) {
            auto data = variant.value<ComponentLogActionData>();
            setComponentLogLevel(data.component, data.logLevel, true);
        }
    }
}

// the save parameter will be false when restoring the levels from the prefs
// without it, the loglevels of all children would be erased when restoring
// the level of one of its ancestor components
void QtenvApp::setComponentLogLevel(cComponent *component, LogLevel level, bool save)
{
    cCollectObjectsOfTypeVisitor<cComponent> v;  // should include the component itself
    v.process(component);
    cComponent **objs = (cComponent **)v.getArray();

    for (int i = 0; i < v.getArraySize(); ++i) {
        // have to remove the explicitly saved loglevels of the children, so
        // they won't have their old levels restored in the next session
        if (save)
            setPref(QString("ComponentLogLevels/") + objs[i]->getFullPath().c_str(), QVariant());
        objs[i]->setLogLevel(level);
    }

    // only saving the pref for the one which got explicitly set, the restoring
    // part will take care of the descendants (and the ini file won't grow too much)
    // have to do this after the removal up there, because component is in objs
    if (save)
        setPref(QString("ComponentLogLevels/") + component->getFullPath().c_str(), level);
}

void QtenvApp::initFonts()
{
    // TODO Check default time font in Windows and Mac
#ifdef Q_OS_WIN
    // Windows
    defaultFonts.boldFont = getFirstAvailableFontFamily({ "Segoe UI", "MS Sans Serif", "Arial" }, 9);
    defaultFonts.canvasFont = defaultFonts.boldFont;
    defaultFonts.timelineFont = getFirstAvailableFontFamily({ "Segoe Condensed", "Gill Sans MT Condensed", "Liberation Sans Narrow" }, defaultFonts.boldFont.pointSize(), defaultFonts.boldFont);
    defaultFonts.logFont = getFirstAvailableFontFamily({ "Fira Code", "DejaVu Sans Mono", "Courier New", "Consolas", "Terminal" }, 9);
    defaultFonts.timeFont = defaultFonts.boldFont;
    defaultFonts.timeFont.setPointSize(12);
#elif defined(Q_OS_MAC)
    // Mac
    defaultFonts.boldFont = getFirstAvailableFontFamily({ "Lucida Grande", "Helvetica" }, 13);
    defaultFonts.canvasFont = defaultFonts.boldFont;
    defaultFonts.timelineFont = getFirstAvailableFontFamily({ "Arial Narrow" }, defaultFonts.boldFont.pointSize(), defaultFonts.boldFont);
    defaultFonts.logFont = getFirstAvailableFontFamily({ "Fira Code", "Monaco", "Courier" }, 13);
    defaultFonts.timeFont = defaultFonts.boldFont;
    defaultFonts.timeFont.setPointSize(16);
#else
    // Linux and other systems
    defaultFonts.boldFont = getFirstAvailableFontFamily({ "Ubuntu", "Arial", "Verdana", "Helvetica", "Tahoma", "DejaVu Sans", "Nimbus Sans L", "FreeSans", "Sans" }, 9);
    defaultFonts.canvasFont = defaultFonts.boldFont;
    defaultFonts.timelineFont = getFirstAvailableFontFamily({ "Ubuntu Condensed", "Arial Narrow", "DejaVu Sans Condensed" }, defaultFonts.boldFont.pointSize(), defaultFonts.boldFont);
    defaultFonts.logFont = getFirstAvailableFontFamily({ "Fira Code", "Ubuntu Mono", "DejaVu Sans Mono", "Courier New", "FreeMono", "Courier" }, 9);
    defaultFonts.timeFont = defaultFonts.boldFont;
    defaultFonts.timeFont.setPointSize(12);
#endif

    auto initFont = [this](const QString &key, QFont &font, const QFont &defaultFont) {
        QStringList sl = getPref("Fonts/" + key).toStringList();
        if (sl.length() == 2) {
            bool ok = false;
            int size = sl[1].toInt(&ok);
            if (ok) {
                font = QFont(sl[0], size);
                return;
            }
        }
        font = defaultFont;
    };

    initFont("bold", boldFont, defaultFonts.boldFont);
    initFont("canvas", canvasFont, defaultFonts.canvasFont);
    initFont("timeline", timelineFont, defaultFonts.timelineFont);
    initFont("log", logFont, defaultFonts.logFont);
    initFont("time", timeFont, defaultFonts.timeFont);
}

// Returns the first font family from the given preference list that is
// available on the system. If none are available, returns defaultValue.
QFont QtenvApp::getFirstAvailableFontFamily(std::initializer_list<QString> preferenceList, int pointSize, QFont defaultValue)
{
    QFontDatabase fontDb;
    for (QString str : preferenceList) {
        QFont font = fontDb.font(str, "Normal", pointSize);
        if (font != QFont())
            return font;
    }
    return defaultValue;
}

void QtenvApp::saveFonts()
{
    auto saveFont = [this](const QString &key, const QFont &font) {
        setPref("Fonts/" + key, QStringList() << font.family() << QString::number(font.pointSize()));
    };

    saveFont("bold", boldFont);
    saveFont("canvas", canvasFont);
    saveFont("timeline", timelineFont);
    saveFont("log", logFont);
    saveFont("time", timeFont);
}

void QtenvApp::updateQtFonts()
{
    Q_EMIT fontChanged();
    mainWindow->setStyleSheet(
                // if we dont reapply the font here, it will be overwritten with the default, because Qt.
                "* { font: " + QString::number(boldFont.pointSize()) + "pt " + boldFont.family() + "; } "
                "QLabel#simTimeLabel, QLabel#eventNumLabel { font: " + QString::number(timeFont.pointSize()) + "pt " + timeFont.family() + ";"
                "background-color: palette(base); border: 1px solid palette(mid); }"
                // avoids too tall toolbars on Mac
                "QToolButton { width: 24px; height: 24px; margin: 0px; }"
                // makes tool buttons tighty packed, background explicitly painted, frame disabled
                "QToolBar { spacing: 0px; background: palette(window); border-style: none; icon-size: 24px; }"
          #ifdef Q_WS_MAC // Mac-specific workarounds
                // replacing the ugly default gradient
                "QToolBar::separator { background: palette(window); }"
                "QToolButton { background: palette(window); }"

                // as a workaround to a Qt4 bug, should be unnecessary with Qt5
                // (vertical splitter handles had white background without this,
                // but this makes the little dots on them disappear...)
                "QSplitter::handle { background-color: palette(window); }"
          #endif
        );
}

//======================================================================
// dummy function to force Unix linkers collect all symbols needed

void _dummy_for_genericobjectinspector();
void _dummy_for_watchinspector();
void _dummy_for_moduleinspector();
void _dummy_for_loginspector();
void _dummy_for_histograminspector();
void _dummy_for_outputvectorinspector();
void _dummy_for_objecttreeinspector();

void _dummy_func()
{
    _dummy_for_genericobjectinspector();
    _dummy_for_watchinspector();
    _dummy_for_moduleinspector();
    _dummy_for_loginspector();
    _dummy_for_histograminspector();
    _dummy_for_outputvectorinspector();
    _dummy_for_objecttreeinspector();
}

}  // namespace qtenv
}  // namespace omnetpp

