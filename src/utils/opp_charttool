#!/usr/bin/env python3

"""
This script can load .anf files and execute the chart scripts in them, independent of the IDE.
"""

import os
import re
import sys
import glob
import argparse
from argparse import RawTextHelpFormatter
import logging
import traceback
import subprocess
import numpy as np
import pandas as pd
import xml.etree.ElementTree as ET
import matplotlib.pyplot as plt
from omnetpp.scave.analysis import *
from omnetpp.scave.charttemplate import *
from omnetpp.scave.chart import ChartScriptError
import omnetpp.scave.utils as utils


def parse_command_line():
    parser = argparse.ArgumentParser(description=
        "For processing OMNeT++ Analysis files (*.anf) on the command line. opp_charttool can list the "
        "contents of anf files, and run the chart scripts for display or image/data export. "
        "Native charts are 'emulated' using Matplotlib.",
        epilog="Some commands accept additional arguments. For more info, run opp_charttool COMMAND -h",
        formatter_class=RawTextHelpFormatter)

    subparsers = parser.add_subparsers(help='', dest='command', metavar='COMMAND')

    root_parser = argparse.ArgumentParser()
    root_parser.add_argument('-g', dest="debug", default=False, action='store_true', help='Debug: Print stack trace on error')
    root_parser.add_argument('-v', dest="verbose", default=False, action='store_true', help='Verbose operation')
    root_parser.add_argument("-l", "--log-level", choices=["ERROR", "WARN", "INFO", "DEBUG"], default="WARN", help="Sets the log level")

    chart_select_parser = argparse.ArgumentParser(parents=[root_parser], add_help=False)
    chart_select_parser.add_argument('anf_file', type=str, nargs=1, default="", help='The Analysis (.anf) file')
    chart_select_parser.add_argument('-i', metavar='indices', type=str, nargs=1, help='Selects charts with the given indices, example: 1,3,6-10 (see "info" command; conflicts with -n)')
    chart_select_parser.add_argument('-n', metavar='substring', type=str, nargs=1, help='Select charts that have the given substring in their names/paths (conflicts with -i)')
    chart_select_parser.add_argument('charts', type=str, nargs="*", default="", help='Select charts to operate on. Accepts any number of both index ranges (like -i) and name/path substrings (like -n).')

    info_parser = subparsers.add_parser('info', parents=[chart_select_parser], help='(default) Info about the analysis file', add_help=False)

    common_parser = subparsers.add_parser(None, parents=[chart_select_parser], add_help=False)
    common_parser.add_argument('-p', metavar='project_path', type=str, nargs='*', default=[], help='Adds a workspace path to filesystem directory mapping (format: "/project=.")')
    common_parser.add_argument('-w', metavar='workspace_directory', type=str, nargs=1, default=[None], help='The workspace directory. Acts as a fallback after -p. The input patterns are relative to this')
    common_parser.add_argument('-D', metavar='properties', dest='properties', type=str, nargs='*', default=[], help='Extra properties to pass to the chart script, format: key=value')
    common_parser.add_argument('-s', dest="suppress_print", default=False, action='store_true', help='Suppress `print` from chart scripts')

    run_parser = subparsers.add_parser('run', help='Run a selected chart', parents=[common_parser], add_help=False)
    run_parser.add_argument('--no-show', dest="show", default=True, action='store_false', help='Do not call plt.show() after running')

    imageexport_parser = subparsers.add_parser('imageexport', help='Export selected or all charts as image(s)', parents=[common_parser], add_help=False)
    imageexport_parser.add_argument('-f', metavar='format', dest='format', type=str, default='svg', help='The image format to export in')
    imageexport_parser.add_argument('-d', metavar='folder', dest='target_folder', type=str, default=None, help='The folder to export into')
    imageexport_parser.add_argument('-o', metavar='filename', dest='out_file', type=str, default=None, help='The filename to export as')

    imageexport_parser.add_argument('--width', metavar='width', type=float, default=None, help='The width of the image in inches')
    imageexport_parser.add_argument('--height', metavar='height', type=float, default=None, help='The height of the image in inches')
    imageexport_parser.add_argument('--dpi', metavar='dpi', type=int, default=None, help='The resolution of the image in dots per inch')

    dataexport_parser = subparsers.add_parser('dataexport', help='Export data of selected or all charts', parents=[common_parser], add_help=False)
    dataexport_parser.add_argument('-f', metavar='format', dest='format', type=str, default='csv', help='The data format to export in')
    dataexport_parser.add_argument('-d', metavar='folder', dest='target_folder', type=str, default=None, help='The folder to export into')
    dataexport_parser.add_argument('-o', metavar='filename', dest='out_file', type=str, default=None, help='The filename to export as')

    templates_parser = subparsers.add_parser('templates', help='List available chart templates', parents=[root_parser], add_help=False)
    templates_parser.add_argument('-I', metavar='templates_path', dest='templates_path', type=str, default=None, help='Colon-separated list of directories where chart templates are to be loaded from')
    templates_parser.add_argument('--properties', dest="print_properties", default=False, action='store_true', help='Print chart properties')

    argv = sys.argv[1:]

    COMMANDS = ["info", "run", "imageexport", "dataexport", "templates"]
    if argv and argv[0] not in COMMANDS \
            and not argv[0].startswith("-") and argv[0].endswith(".anf"):
        argv = ["info"] + argv

    args = parser.parse_args(argv)

    if not args.command:
        parser.print_help()
        exit(0)

    if args.command not in COMMANDS:
        raise ValueError(f"Unknown command '{args.command}'")

    return args

def do_templates_command(templates_path, print_properties, verbose):
    dirs = [os.path.abspath(dir) for dir in templates_path.split(":")] if templates_path else []
    if verbose:
        print("Loading from: " + ":".join(dirs + get_chart_template_locations()) + "\n")
    templates = load_chart_templates(dirs)
    for id in sorted(templates.keys()):
        template = templates[id]
        print(f'{id}: "{template.name}" ({template.type})')
        if print_properties:
            for key in sorted(template.properties.keys(), key=str.casefold):
                value = template.properties[key]
                print(f'    {key} = {repr(value)}')

def do_info_command(anf_file, analysis, selected_charts, all_charts):
    print(anf_file + ":\n")
    print(f"Inputs:\n")
    for i, input in enumerate(analysis.inputs):
        print(f'\t"{input}"')
    print()
    if selected_charts == all_charts:
        print(f'Charts:\n')
    else:
        print(f'{len(selected_charts)} of {len(all_charts)} charts selected:\n')
    for i, chart in enumerate(all_charts):
        if chart in selected_charts:
            print(f'\t{i}\t{chart.type}\t"{analysis.get_item_path_as_string(chart)}"')

def is_valid_index_range(s):
    """ Checks whether `s` is an index range, as accepted by the `-i` command line argument. """
    return re.match(r'^(((\d+)-(\d+)|(\d+)|),)+$', s+",") is not None

def expand_ranges(s):
    if not is_valid_index_range(s):
        raise ValueError("Invalid syntax '{}' in argument for -i <indices>".format(s))
    # "1-6,99" -> "1,2,3,4,5,6,99"
    s = re.sub(r'(\d+)-(\d+)', lambda m: str(list(range(int(m.group(1)),1+int(m.group(2)))))[1:-1], s)
    # "1,2,3,4,5,6,99" -> [1,2,3,4,5,6,99]
    numbers = [ int(i) for i in s.split(',') ]
    return np.unique(np.array(numbers))

def split_keyvalue(s, where):
    parts = s.split("=", 1)
    if len(parts) != 2:
        raise ValueError(f"Invalid syntax '{s}' {where}, key=value expected")
    key = parts[0].strip()
    value = parts[1].strip()
    return [key,value]

def select_charts(args, analysis, all_charts):
    selected_charts = []

    if args.i and args.n:
        # this technically works now, keeping the restriction for backward compatibility
        raise RuntimeError("Do not use -i and -n together.")

    indices = (args.i or []).copy()
    names = (args.n or []).copy()

    for chart in args.charts:
        if is_valid_index_range(chart):
            indices.append(chart)
        else:
            names.append(chart)

    for chart_index in indices:
        try:
            expanded_indices = expand_ranges(chart_index)
            selected_charts += [all_charts[index] for index in expanded_indices]
        except IndexError:
            raise IndexError(f'Chart index out of range 0..{len(all_charts)-1}')
    for chart_name in names:
        selected_charts += [c for c in all_charts if chart_name in analysis.get_item_path_as_string(c)]
        if not selected_charts:
            raise LookupError(f'String "{chart_name}" does not occur in any chart\'s name or path')

    if not selected_charts:
        selected_charts = all_charts

    return selected_charts

def resolve_workspace(anf_file, args):
    workspace_dir = args.w[0]
    if not workspace_dir:
        anf_dir = os.path.dirname(os.path.abspath(anf_file))
        workspace_dir = Workspace.find_workspace(anf_dir)
    project_paths = dict([split_keyvalue(p, "in a -p option") for p in args.p]) if args.p else dict()
    workspace = Workspace(workspace_dir, project_paths)
    return workspace

def msg_from_chained_exception(e):
    msg = ""
    while e:
        if msg:
            msg += ": "
        msg += str(e)
        e = e.__cause__ if isinstance(e, BaseException) else None
    return msg

def main():
    try:
        logging.basicConfig(format='%(levelname)s: %(message)s', force=True)

        args = parse_command_line()

        if args.command == 'templates':
            do_templates_command(args.templates_path, args.print_properties, args.verbose)
            exit(0)

        utils.set_verbose_export(args.verbose)
        logging.getLogger("omnetpp.scave").setLevel(args.log_level)

        anf_file = args.anf_file[0]
        anf_dir = os.path.dirname(os.path.abspath(anf_file))

        analysis = load_anf_file(anf_file)

        if False: # debug output
            import json
            print(json.dumps(analysis, default=lambda obj: vars(obj), indent=4, separators=(',', ': ')))

        all_charts = analysis.collect_charts()
        selected_charts = select_charts(args, analysis, all_charts)

        if args.command == 'info':
            do_info_command(anf_file, analysis, selected_charts, all_charts)
            exit(0)

        workspace = resolve_workspace(anf_file, args)
        props = dict([split_keyvalue(i, "in a -D option") for i in args.properties])

    except Exception as e:
        if not args.debug:
            print("Error: " + msg_from_chained_exception(e), file = sys.stderr)
            exit(1)
        else:
            raise e

    error_list = []
    for chart in selected_charts:
        try:
            if args.command == 'run':
                print(f'Running "{chart.name}"...')
                analysis.run_chart(chart, anf_dir, workspace, show=args.show, extra_props=props, suppress_print=args.suppress_print)
            elif args.command == 'imageexport':
                print(f'Exporting "{chart.name}"...')
                analysis.export_image(chart, anf_dir, workspace, enforce=False,
                                        format=args.format, target_folder=args.target_folder, filename=args.out_file,
                                        width=args.width, height=args.height, dpi=args.dpi,
                                        extra_props=props, suppress_print=args.suppress_print)
            elif args.command == 'dataexport':
                print(f'Exporting "{chart.name}"...')
                analysis.export_data(chart, anf_dir, workspace, enforce=False,
                                        format=args.format, target_folder=args.target_folder, filename=args.out_file,
                                        extra_props=props, suppress_print=args.suppress_print)
        except Exception as e:
            print(f'\nError in chart "{chart.name}": {str(e)}', file=sys.stderr)
            if not isinstance(e, ChartScriptError) or args.debug:
                print(traceback.format_exc(), file = sys.stderr)
            error_list.append(chart.name)
    if error_list:
        print("Failed charts: " + ", ".join(error_list), file = sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()
