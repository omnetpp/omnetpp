# configure.user
#
# This file contains additional input for 'configure'. It is read (sourced)
# during the configuration process. You are free to edit the settings in here.
#
# The settings in this file are all optional in the sense that they all
# have reasonable default values in the configure script.
#

#
# Edit here if you want to use a different compiler from the one autodetected
# by configure. Turns off the compiler autodetection.
#
#CC=gcc
#CXX=g++

#
# Set to "no" if you want to use gcc/g++ instead of the default clang/clang++ when both
# compilers are installed.
#
PREFER_CLANG=yes

#
# Set to "no" if you want to use the GNU linker instead of LLVM-LLD when both
# linker is installed.
#
PREFER_LLD=yes

#
# On Windows, use the separately installed Visual C linker and Windows SDK. This will generate
# binaries, that are compatible with the Visual C++ compiler.
# USE_MS_ABI=yes

#
# Compiler optimization switches. There are two sets of switches,
# and the MODE variable ("debug" or "release") decides which one gets used.
# (Note: For maximum debugging info use switch -ggdb or -gstabs+3 when using gcc and gdb)
# With gcc, do NOT use --omit-frame-pointer (it crashes when coroutines and
# C++ exceptions (throw/catch) are used together)!
#
#CFLAGS_DEBUG='-g -Wall'
#CFLAGS_RELEASE='-O3 -DNDEBUG=1'

#
# C++ specific compiler options. As OMNeT++ requires C++14 or later, this is
# the place to specify -std=c++14 or a similar option if your compiler's
# default language compliance level is lower than C++14. These options will be
# used when compiling OMNeT++ and also when compiling simulation models.
#
#CXXFLAGS=-std=c++17

#
# Linker switches used for linking.
#
#LDFLAGS=""

#
# Set to "yes" to enable the Qt based graphical runtime environment (Qtenv)
#
WITH_QTENV=yes

#
# Set to "yes" to enable OpenSceneGraph and support in Qtenv
#
WITH_OSG=yes

#
# Set to "yes" to enable osgEarth support in Qtenv (requires OpenScreenGraph enabled)
#
WITH_OSGEARTH=no

#
# Set to "yes" to enable simulation executables to load NED files dynamically.
#
WITH_NETBUILDER=yes

#
# Python bindings for the scave native library allow direct loading of .sca and .vec files
# from Python code outside of the IDE. Setting this parameter to "no" will prevent the
# `opp_charttool` functioning properly. Setting to "yes" requires the python-dev package
# to be installed.
#
WITH_SCAVE_PYTHON_BINDINGS=yes

#
# Set to "yes" to allow the use of LibXML2. OMNeT++ will only use LibXML for loading
# XML files that have a DOCTYPE declaration such as an associated DTD. All other XML files
# are loaded using an embedded XML parser, which is both faster and more memory-efficient.
#
WITH_LIBXML=no

#
# Set to "yes" to enable the parallel distributed simulation feature.
#
WITH_PARSIM=no

#
# Set to "yes" to use SQLite as default file format for output vector and
# output scalar files. As of version 5.1, SQLite support is an experimental
# feature.
#
# To try SQLite result files without changing the default, add the following
# lines into the omnetpp.ini files of your simulations (or specify the same
# settings on the simulation command line, with the "--" prefix):
#
# outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
# outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"
#
PREFER_SQLITE_RESULT_FILES=no

#
# Set to "yes" to enable SystemC support. (Available only in the commecial version (OMNEST))
# Please note that SystemC is not supported on MAC OS X and on the MinGW compiler on Windows.
#
WITH_SYSTEMC=no

#
# Set to "no" to disable backtrace printing on exceptions.
#
WITH_BACKTRACE=yes

#
# Set to no if you want to create static OMNeT++ libraries. Can be overriden
# with "make SHARED_LIBS=no" but then simulation models also need to be built
# with "make SHARED_LIBS=no"
#
SHARED_LIBS=yes

#
# Adds the "ccache" prefix to the compiler commands ($CC,$CXX). This option
# requires ccache to be installed on your system. It can significantly speed up
# recompilations by caching already compiled object files. Note that turning
# this option off does not necessarily disable ccache if it is installed to be
# used system-wide.
#
USE_CCACHE_PREFIX=no

#
# Compiler and linker options for Qt
#
# If you wish to use a custom Qt bundle (for example downloaded from the
# official Qt web page, or built from source) instead of the one installed
# on your system as the default (most likely by the package manager), set
# this variable to point to the 'qmake' program in that installation.
# Leave it empty or commented out to use the default Qt installation.
# Please note that on Windows and macOS it is highly recommended to just
# use the Qt bundle included in the OMNeT++ release, and not change this.
#
#QMAKE="/home/user/Qt/5.12/gcc_64/bin/qmake"
#
# You can also explicitly tell 'configure' what compiler options (QT_CFLAGS)
# and linker switches (QT_LIBS) are needed to build an application with Qt
# support. Normally these are autodetected by 'configure' using the QT_PATH
# variable above, so you only need to edit here if autodetection doesn't work.
#
#QT_CFLAGS=
#QT_LIBS=

#
# OpenSceneGraph libraries we want to use. Leave empty for autodetection
# or specify some invalid value (like "no" to explicitly disable OpenSceneGraph)
# At least the following libraries must be found: osg osgGA osgViewer osgQt OpenThreads
#
#OSG_LIBS=

# osgEarth libraries to be used. Leave empty for autodetection.
# At least the following libraries are required: osgEarth osgEarthUtil
#
#OSGEARTH_LIBS=

#
# ZLib is a compression library needed by libxml2.
#
# On MinGW we use the following (dynamically linking against the DLL)
#
#ZLIB_CFLAGS="-I/c/Tools/zlib-1.2.3/include"
#ZLIB_LIBS="-L/c/Tools/zlib-1.2.3/bin -lzlib1"
# or:
#ZLIB_CFLAGS="-I$MSYS/include"
#ZLIB_LIBS="-L$MSYS/lib -lz"

#
# Compiler and linker options for MPI (optional component).
# On LAM/MPI, typing `mpic++ -showme' can give you a hint about MPI_LIBS.
#
# If commented out, the configure script will try to autodetect it
#
#MPI_CFLAGS="-I /usr/include"
#MPI_LIBS="-pthread -llammpio -llammpi++ -llamf77mpi -lmpi -llam -laio -laio -lutil"
#MPI_LIBS="-lmpi++ -lmpi"   #SGI

#
# Compiler and linker options for LIBXML (optional component)
#
# With MinGW I use the following:
#  LIBXML_CFLAGS="-I/c/Tools/libxml2-2.6.20.win32/include -I/c/Tools/iconv-1.9.1.win32/include"
#  LIBXML_LIBS="-L/c/Tools/libxml2-2.6.20.win32/bin -lxml2 -L/c/Tools/iconv-1.9.1.win32/lib -liconv"
# or:
#  LIBXML_CFLAGS="-I$MSYS/include"
#  LIBXML_LIBS="-L$MSYS/bin -lxml2 -L$MSYS/bin -liconv"
# If commented out, the configure script will try to autodetect it
#

#
# Set to "yes" to enable AKAROA support.
#
WITH_AKAROA=no

#
# Compiler and linker options for Akaroa (optional component)
#
# With MinGW I use the following:
#  AKAROA_CFLAGS="-I/d/home/tools/akaroa-2.7.4/include"
#  AKAROA_LIBS="-L/d/home/tools/akaroa-2.7.4/lib -lakaroa"
# If commented out, the configure script will try to autodetect it
#
#AKAROA_CFLAGS=
#AKAROA_LIBS=

#
# The following OMNETPP_* variables don't need to be touched unless
# you want to relocate parts of the package (e.g. put libraries to
# /usr/lib, include files to /usr/include/omnetpp, and so on).
#
#OMNETPP_SRC_DIR="$OMNETPP_ROOT/src"
#OMNETPP_SAMPLES_DIR="$OMNETPP_ROOT/samples"
#OMNETPP_BIN_DIR="$OMNETPP_ROOT/bin"
#OMNETPP_INCL_DIR="$OMNETPP_ROOT/include"
#OMNETPP_LIB_DIR="$OMNETPP_ROOT/lib"

#
# Some more OMNeT++ variables. They select the programs opp_makemake-generated
# makefiles will use. (They get default values if commented out.)
#
#MSGC="$OMNETPP_BIN_DIR/opp_msgc"

#
#
# You may override the following setting if you have additional icons somewhere else.
#
# OMNETPP_IMAGE_PATH="$OMNETPP_ROOT/images"
